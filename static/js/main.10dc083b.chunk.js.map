{"version":3,"sources":["cards.ts","api.ts","game-mechanics.ts","constants.ts","player-view.tsx","bidding-view.tsx","reveal-treasure-view.tsx","distribute-cards-view.tsx","playing-view.tsx","round-view.tsx","score-view.tsx","game-view.tsx","lobby.tsx","name-cookie.ts","App.tsx","lounge/lounge.tsx","local-components/card-view.tsx","local-components/player-view.tsx","local-game/table-view.tsx","utils.ts","local-game/ai.ts","local-game/distribute-cards-view.tsx","local-components/round-scoring-view.tsx","local-game/bid-history-view.tsx","local-game/bidding-view.tsx","local-game/reveal-treasure-view.tsx","local-game/trick-taking-view.tsx","local-game/local-game-round-view.tsx","local-game/score-view-modal.tsx","local-game/navbar.tsx","local-game/loading-view.tsx","local-game/local-game-view.tsx","server/game-view.tsx","server/none-selected-view.tsx","server/distribute-cards-view.tsx","server/api-view.tsx","server/past-tricks-view.tsx","server/admin-treasure-view.tsx","server/reveal-treasure-view.tsx","server/round-view.tsx","server/server-view.tsx","radio-button-group.tsx","landing/landing-view.tsx","local-game/rules-view.tsx","index.tsx"],"names":["CardValue","Suit","getMarriageValue","suit","HEARTS","DIAMONDS","CLUBS","SPADES","getSuits","getCardValues","ACE","TEN","KING","QUEEN","JACK","NINE","suitToString","valueOf","valueToString","value","Card","this","v","cardToString","c","toString","MessageType","Hand","cards","cardsBySuit","marriages","_sortCardsBySuit","_findMarriages","needle","i","length","card","findCard","forEach","push","Object","values","sort","a","b","entries","l","map","includes","pts","reduce","acc","cur","Deck","randomSeed","seedrandom","global","console","assert","_","pop","Error","ADMIN_API_KEY","fetch","process","IS_SERVER","require","GamePhase","API","socket","WebSocket","path","query","userHeaders","url","URL","pathname","k","searchParams","append","headers","key","val","method","mode","data","body","JSON","stringify","gameId","getJSON","r","ok","json","j","error","text","round","name","username","postJSON","points","item","distributedCards","keptCards","isMarriage","t","currentTrick","tc","player","isHeartbeat","send","msgType","LEAVE_LOUNGE","options","Authorization","keys","cardsPerRound","n","Number","parseInt","playerCards","treasureCards","treasure","msg","assign","msgTypes","callback","addEventListener","event","parse","isMarriagePlayed","hand","totalTricks","isFirstCardInTrick","UNSAFE_getWinningCard","trumpSuit","winningP","bestCard","getWinningCard","doesPlayedCardDeclareMarriage","cardIndex","numPastTricks","getWinningBid","bidHistory","contractPts","contractPlayer","bid","computeRoundScores","playerNames","tricksTaken","declaredMarriages","contract","rawPoints","finalPoints","tricks","trick","total","cardValue","countTrickPoints","trickPoints","countAllTrickPoints","raw","final","getLatestScores","scoreHistory","scores","playerName","playerScores","isNaN","updateScores","newRoundScores","newScores","lastRoundScores","barrelTurnCounts","count","getBarrelTurnCounts","Math","min","PlayerView","props","elems","getPoints","cardElems","join","index","className","potentialMarriages","phase","PLAYING","BIDDING","BiddingHistoryView","state","isCollapsed","toggleCollapse","bind","e","preventDefault","setState","highestBid","bids","bidRows","table","href","role","onClick","React","PureComponent","BiddingView","useState","setBids","biddingPlayer","setBiddingPlayer","isSubscribed","setSubscribed","errorText","setErrorText","fetchedBiddingHistory","setFetchedBiddingHistory","setHighestBid","passedPlayers","setPassedPlayers","bidPoints","setBidPoints","handleBidSubmit","isPass","api","postBid","useEffect","dealer","updateBidHistory","lastBidder","nextPhase","lastBidderIndex","indexOf","newPassedPlayers","filter","newHighestBid","max","log","winningBid","onNextPhase","addMessageListener","BROADCAST_BID","getBids","then","response","playerIndex","onSubmit","htmlFor","type","placeholder","onChange","target","handleBidChange","disabled","RevealTreasureView","finalContractForm","onSetFinalContract","REVEAL_TREASURE","DistributeCardsView","distCard0","setDistCard0","distCard1","setDistCard1","finalContract","cardsCopy","slice","bigHand","card1","card2","cardOptions","p","splice","otherPlayers","onDistCardChange","distIndex","DISTRIBUTE_CARDS","distributeMap","onDistribute","CurrentTrickView","currentTrickList","PlayingView","numTricks","setNumTricks","setCurrentTrick","marriage","setMarriage","turn","setTurn","selectedCard","setSelectedCard","receivedMessages","setReceivedMessages","currentHand","setCurrentHand","hasPlayingPhaseInfo","setHasPlayingPhaseInfo","postPlayCard","newHandCards","id","updatedTrick","winningTc","winnerIndex","newNumTricks","turnIndex","nextTurnIndex","getPlayingPhaseInfo","info","numTricksMap","pastTricks","winner","playedCards","unplayedCards","BROADCAST_PLAY_CARD","addCardToTrick","headerRow","bodyRow","onPlayCard","required","selectCard","RoundView","NOT_DEALT","setPhase","setHand","hasRoundInfo","setHasRoundInfo","setTreasure","setWinningBid","setFinalContract","getPlayerCards","useCallback","playerHand","playerCard","postDealCards","postFinalContract","distributionMap","postDistributeCards","getTreasure","getGameRoundInfo","roundInfo","getRoundInfo","BROADCAST_DEAL","BROADCAST_FINAL_CONTRACT","BROADCAST_DISTRIBUTE_CARDS","handleDeal","ScoreView","setCollapsed","rounds","scoreRows","scoreRow","classes","selectedRound","data-toggle","data-target","aria-expanded","aria-controls","toggleCollapsed","GameView","isGameOver","gameSeeds","sendHeartbeat","startHeartbeatTimer","getPlayerNames","sendMessage","JOIN_GAME","window","setTimeout","players","user1","user2","GAME_SEEDS","seeds","user","seed","parseFloat","Component","GameLobby","users","waitingUsers","readNameCookie","pairs","document","cookie","split","cookies","pair","readCookies","App","hasStarted","setHasStarted","setGameId","setName","setWaitingUsers","onGameUsers","debug","joinGame","location","get","getGameInfo","gameInfo","onopen","GAME_USERS","LoungeNameForm","onNameSubmit","setNameCookie","onNameSet","errorAlert","errorMsg","handleNameChange","CreateGameView","createGame","createGameData","onGameCreated","readOnly","JoinGameView","leaveLounge","handleSubmit","handleChange","Lounge","loungeUsers","showGameCreation","showGameJoin","newGameId","isSocketError","handleNameSet","onWebSocketMessage","showCreateGame","handleGameCreated","createAiGame","title","onmessage","onerror","joinLounge","LOUNGE_USERS","show","newName","isComputerOnly","peopleInLounge","showJoinGame","CardView","getSuitColor","classNames","isSelected","showBack","cardViews","undefined","isActivePlayer","onCardSelect","elem","showCards","selectedCards","addClass","isDealer","isContractPlayer","numTricksTaken","TableView","playerOrder","localPlayerIndex","activePlayerIndex","randInt","floor","random","_hasAce","_getBestMarriageSuit","bestSuit","bestV","_evaluateHand","expectedPoints","hasAce","bestMarriageSuit","cardVals","_playLeadingCard","_findCardValue","possibleCards","leadingSuit","canPlayCard","_playRandomCard","distributeCards","otherPlayerNames","bestAssignment","bestAssignmentValue","cardA","cardB","newCards","newHand","getBid","biddingHistory","PASS","playCard","winningCard","ourBestCard","cbsIndex","ourCard","lowestV","lowestCard","_playFollowingCard","reevalContract","currentContract","bigHandCards","assignments","assignedCards","newContract","DistributeCardsViewHuman","contractPlayerIndex","contractPlayerName","contractPlayerHand","playerHands","targetPlayer","setTargetPlayer","cardDist","setCardDist","handleSelectTarget","humanPlayerName","playerView","dealerIndex","topInstructions","contractPoints","bottomInstructions","targetPlayers","assignmentTable","rows","newCardDist","targetPlayerName","otherPlayerName","DistributeCardsViewOther","isDistributed","setDistributed","assignment","setAssignment","newCard","newAssignment","AI","RoundScoringView","isContractMade","playerTricks","trickIndex","numMarriages","onFinish","BidHistoryView","bidTableCell","tableHeader","startingBidPlayer","roundNum","row","biddingPlayerIndex","setBiddingPlayerIndex","setBidHistory","setPoints","pointsErrorMsg","setPointsErrorMsg","addBid","newBid","hasNonPassBid","isBiddingComplete","step","setErrorMsg","haveAITurn","setAITurn","instructions","onFinalizeContract","newPoints","TrickTakingView","isInstructionsShown","localPlayerName","currentTrickCards","turnInstructions","w","activePlayerName","activePlayerHand","trickCard","onDimissTrick","LocalGameRoundView","fromEntries","trickNumber","dealCards","handleCompleteBidding","handleFinalizeContract","handleDistributeCards","handlePlayCard","handleNextRound","handleDismissTrick","resetRound","readSavedState","persistState","sState","localStorage","setItem","getItem","newHands","newTreasure","oldCards","newPlayerHands","winningPlayerIndex","nextPlayer","winningPlayerName","isPlayingPhaseOver","SCORING","roundScores","onChangePhase","onRoundOver","deck","handCards","cardDistribution","playerBigHand","numFailedDeals","latestScores","getIsGameOver","currentRound","headerPlayerNames","aria-modal","tabIndex","style","display","data-dismiss","aria-label","onDismiss","aria-hidden","Navbar","navHash","hash","handleClick","setNavHash","newHash","reload","defaultChangeNavHash","LoadingView","AI_PLAYER_NAMES","LocalGameView","possibleNames","getInitialScores","isGameReady","winningPlayers","isAllCardsShown","isIntroDialogShown","isScorecardShown","saveGameState","loadGameState","getBoltScores","handleChangePhase","handleChangeViewScorecard","sGameDetails","savedGameState","isEarlyExit","newScoreHistory","newRoundScoresFinal","newPhase","isVisible","mainView","onNewRoute","AdminPlayerView","GameInfoView","aria-labelledby","creator","handleSelectRound","isActive","NoneSelectedView","handleSelectGame","gameLinks","games","selectedPlayer","selectPlayer","onSelect","contractPlayerCards","otherCard","playerButtons","autoComplete","checked","ApiView","onDealClick","onBidChange","onBidClick","onPassClick","onFinalizeContractClick","toggleSelectCard","onNextRound","givingAwayCards","postEndRound","playingPhaseInfo","PastTricksView","pastTrick","AdminTreasureView","allCards","RoundInfoView","gamePhaseToString","playerClass","roundScoringView","tricksPerPlayer","groupTricksByPlayer","isActiveRound","ServerView","loadGames","loadGameInfo","loadRoundBids","loadData","onSelectGame","onSelectRound","adminGetGameInfo","adminGetGames","catch","err","has","loadPlayingPhaseInfo","view","RadioButtonGroup","buttons","labels","label","checkedLabel","disabledLabels","radioName","humanLabels","containerId","randomGameId","String","fromCharCode","getGameDetails","SUPPORTED_LANGS","ActiveGamesView","arr","gameDetails","VsHumanView","gameType","LandingView","urlLang","lang","activeGames","pattern","gameIds","match","replace","m","numGameOver","findExistingActiveGames","showActiveGames","setShowActiveGames","showActiveGamesAlert","setShowActiveGamesAlert","setGameType","existingGamesAlert","set","handleNewAIGame","onJoinGame","onNewGame","RulesView","marriageTableRows","cardValueTableRows","handleNewRoute","ReactDOM","render","StrictMode","getElementById"],"mappings":"iTAGYA,EASAC,E,iJAOL,SAASC,EAAiBC,GAC7B,OAAOA,GACH,KAAKF,EAAKG,OACN,OAAO,IACX,KAAKH,EAAKI,SACN,OAAO,GACX,KAAKJ,EAAKK,MACN,OAAO,GACX,KAAKL,EAAKM,OACN,OAAO,IAOZ,SAASC,IACZ,MAAO,CAACP,EAAKG,OAAQH,EAAKK,MAAOL,EAAKI,SAAUJ,EAAKM,QAOlD,SAASE,IACZ,MAAO,CACHT,EAAUU,IACVV,EAAUW,IACVX,EAAUY,KACVZ,EAAUa,MACVb,EAAUc,KACVd,EAAUe,MAIX,SAASC,EAAab,GACzB,OAAOA,EAAKc,UAGT,SAASC,EAAcC,GAC1B,OAAOA,GACH,KAAKnB,EAAUU,IACX,MAAO,IACX,KAAKV,EAAUY,KACX,MAAO,IACX,KAAKZ,EAAUa,MACX,MAAO,IACX,KAAKb,EAAUc,KACX,MAAO,IACX,KAAKd,EAAUW,IACX,MAAO,KACX,KAAKX,EAAUe,KACX,MAAO,M,SApEPf,O,eAAAA,I,eAAAA,I,iBAAAA,I,eAAAA,I,cAAAA,I,eAAAA,M,cASAC,K,gBAAAA,E,kBAAAA,E,eAAAA,E,iBAAAA,M,KAoEL,IAAMmB,EAAb,WAII,WAAYD,EAAkBhB,GAAa,yBAH3CA,UAG0C,OAF1CgB,WAE0C,EACtCE,KAAKlB,KAAOA,EACZkB,KAAKF,MAAQA,EANrB,4DAUQ,OAAOD,EAAcG,KAAKF,SAVlC,iCAcQ,IAAMG,EAAIJ,EAAcG,KAAKF,OAE7B,OADUH,EAAaK,KAAKlB,MACjBmB,MAhBnB,KAoBO,SAASC,EAAaC,GACzB,OAAQ,IAAIJ,EAAKI,EAAEL,MAAOK,EAAErB,MAAOsB,WAgBhC,IC3FKC,ED2FCC,EAAb,WAcI,WAAYC,GAAgB,yBAb5BA,WAa2B,OAP3BC,iBAO2B,OAF3BC,eAE2B,EACvBT,KAAKO,MAAQA,EAGbP,KAAKQ,YAAcR,KAAKU,iBAAiBH,GACzCP,KAAKS,UAAYT,KAAKW,iBAnB9B,qDA4BaC,GACL,IAAK,IAAIC,EAAI,EAAGA,EAAIb,KAAKO,MAAMO,OAAQD,IAAK,CACxC,IAAIE,EAAOf,KAAKO,MAAMM,GACtB,GAAIE,EAAKjC,OAAS8B,EAAO9B,MAAQiC,EAAKjB,QAAUc,EAAOd,MACnD,OAAOe,EAGf,OAAQ,IAnChB,8BAsCYD,GACJ,OAAkC,IAA3BZ,KAAKgB,SAASJ,KAvC7B,uCA0CqBL,GACb,IADyC,EACnCC,EAAc,GADqB,cAEvBrB,KAFuB,IAEzC,IAAI,EAAJ,qBAA8B,CAAC,IAArBL,EAAoB,QAC1B0B,EAAY1B,GAAQ,IAHiB,8BAMzCyB,EAAMU,SAAQ,SAACF,GACXP,EAAYO,EAAKjC,MAAMoC,KAAKH,MAGhC,IAAI,IAAJ,MAAmBI,OAAOC,OAAOZ,GAAjC,eAA+C,CAAhC,KAEOa,MAAK,SAACC,EAASC,GAC7B,OAAOA,EAAEzB,MAAQwB,EAAExB,SAI3B,OAAOU,IA3Df,uCAgEQ,IADA,IAAMC,EAAoB,GAC1B,MAA2BU,OAAOK,QAAQxB,KAAKQ,aAA/C,eAA6D,CAAC,IAAD,sBAAlD1B,EAAkD,KACnD2C,EADmD,KAC7BC,KAAI,SAACX,GAAgB,OAAOA,EAAKlB,mBACxC4B,EAAEE,SAAS,MAAQF,EAAEE,SAAS,MAE/ClB,EAAUS,KAAKpC,GAGvB,OAAO2B,IAvEf,kCAgFQ,IADA,IAAImB,EAAM,EACV,MAAmBT,OAAOC,OAAOpB,KAAKQ,aAAtC,eAAoD,CAChDoB,GADW,KACcC,QAAO,SAACC,EAAaC,GAC1C,OAAOD,EAAMC,EAAIjC,QAClB,GAEP,OAAO8B,MArFf,KA4FaI,EAAb,WAII,WAAYC,GAAqB,yBAHjCA,gBAGgC,OAFhC1B,WAEgC,EAC5BP,KAAKiC,WAAaA,EAClBjC,KAAKO,MAAQ,GAFe,oBAKVpB,KALU,IAK5B,IAAI,EAAJ,qBAA8B,CAAC,IAAD,EAApBL,EAAoB,sBACPM,KADO,IAC1B,IAAI,EAAJ,qBAAoC,CAAC,IAA3BU,EAA0B,QAChCE,KAAKO,MAAMW,KAAK,IAAInB,EAAKD,EAAOhB,KAFV,gCALF,8BAY5BoD,IAAWD,EAAW7B,WAAY,CAAC+B,QAAQ,IAE3CC,QAAQC,OAAOrC,KAAKO,MAAMO,OAAS,EAAG,oCAGtCd,KAAKO,MAAQ+B,UAAUtC,KAAKO,OAC5B6B,QAAQC,OAAOrC,KAAKO,MAAMO,OAAS,EAAG,oCAtB9C,kDA0BQ,IAAMC,EAAOf,KAAKO,MAAMgC,MACxB,GAAmB,qBAATxB,EACN,MAAM,IAAIyB,MAAM,iBAEpB,OAAOzB,MA9Bf,KC5Ma0B,EAAgB,mEAgB7B,GAAoB,qBAAVC,GAAmD,MAA1BC,+HAAYC,UAE3C,IAAIF,EAAQG,EAAQ,K,SAGZxC,K,0BAAAA,E,4BAAAA,E,4BAAAA,E,wBAAAA,E,sBAAAA,E,sBAAAA,E,wBAAAA,E,wBAAAA,E,2BAAAA,E,4BAAAA,E,8BAAAA,E,oDAAAA,E,wDAAAA,E,2CAAAA,M,KA6KL,ICrMKyC,EDqMCC,EAAb,WAGI,aAAe,yBAFfC,YAEc,EACVhD,KAAKgD,OAAS,IAAIC,UE3MG,uBFuM7B,6FAOkBC,EAAcC,EAA8BC,GAP9D,6FAUQ,IAFMC,EAAM,IAAIC,IE9MG,0BF+MfC,SAAWL,EACZC,EACC,IAAI,EAAJ,IAAoBhC,OAAOK,QAAQ2B,GAAnC,eAA4C,EAAD,oBAAhCK,EAAgC,KAA7BvD,EAA6B,KACvCoD,EAAII,aAAaC,OAAOF,EAAGvD,GAOnC,GAHM0D,EAAU,CACZ,eAAgB,oBAEjBP,EACC,IAAI,EAAJ,IAAwBjC,OAAOK,QAAQ4B,GAAvC,eAAsD,EAAD,oBAA1CQ,EAA0C,KAArCC,EAAqC,KACjDF,EAAQC,GAAOC,EArB/B,yBAyBenB,EAAMW,EAAIjD,WAAY,CACzBuD,UACAG,OAAQ,MACRC,KAAM,UA5BlB,8KAgCmBb,EAAcc,EAAYZ,GAhC7C,mFA0CQ,GATIY,IACAA,EAAO,KAELX,EAAM,IAAIC,IE1OG,0BF2OfC,SAAWL,EAETS,EAAU,CACZ,eAAgB,oBAEjBP,EACC,IAAI,EAAJ,IAAwBjC,OAAOK,QAAQ4B,GAAvC,eAAsD,EAAD,oBAA1CQ,EAA0C,KAArCC,EAAqC,KACjDF,EAAQC,GAAOC,EA5C/B,yBAgDenB,EAAMW,EAAIjD,WAAY,CACzB6D,KAAMC,KAAKC,UAAUH,GACrBL,UACAG,OAAQ,OACRC,KAAM,UApDlB,kLAwDuBK,GAxDvB,yFAyDwBpE,KAAKqE,QAAL,gBAAsBD,EAAtB,WAzDxB,YAyDcE,EAzDd,QA0DcC,GA1Dd,iCA2D4BD,EAAEE,OA3D9B,cA2DkBC,EA3DlB,yBA4DmBA,GA5DnB,eA8DYrC,QAAQsC,MAAMJ,GA9D1B,KA+DsB9B,MA/DtB,UA+DkC8B,EAAEK,OA/DpC,+NAmEyBP,EAAgBQ,EAAeC,GAnExD,yFAoEwB7E,KAAKqE,QAAL,gBAAsBD,EAAtB,kBAAsCQ,EAAtC,UAAqD,CACjEE,SAAUD,IArEtB,YAoEcP,EApEd,QAuEaC,GAvEb,iCAwE4BD,EAAEE,OAxE9B,cAwEkBC,EAxElB,yBAyEmBA,GAzEnB,eA2EYrC,QAAQsC,MAAMJ,GA3E1B,KA4EsB9B,MA5EtB,UA4EkC8B,EAAEK,OA5EpC,kOAgFwBP,EAAgBQ,EAAeE,GAhFvD,uFAiFwB9E,KAAK+E,SAAL,gBAAuBX,EAAvB,kBAAuCQ,EAAvC,SAAqD,CACjEE,SAAUA,IAlFtB,cAiFcR,EAjFd,yBAoFeA,GApFf,mLAuFmBF,EAAgBU,GAvFnC,uFAwFwB9E,KAAK+E,SAAL,eAAsBX,EAAtB,SAAqC,CACjDU,SAAUA,IAzFtB,cAwFcR,EAxFd,yBA2FeA,GA3Ff,yLA8F2BF,EAAgBQ,GA9F3C,yFA+FwB5E,KAAKqE,QAAL,gBAAsBD,EAAtB,kBAAsCQ,IA/F9D,YA+FcN,EA/Fd,QAgGaC,GAhGb,iCAiG4BD,EAAEE,OAjG9B,cAiGkBC,EAjGlB,yBAkGmBA,GAlGnB,QAoGYrC,QAAQsC,MAAR,sCAA6CN,EAA7C,kBAA6DQ,IApGzE,iLA2GkBR,EAAgBQ,GA3GlC,yFA4GwB5E,KAAKqE,QAAL,gBAAsBD,EAAtB,kBAAsCQ,EAAtC,UA5GxB,YA4GcN,EA5Gd,QA6GaC,GA7Gb,iCA8G4BD,EAAEE,OA9G9B,cA8GkBC,EA9GlB,yBA+GmBA,GA/GnB,cAiHkB,IAAIjC,MAAJ,sCAAyC4B,EAAzC,kBAAyDQ,IAjH3E,iLAqHkBR,EAAgBQ,EAAeE,EAAkBE,GArHnE,uFAsHwBhF,KAAK+E,SAAL,gBAAuBX,EAAvB,kBAAuCQ,EAAvC,QAAoD,CAChEE,SAAUA,EACVE,OAAQA,IAxHpB,cAsHcV,EAtHd,yBA0HeA,GA1Hf,wLA6HsBF,EAAgBQ,GA7HtC,yFA8HwB5E,KAAKqE,QAAL,gBAAsBD,EAAtB,kBAAsCQ,EAAtC,cA9HxB,YA8HcN,EA9Hd,QA+HaC,GA/Hb,iCAgI4BD,EAAEE,OAhI9B,cAgIkBC,EAhIlB,yBAkImBA,EAAE/C,KAAI,SAACuD,GACV,OAAO,IAAIlF,EAAKkF,EAAKnF,MAAOmF,EAAKnG,UAnIjD,cAsIkB,IAAI0D,MAAJ,0CAA6C4B,IAtI/D,2LA0I4BA,EAAgBQ,EAAeE,EAAkBE,GA1I7E,uFA2IwBhF,KAAK+E,SAAL,gBAAuBX,EAAvB,kBAAuCQ,EAAvC,mBAA+D,CAC3EE,SAAUA,EACVE,OAAQA,IA7IpB,cA2IcV,EA3Id,yBA+IeA,GA/If,gMAkJ8BF,EAAgBQ,EAAeE,EACrDI,EAAyCC,GAnJjD,uFAoJwBnF,KAAK+E,SAAL,gBAAuBX,EAAvB,kBAAuCQ,EAAvC,qBAAiE,CAC7EE,WACAI,mBACAC,cAvJZ,cAoJcb,EApJd,yBAyJeA,GAzJf,2LA4JuBF,EAAgBQ,EAAeE,EAC9C/D,EAAYqE,GA7JpB,yFA8JwBpF,KAAK+E,SAAL,gBAAuBX,EAAvB,kBAAuCQ,EAAvC,cAA0D,CACtEE,WACA/D,OACAqE,eAjKZ,YA8Jcd,EA9Jd,QAmKaC,GAnKb,yCAoKmBD,GApKnB,uBAsK4BA,EAAEK,OAtK9B,aAsKkBU,EAtKlB,OAuKkB,IAAI7C,MAAJ,+BAAkC6C,IAvKpD,mMA2K8BjB,EAAgBQ,GA3K9C,yFA4KwB5E,KAAKqE,QAAL,gBAAsBD,EAAtB,kBAAsCQ,EAAtC,wBA5KxB,YA4KcN,EA5Kd,QA6KcC,GA7Kd,iCA8K6BD,EAAEE,OA9K/B,UA8KkBC,EA9KlB,6BAgLsB,IAAIjC,MAAM,gCAhLhC,cAkLYiC,EAAEa,aAAeb,EAAEa,aAAa5D,KAAI,SAAC6D,GACjC,MAAO,CACHC,OAAQD,EAAGC,OACXzE,KAAM,IAAIhB,EAAKwF,EAAGxE,KAAKjB,MAAOyF,EAAGxE,KAAKjC,UArL1D,kBAwLmB2F,GAxLnB,cA0LkB,IAAIjC,MAAJ,oDAAuD4B,IA1LzE,oLA8LqBU,EAAkBW,GA9LvC,uFA+LwBzF,KAAK+E,SAAS,eAAgB,CAC1CD,WACAW,gBAjMZ,cA+LcnB,EA/Ld,yBAmMeA,GAnMf,2IAsMgBQ,GACR9E,KAAKgD,OAAO0C,KAAKxB,KAAKC,UAAU,CAC5BwB,QAAStF,EAAYuF,aACrBd,SAAUA,OAzMtB,0EA6MqBA,EAAkBe,GA7MvC,qFAiNQ,GAHM7B,EAAa,CACfc,YAEAe,EACA,UAAqB1E,OAAOK,QAAQqE,GAApC,eAA+C,EAAD,oBAAlCrC,EAAkC,KAA/BvD,EAA+B,KAC1C+D,EAAKR,GAAKvD,EAnN1B,gBAsNwBD,KAAK+E,SAAS,YAAaf,GAtNnD,cAsNcM,EAtNd,gBAuNwBA,EAAEE,OAvN1B,cAuNcC,EAvNd,yBAwNeA,GAxNf,oLA2NsBK,EAAkBV,GA3NxC,yFA4NwBpE,KAAKqE,QAAL,gBAAsBD,GAAU,CAC5CU,aA7NZ,YA4NcR,EA5Nd,QA+NcC,GA/Nd,iCAgO4BD,EAAEE,OAhO9B,cAgOkBC,EAhOlB,yBAiOmBA,GAjOnB,eAmOYrC,QAAQsC,MAAMJ,GAnO1B,KAoOsB9B,MApOtB,UAoOkC8B,EAAEK,OApOpC,+NAwOuBP,EAAgBQ,EAAeE,GAxOtD,uFAyOwB9E,KAAK+E,SAAL,gBAAuBX,EAAvB,kBAAuCQ,EAAvC,cAA0D,CACtEE,aA1OZ,cAyOcR,EAzOd,yBA4OeA,GA5Of,mRAkPwBtE,KAAKqE,QAAQ,SAAU,GAAI,CACvCyB,cAAc,UAAD,OAAYrD,KAnPrC,YAkPc6B,EAlPd,QAqPcC,GArPd,iCAsP4BD,EAAEE,OAtP9B,cAsPkBC,EAtPlB,yBAuPmBA,GAvPnB,eAyPYrC,QAAQsC,MAAMJ,GAzP1B,KA0PsB9B,MA1PtB,UA0PkC8B,EAAEK,OA1PpC,gOA8P2BP,GA9P3B,yFA+PwBpE,KAAKqE,QAAL,sBAA4BD,GAAU,GAAI,CACtD0B,cAAc,UAAD,OAAYrD,KAhQrC,YA+Pc6B,EA/Pd,QAkQcC,GAlQd,iCAmQ6BD,EAAEE,OAnQ/B,cAmQkBC,EAnQlB,OAsQ2BtD,OAAO4E,KAAKtB,EAAEuB,eAAetE,KAAI,SAACuE,GAAO,OAAOC,OAAOC,SAASF,EAAG,OAC3EhF,SAAQ,SAAC2D,GAEZ,IAAMwB,EAAc,GACpBjF,OAAO4E,KAAKtB,EAAEuB,cAAcpB,GAAOwB,aAAanF,SAAQ,SAAC4D,GACrD,IAAMtE,EAAQkE,EAAEuB,cAAcpB,GAAOwB,YAAYvB,GAAMtE,MAAMmB,KAAI,SAACX,GAC9D,OAAO,IAAIhB,EAAKgB,EAAKjB,MAAOiB,EAAKjC,SAErCsH,EAAYvB,GAAQ,IAAIvE,EAAKC,MAIjC,IAAM8F,EAAgB5B,EAAEuB,cAAcpB,GAAO0B,SAAS5E,KAAI,SAACX,GACvD,OAAO,IAAIhB,EAAKgB,EAAKjB,MAAOiB,EAAKjC,SAErC2F,EAAEuB,cAAcpB,GAAO0B,SAAWD,EAClC5B,EAAEuB,cAAcpB,GAAOwB,YAAcA,KAtRrD,kBAyRmB3B,GAzRnB,eA2RYrC,QAAQsC,MAAMJ,GA3R1B,KA4RsB9B,MA5RtB,UA4RkC8B,EAAEK,OA5RpC,4NAqSsBgB,EAAsB3B,GArS5C,8EAsScuC,EAAW,GACjBpF,OAAOqF,OAAOD,EAAKvC,GACnBuC,EAAIZ,QAAUA,EAxStB,SAySc3F,KAAKgD,OAAO0C,KAAKxB,KAAKC,UAAUoC,IAzS9C,kJA4SuBE,EAAyBC,GACxC1G,KAAKgD,OAAO2D,iBAAiB,WAAW,SAACC,GACrC,IAAM5C,EAAOE,KAAK2C,MAAMD,EAAM5C,MAC3ByC,EAAS9E,SAASqC,EAAK2B,UACtBe,EAAS1C,UAhTzB,KAsTejB,I,iBC3fHD,O,yBAAAA,I,qBAAAA,I,qCAAAA,I,uCAAAA,I,qBAAAA,I,sBAAAA,M,KA0FL,SAASgE,EAAiB/F,EAAYgG,EAAYC,EAAqBC,GAC1E,QAAKA,MAGAlG,EAAKjB,QAAUnB,EAAUa,OAASuB,EAAKjB,QAAUnB,EAAUY,OAASwH,EAAKtG,UAAUkB,SAASZ,EAAKjC,QAE3FkI,EAAc,GAYtB,SAASE,EAAsB3G,EAAqB4G,GACvD,GAAqB,IAAjB5G,EAAMO,OACN,MAAM,IAAI0B,MAAM,kCAGpB,IAL2F,EAKvF4E,EAAW7G,EAAM,GAAGiF,OACpB6B,EAAW9G,EAAM,GAAGQ,KANmE,cAQ1ER,GAR0E,IAQ3F,2BAAwB,CAAC,IAAdgF,EAAa,SAEhB4B,GAAa5B,EAAGxE,KAAKjC,OAASqI,EAE1BE,EAASvI,OAASqI,GACP5B,EAAGxE,KAAKjB,MAAQuH,EAASvH,MAIjCyF,EAAGxE,KAAKjC,OAASyB,EAAM,GAAGQ,KAAKjC,SAElCqI,GAAaE,EAASvI,OAASqI,IAKpB5B,EAAGxE,KAAKjB,MAAQuH,EAASvH,UAQxCuH,EAAW9B,EAAGxE,KACdqG,EAAW7B,EAAGC,SAjCqE,8BAqC3F,MAAO,CACHA,OAAQ4B,EACRrG,KAAMsG,GAUP,SAASC,EAAe/G,EAAqB4G,GAChD,GAAqB,IAAjB5G,EAAMO,OACN,MAAM,IAAI0B,MAAJ,iEAAoEjC,EAAMO,SAEpF,OAAOoG,EAAsB3G,EAAO4G,GAqCjC,SAASI,EAA+BR,EAAYS,EAAmBlC,EAA4BmC,GACtG,GAAID,EAAY,GAAKA,GAAaT,EAAKxG,MAAMO,OACzC,MAAM,IAAI0B,MAAJ,iCAAoCgF,IAG9C,GAA4B,IAAxBlC,EAAaxE,QAAkC,IAAlB2G,EAC7B,OAAO,EAGX,IAAM1G,EAAOgG,EAAKxG,MAAMiH,GAGxB,QAAKzG,EAAKjB,QAAUnB,EAAUY,MAAQwB,EAAKjB,QAAUnB,EAAUa,QAAUuH,EAAKtG,UAAUkB,SAASZ,EAAKjC,OAanG,SAAS4I,EAAcC,GAC1B,IADyD,EACrDC,EAAc,EACdC,EAAiC,KAFoB,cAGxCF,GAHwC,IAGzD,IAAI,EAAJ,qBAA6B,CAAC,IAApBG,EAAmB,QACrBA,EAAI9C,OAAS4C,IACbA,EAAcE,EAAI9C,OAClB6C,EAAiBC,EAAItC,SAN4B,8BAUzD,OAAKqC,EAIE,CACHrC,OAAQqC,EACR7C,OAAQ4C,GALD,KAyFR,SAASG,EACZC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAY,GACZC,EAAc,GAGpBL,EAAY/G,SAAQ,SAAC4D,GACjB,IAAIjD,EAxDL,SAA6B0G,GAChC,IAAM1G,EAAO0G,EAAO5G,KAAI,SAAC6G,GACrB,OAjCD,SAA0BA,GAC7B,OAAOA,EAAM7G,KAAI,SAAC6D,GACd,OAAOA,EAAGxE,KAAKjB,SAChB+B,QAAO,SAAC2G,EAAeC,GACtB,OAAOD,EAAQC,IAChB,GA4BQC,CAAiBH,MACzB1G,QAAO,SAAC2G,EAAeG,GACtB,OAAOH,EAAQG,IAChB,GACH,OAAG/G,EAAM,EAAI,EAEFA,EAAOA,EAAM,EAGbA,GAAO,EAAKA,EAAM,GA6CfgH,CAAoBX,EAAYpD,IACvCA,KAAQqD,GACPA,EAAkBrD,GAAM5D,SAAQ,SAACnC,GAC7B8C,GAAO/C,EAAiBC,MAGhCsJ,EAAUvD,GAAQjD,EAClByG,EAAYxD,GAAQ,KAbjB,oBAgBUmD,GAhBV,IAgBP,2BAA8B,CAAC,IAAtBnD,EAAqB,QACtBA,IAASsD,EAAS3C,OAEd4C,EAAUvD,IAASsD,EAASnD,OAC5BqD,EAAYxD,GAAQsD,EAASnD,OAE7BqD,EAAYxD,IAAS,EAAIsD,EAASnD,OAItCqD,EAAYxD,GAAQuD,EAAUvD,IA1B/B,8BA8BP,MAAO,CACHgE,IAAKT,EACLU,MAAOT,GAQR,SAASU,EAAgBC,EAAyCpE,GAErE,IADA,IAAMqE,EAAS,GACf,MAAuC9H,OAAOK,QAAQwH,GAAtD,eAAqE,CAAC,IAAD,sBAA3DE,EAA2D,KAA/CC,EAA+C,KACjE,GAAIC,MAAMD,EAAavE,IACnB,MAAM,IAAIpC,MAAJ,gBAAmBoC,EAAnB,oCAEVqE,EAAOC,GAAcC,EAAavE,GAEtC,OAAOqE,EA2DJ,SAASI,EAAaL,EAA2CM,EAA2C1E,GAK/G,IAJA,IAAM2E,EAAY,GACZC,EAAkBT,EAAgBC,EAAcpE,GAChD6E,EAzCH,SAA6BT,EAAyCpE,GACzE,IAAM6E,EAAmB,GAczB,OAZAtI,OAAOK,QAAQwH,GAAc/H,SAAQ,YAKjC,IALkE,IAAD,mBAA9BiI,EAA8B,KAAlBC,EAAkB,KAC7DO,GAAS,EAET7I,EAAI+D,EAEAuE,EAAatI,IAAM,KAAOsI,EAAatI,GAAK,KAASA,GAAK,GAE9D6I,IACA7I,IAEJ4I,EAAiBP,GAAcQ,KAE5BD,EA0BkBE,CAAoBX,EAAcpE,GAE3D,MAAmBzD,OAAO4E,KAAKuD,GAA/B,eAAgD,CAA3C,IAAI9D,EAAM,KAEX+D,EAAU/D,GAAUgE,EAAgBhE,GAAU8D,EAAe9D,GAEzDiE,EAAiBjE,GAAU,EACvB+D,EAAU/D,IAAW,IAErB+D,EAAU/D,GAAU,IAEgB,IAA7BiE,EAAiBjE,IAAiB+D,EAAU/D,IAAW,KAG9DpD,QAAQC,OAAmC,MAA5BmH,EAAgBhE,IAC/B+D,EAAU/D,GAAUgE,EAAgBhE,GAAU,KAEV,IAA7BiE,EAAiBjE,IAAiB+D,EAAU/D,GAAU,IAE7D+D,EAAU/D,GAAUoE,KAAKC,IAAIL,EAAgBhE,GAAU,IAAK+D,EAAU/D,IAE/D+D,EAAU/D,IAAW,KAAO+D,EAAU/D,GAAU,MAEvD+D,EAAU/D,GAAU,KAQpB+D,EAAU/D,IAAW,IAErB+D,EAAU/D,GAAU,IAEb+D,EAAU/D,IAAW,KAAO+D,EAAU/D,GAAU,MAEvD+D,EAAU/D,GAAU,KAMhC,OAAO+D,EErdJ,SAASO,EAAWC,GAKvB,IAJA,IAAMC,EAAQ,GACRpI,EAAMmI,EAAMxJ,MAAM0J,YAGxB,MAA2B9I,OAAOK,QAAQuI,EAAMxJ,MAAMC,aAAtD,eAAoE,CAAC,IAAD,sBAAzD1B,EAAyD,KAI1DoL,EAJ0D,KAI5BxI,KAAI,SAACX,GACrC,OAAOA,EAAKlB,mBACbsK,KAAK,MAERH,EAAM9I,KAAK,uBAAK0C,IAAG,eAAU9E,EAAV,mBAAyBiL,EAAMK,MAA/B,WACf,wBAAMC,UAAU,qBAAqB1K,EAAab,IACjDoL,IAQT,IAHA,IAAMzJ,EAAYsJ,EAAMxJ,MAAME,UACxB6J,EAAqB,GAE3B,MAA2BnJ,OAAOK,QAAQuI,EAAMxJ,MAAMC,aAAtD,eAAoE,CAAC,IAAD,sBAAzD1B,EAAyD,KAAnDyB,EAAmD,KAChE,IAAGE,EAAUkB,SAAS7C,GAAtB,CAGA,IAAM2C,EAAKlB,EAAiBmB,KAAI,SAACX,GAAgB,OAAOA,EAAKlB,oBAC1D4B,EAAEE,SAAS,MAAQF,EAAEE,SAAS,OAC7B2I,EAAmBpJ,KAAKpC,IAIhC,OAAQ,uBAAKuL,UAAU,UAEjBL,EACAD,EAAMQ,QAAUzH,EAAU0H,QACxB,sCAAc5I,GAAa,KAC/B,uBAAKyI,UAAU,aACX,2CACE5J,EAAUK,OAAS,EACjBL,EAAU0J,KAAK,MAAQ,QAE7BJ,EAAMQ,QAAUzH,EAAU2H,QACxB,uBAAKJ,UAAU,uBACX,qDACEC,EAAmBxJ,OAAS,EAC1BwJ,EAAmBH,KAAK,MAAQ,QAC/B,MC5Cd,IAAMO,EAAb,kDACI,WAAYX,GAAkC,IAAD,8BACzC,cAAMA,IACDY,MAAQ,CACTC,cAAa,EAAKb,MAAMa,aAE5B,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBALmB,EADjD,2DASmBC,GACXA,EAAEC,iBACFhL,KAAKiL,SAAS,CACVL,aAAc5K,KAAK2K,MAAMC,gBAZrC,+BAgB2B,IAAD,OACZM,EAAaxD,EAAc1H,KAAK+J,MAAMoB,MACtCC,EAAUpL,KAAK+J,MAAMoB,KAAKzJ,KAAI,SAACoG,EAAUjH,GAC3C,OAAO,wBAAI+C,IAAG,mBAAc/C,IACxB,4BAAKiH,EAAItC,QACT,4BAAoB,IAAfsC,EAAI9C,OAAe,OAAS8C,EAAI9C,YAIvCqG,EAAmC,IAA3BrL,KAAK+J,MAAMoB,KAAKrK,OAC1B,4CACA,2BAAOuJ,UAAU,gCACb,+BACI,4BACI,sCACA,qCAGR,+BACMe,IAId,OAAQ,yBAAKf,UAAU,yBACnB,4BACI,uBAAGiB,KAAK,gBAAgBC,KAAK,SACzBC,QAAS,SAACT,GAAO,OAAO,EAAKF,eAAeE,KAC5C,sCACA,8BAAQ/K,KAAK2K,MAAMC,YAAc,cAAgB,MAGxC,OAAfM,GAAuBlL,KAAK2K,MAAMC,YAAc,KAC9C,yBAAKP,UAAU,eAAf,gBAA4Ca,EAAWlG,OAAvD,QAAuEkG,EAAW1F,OAAlF,KAEFxF,KAAK2K,MAAMC,YAAc,KACvBS,OAnDhB,GAAwCI,IAAMC,eAkFvC,SAASC,EAAY5B,GAA6B,IAAD,EAC5B6B,mBAAS,IADmB,mBAC7CT,EAD6C,KACvCU,EADuC,OAEVD,oBAAU,GAFA,mBAE7CE,EAF6C,KAE9BC,EAF8B,OAGdH,oBAAS,GAHK,mBAG7CI,EAH6C,KAG/BC,EAH+B,OAIlBL,mBAAS,MAJS,mBAI7CM,EAJ6C,KAIlCC,EAJkC,OAKMP,oBAAS,GALf,mBAK7CQ,EAL6C,KAKtBC,EALsB,OAOhBT,mBAAS,GAPO,mBAO7CV,EAP6C,KAOjCoB,EAPiC,OAWVV,mBAAS,IAXC,mBAW7CW,EAX6C,KAW9BC,EAX8B,OAclBZ,mBAAS,GAdS,mBAc7Ca,EAd6C,KAclCC,EAdkC,KA+EpD,SAASC,EAAiB5B,EAAyB6B,GAC/C7B,EAAEC,iBACF,IAAIpJ,EAAM6K,EAEN7K,GAAOA,GAAOsJ,IAAe0B,EAC7BT,EAAa,yBAAD,OAA0BjB,KAGtCiB,EAAa,MAGbS,IAEAhL,EAAM,GAGViK,EAAQ,GAAD,mBAAKV,GAAL,CAAW,CACd3F,OAAQuE,EAAMlF,KACdG,OAAQpD,MAGZmI,EAAM8C,IAAIC,QAAQ/C,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,KAAMjD,IAQ7D,OA5FAmL,qBAAU,YACgB,IAAnBjB,GAECC,GAAkBhC,EAAMiD,OAAS,GAAK,KAE3C,CAACjD,EAAMiD,OAAQlB,IAElBiB,qBAAU,WACN,SAASE,EAAiBtF,EAAmBuF,EAAoBC,GAE7D,IAAMC,EAAkBrD,EAAM/B,YAAYqF,QAAQH,GAIlD,GAFAnB,GADyBqB,EAAkB,GAAK,GAG5CjC,EAAKrK,SAAW6G,EAAW7G,OAAQ,CACnC+K,EAAQlE,GAGR,IAAM2F,EAAmB3F,EAAW4F,QAAO,SAACzF,GACxC,OAAsB,IAAfA,EAAI9C,UACZtD,KAAI,SAACoG,GACJ,OAAOA,EAAItC,UAEfgH,EAAiBc,GAErB,GAAG3F,EAAW7G,OAAS,EAAG,CACtB,IAAM0M,EAAgB5D,KAAK6D,IAAL,MAAA7D,KAAI,YAAQjC,EAAWjG,KAAI,SAACoG,GAC9C,OAAOA,EAAI9C,YAEfsH,EAAckB,QAEdlB,EAAc,GAElB,GAAGa,IAAcrK,EAAU2H,QAAS,CAChCrI,QAAQsL,IAAR,uDAA4DP,IAC5D,IAAMQ,EAAajG,EAAcyD,GAEjCpB,EAAM6D,YAAYD,IAWtB3B,IACAjC,EAAM8C,IAAIgB,mBAAmB,CAACxN,EAAYyN,gBAR9C,SAAkB9J,GAEd,GAAGA,EAAKI,SAAW2F,EAAM3F,OACrB,OAAO6I,EAAiBjJ,EAAK2D,WAAY3D,EAAKkJ,WAAYlJ,EAAKmJ,cAMnElB,GAAc,IAEdG,GACArC,EAAM8C,IAAIkB,QAAQhE,EAAM3F,OAAQ2F,EAAMnF,OAAOoJ,MAAK,SAACC,GAC/C,GAAGA,EAAStG,WAAW7G,OAAS,EAAG,CAC/B,IAAMoM,EAAae,EAAStG,WAAWsG,EAAStG,WAAW7G,OAAS,GAAG0E,OACvEyH,EAAiBgB,EAAStG,WAAYuF,EAAYe,EAASd,WAE/Dd,GAAyB,QAGlC,CAACL,EAAcI,EAAuBjB,EAAMpB,IA+BvC,yBAAKM,UAAU,gBACnB,uCAEA,6BACI,qDACA,8BAAQN,EAAM/B,YAAY8D,IACxBA,IAAkB/B,EAAMmE,YAAc,2CACpC,MAGR,kBAAC,EAAD,CACI/C,KAAMA,IAEV,0CACA,yBAAKd,UAAU,qBACX,kBAAC,EAAD,CACID,MAAOL,EAAMmE,YACb3N,MAAOwJ,EAAM3D,YACbmE,MAAOzH,EAAU2H,WAIvBV,EAAMmE,cAAgBpC,EACpB,6BACI,wCACEI,EAAY,yBAAK7B,UAAU,qBAAqBkB,KAAK,SAAUW,GAAmB,KACpF,0BAAM7B,UAAU,eAAe8D,SAAU,SAACpD,GAAO,OAAO4B,EAAgB5B,GAAG,KACvE,2BAAOqD,QAAQ,OAAf,OACA,2BAAOC,KAAK,SAASxE,IAAK,IAAK4D,IAAK,IAAK5I,KAAK,MAC1CyJ,YAAY,sBACZjE,UAAU,eACVkE,SAAU,SAACxD,GAAO,OApCtC,SAA0BA,GACtB,IAAMnJ,EAAMmJ,EAAEyD,OAAO1O,MACrB4M,EAAaxG,OAAOC,SAASvE,IAkCY6M,CAAgB1D,MAC7C,4BAAQsD,KAAK,SAAShE,UAAU,iBAC5BmB,QAAS,SAACT,GAAO,OAAO4B,EAAgB5B,GAAG,KAD/C,QAEA,4BAAQsD,KAAK,SAAShE,UAAU,kBAC5BmB,QAAS,SAACT,GAAO,OAAO4B,EAAgB5B,GAAG,IAC3C2D,SAAWjC,GAAavB,GAAeqB,EAAc5K,SAASoI,EAAMlF,OAFxE,YAIC,MChOd,SAAS8J,EAAmB5E,GAA6B,IAAD,EACzB6B,mBAAS7B,EAAM4D,WAAW3I,QADD,mBACpDyH,EADoD,KACzCC,EADyC,KAa3D,IAAMnM,EAAQwJ,EAAMzD,SAAS5E,KAAI,SAACX,EAAYF,GAC1C,OAAO,0BAAM+C,IAAG,mBAAc/C,IACzBE,EAAKX,eAIRuN,EAAa5D,EAAM4D,WAAWnI,SAAWuE,EAAMlF,KACjD,6BACI,2CACA,qDAA2BkF,EAAM4D,WAAW3I,SACvC,4CAAkB+E,EAAM4D,WAAWnI,OAAnC,4BAEToJ,EAAoB,KAkBxB,OAjBI7E,EAAM4D,WAAWnI,SAAWuE,EAAMlF,OAClC+J,EAAoB,6BAChB,8CACA,0BAAMvE,UAAU,eAAe8D,SAAU,SAACpD,GAAO,OAtBzD,SAAyBA,GACrBA,EAAEC,iBAEFjB,EAAM8E,mBAAmBpC,GAmBmCE,CAAgB5B,KACpE,2BAAOqD,QAAQ,OAAf,OACA,2BAAOC,KAAK,SAASxE,IAAKE,EAAM4D,WAAW3I,OAAQyI,IAAK,IAAK5I,KAAK,MAC9DyJ,YAAY,iCACZjE,UAAU,eACVkE,SAAU,SAACxD,GAAO,OA/BlC,SAAyBA,GACrB2B,EAAaxG,OAAOC,SAAS4E,EAAEyD,OAAO1O,QA8BD2O,CAAgB1D,IACzCjL,MAAO2M,IACX,4BAAQ4B,KAAK,SAAShE,UAAU,kBAC5BqE,SAAWjC,EAAY1C,EAAM4D,WAAW3I,QAD5C,aAOJ,yBAAKqF,UAAU,wBAClBsD,EAED,wCACA,6BACMpN,GAEN,0CACA,kBAAC,EAAD,CACI6J,MAAOL,EAAMmE,YACb3N,MAAOwJ,EAAMhD,KACbwD,MAAOzH,EAAUgM,kBAEpBF,GC6CMG,MAvGR,SAA6BhF,GAAgB,IAAD,EACb6B,oBAAU,GADG,mBACxCoD,EADwC,KAC7BC,EAD6B,OAEbrD,oBAAU,GAFG,mBAExCsD,EAFwC,KAE7BC,EAF6B,KAI/C,GAAGpF,EAAMlF,OAASkF,EAAMqF,cAAc5J,OAClC,OAAO,6BACH,yDAAgCuE,EAAMqF,cAAcpK,QACpD,4CAAmB+E,EAAMqF,cAAc5J,OAAvC,4BAIR,GAA8B,IAA1BuE,EAAMzD,SAASxF,OACf,OAAO,8DAIX,IAhB+C,EAgBzCuO,EAAYtF,EAAMhD,KAAKxG,MAAM+O,QAhBY,cAiB5BvF,EAAMzD,UAjBsB,IAiB/C,2BAAmC,CAAC,IAAzBvF,EAAwB,QAC/BsO,EAAUnO,KAAKH,IAlB4B,8BAoB/C,IAAMwO,EAAU,IAAIjP,EAAK+O,GAGzBE,EAAQhP,MAAMc,MAAK,SAACmO,EAAaC,GAC7B,OAAOD,EAAM1P,MAAQ2P,EAAM3P,SAI/B,IADA,IAAM4P,EAAc,GA3B2B,WA4BvCC,GAGJD,EAAYC,GAAKJ,EAAQhP,MAAMmB,KAAI,SAACX,EAAYF,GAC5C,OAAO,4BAAQf,MAAOe,EAAG+C,IAAK/C,GAAKE,EAAKX,eAEvCmN,QAAO,SAACtI,EAAWpE,GAChB,OAAU,IAAN8O,GAAW9O,IAAMqO,KAEJ,IAANS,GAAW9O,IAAMmO,MAKpCU,EAAYC,GAAGC,OAAO,EAAG,EACrB,4BAAQ9P,OAAQ,EAAG8D,KAAM,GAAzB,sBAfA+L,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAmBR,IAAME,EAAe9F,EAAM/B,YAAYuF,QAAO,SAAC1I,GAC3C,OAAOA,IAASkF,EAAMlF,QAG1B,SAASiL,EAAiB/E,EAAyCgF,GAC7C,IAAdA,EACAd,EAAa/I,OAAOC,SAAS4E,EAAEyD,OAAO1O,QAEtCqP,EAAajJ,OAAOC,SAAS4E,EAAEyD,OAAO1O,QAmB9C,OAAO,yBAAKuK,UAAU,yBAClB,uDACA,6DACA,kBAAC,EAAD,CACID,MAAOL,EAAMmE,YACb3N,MAAOgP,EACPhF,MAAOzH,EAAUkN,mBAErB,kDACA,0BAAM7B,SAAU,SAACpD,GAAO,OAxB5B,SAAkBA,GACdA,EAAEC,iBACF,IAAMiF,EAAuC,GAC7CA,EAAcJ,EAAa,IAAMN,EAAQhP,MAAMyO,GAC/CiB,EAAcJ,EAAa,IAAMN,EAAQhP,MAAM2O,GAG/C,IAAM/J,EAAYoK,EAAQhP,MAAMgN,QAAO,SAACxM,EAAYF,GAChD,OAAOA,IAAMmO,GAAanO,IAAMqO,KAIpCnF,EAAMmG,aAAaD,EAAe9K,GAYHgJ,CAASpD,KACpC,kCACI,2BAAOqD,QAAQ,qBAAsByB,EAAa,IAClD,4BAAQxF,UAAU,eAAexF,KAAK,oBAAoB/E,MAAOkP,EAC7DT,SAAU,SAACxD,GAAO,OAAO+E,EAAiB/E,EAAG,KAC3C2E,EAAY,KAGtB,kCACI,2BAAOtB,QAAQ,qBAAsByB,EAAa,IAClD,4BAAQxF,UAAU,eAAexF,KAAK,oBAAoB/E,MAAOoP,EAC7DX,SAAU,SAACxD,GAAO,OAAO+E,EAAiB/E,EAAG,KAC3C2E,EAAY,KAGtB,4BAAQrB,KAAK,SAAShE,UAAU,gCAAhC,aC5GL,SAAS8F,EAAiBpG,GAC7B,IAAMqG,EAAmBrG,EAAMzE,aAAa5D,KAAI,SAACvB,EAAeU,GAC5D,OAAO,wBAAI+C,IAAG,qBAAgB/C,IAAOV,EAAEY,KAAKX,WAArC,MAAsDD,EAAEqF,WAGnE,OAAO,yBAAK6E,UAAU,2BAClB,6CACEN,EAAMzE,aAAaxE,OACjB,4BACKsP,GACE,2DAmBZ,SAASC,EAAYtG,GAA6B,IAAD,EAClB6B,mBAAS,IADS,mBAC7C0E,EAD6C,KAClCC,EADkC,OAEZ3E,mBAAS,IAFG,mBAE7CtG,EAF6C,KAE/BkL,EAF+B,OAGpB5E,mBAAS,MAHW,mBAG7C6E,EAH6C,KAGnCC,EAHmC,OAK5B9E,mBAAS7B,EAAMqF,cAAc5J,QALD,mBAK7CmL,EAL6C,KAKvCC,EALuC,OAOZhF,oBAAU,GAPE,mBAO7CiF,EAP6C,KAO/BC,EAP+B,OASJlF,mBAAS,IATL,mBAS7CmF,EAT6C,KAS3BC,EAT2B,OAcdpF,mBAAS7B,EAAMhD,MAdD,mBAc7CkK,EAd6C,KAchCC,EAdgC,OAeEtF,oBAAS,GAfX,mBAe7CuF,EAf6C,KAexBC,EAfwB,iDAiBpD,WAA0BrG,GAA1B,qBAAAzJ,EAAA,yDACIyJ,EAAEC,iBAEE6F,EAHR,wDAQU7J,EAAcsJ,EAAUzO,QAAO,SAACP,EAAWC,GAC7C,OAAOD,EAAIC,IACZ,GACGR,EAAOkQ,EAAY1Q,MAAMsQ,GACzBzL,EAAa0B,EAAiB/F,EAAMkQ,EAAajK,EAAqC,IAAxB1B,EAAaxE,QAZrF,SAeUiJ,EAAM8C,IAAIwE,aAAatH,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,KAC1D9D,EAAMqE,GAhBd,cAoBUkM,EAAeL,EAAY1Q,MAAM+O,SAC1BM,OAAOiB,EAAc,GArBtC,UAsBUK,EAAe,IAAI5Q,EAAKgR,IAtBlC,6CAjBoD,kEA0CpD,WAA0BvG,GAA1B,eAAAzJ,EAAA,6DACUT,EAAIqF,OAAOC,SAAS4E,EAAEyD,OAAO1O,OADvC,SAEUgR,EAAgBjQ,GAF1B,4CA1CoD,sBA+CpDkM,qBAAU,WAAM,4CACZ,WAA8BxG,GAA9B,yBAAAjF,EAAA,sEACU0P,EAAoB,GAAD,mBAAKD,GAAL,CAAuBxK,EAAIgL,MADxD,WAEQhL,EAAInB,WAFZ,gCAIcsL,EAAYnK,EAAIxF,KAAKjC,MAJnC,UAYgC,KALtB0S,EAPV,sBAO6BlM,GAP7B,CAO2C,CACnCvE,KAAM,IAAIhB,EAAKwG,EAAIxF,KAAKjB,MAAOyG,EAAIxF,KAAKjC,MACxC0G,OAAQe,EAAIf,WAGC1E,OAZrB,wBAcc2Q,EAAYnK,EAAekK,EAAcf,GAdvD,UAgBcD,EAAgB,IAhB9B,eAkBckB,EAAc3H,EAAM/B,YAAYqF,QAAQoE,EAAUjM,SAClDmM,EAAerB,EAAUhB,SAClBoC,IAAgB,EApBrC,UAqBcnB,EAAaoB,GArB3B,yBAuBcf,EAAQa,EAAUjM,QAvBhC,iDAyBcgL,EAAgBgB,GAzB9B,eA0BcI,EAAY7H,EAAM/B,YAAYqF,QAAQsD,GACtCkB,GAAiBD,EAAY,GAAK,EA3BhD,UA4BchB,EAAQ7G,EAAM/B,YAAY6J,IA5BxC,6CADY,kEAkCZ,oCAAAvQ,EAAA,yDACQ6P,EADR,iCAGcC,GAAuB,GAHrC,uBAI2BrH,EAAM8C,IAAIiF,oBAAoB/H,EAAM3F,OAAQ2F,EAAMnF,OAJ7E,cAIcmN,EAJd,gBAKcvB,EAAgBuB,EAAKzM,cALnC,wBAMcoL,EAAYqB,EAAKtB,UAN/B,yBAOcG,EAAQmB,EAAKpB,MAP3B,eAUcqB,EAAwC,GAC9CD,EAAKE,WAAWhR,SAAQ,SAACsH,GACrByJ,EAAazJ,EAAM2J,SAAW,KAE5B5B,EAAsB,GAC5BvG,EAAM/B,YAAY/G,SAAQ,SAAC4D,EAAchE,GACrCyP,EAAUzP,GAAKmR,EAAanN,MAhBxC,UAkBc0L,EAAaD,GAlB3B,eAsBc6B,EAAcJ,EAAKE,WAAWvQ,KAAI,SAAC6G,GAAuB,IAAD,gBAC/BA,EAAMA,OADyB,IAC3D,IAAI,EAAJ,qBAAyC,CAAC,IAAD,UAA9BxH,EAA8B,EAA9BA,KACP,GADqC,EAAxByE,SACEuE,EAAMlF,KACjB,OAAO3E,EAAaa,IAH+B,8BAM3D,MAAM,IAAIyB,MAAM,qBAEd4P,EAAgBnB,EAAY1Q,MAAMgN,QAAO,SAACxM,GAC5C,OAAQoR,EAAYxQ,SAASZ,EAAKX,eA/B9C,UAiCc8Q,EAAe,IAAI5Q,EAAK8R,IAjCtC,6CAlCY,sBAuEZrI,EAAM8C,IAAIgB,mBAAmB,CAACxN,EAAYgS,sBAAsB,SAAC9L,GACzDA,EAAInC,SAAW2F,EAAM3F,QAAW2M,EAAiBpP,SAAS4E,EAAIgL,KAxEzD,SAAD,2BAyEJe,CAAe/L,MAzEX,mCA8EZuL,MAGJ,IAAMS,EAAYxI,EAAM/B,YAAYtG,KAAI,SAACmD,EAAchE,GACnD,OAAO,wBAAI+C,IAAG,uBAAkB/C,IAAMgE,MAEpC2N,EAAUzI,EAAM/B,YAAYtG,KAAI,SAACmD,EAAchE,GACjD,IAAMoF,EAAIqK,EAAUzP,IAAM,EAC1B,OAAO,wBAAI+C,IAAG,oBAAe/C,IAAOoF,MAElCyJ,EAAc3F,EAAMhD,KAAKxG,MAAMmB,KAAI,SAACX,EAAYF,GAClD,OAAO,4BAAQf,MAAOe,EAAG+C,IAAK/C,GAAKE,EAAKX,eAI5C,OAFAsP,EAAYE,OAAO,EAAG,EAAG,4BAAQ9P,OAAQ,EAAG8D,KAAM,GAAzB,gCAElB,yBAAKyG,UAAU,gBAClB,8CACA,6BAAON,EAAMqF,cAAc5J,OAA3B,uBAAyDuE,EAAMqF,cAAcpK,OAA7E,WAEA,sCACA,2BAAOqF,UAAU,gCACb,+BACI,4BAAKkI,IAET,+BACI,4BAAMC,KAId,kBAACrC,EAAD,CACI7K,aAAcA,IAElB,0CACA,kBAAC,EAAD,CACI8E,MAAOL,EAAMmE,YACb3N,MAAO0Q,EACP1G,MAAOzH,EAAU0H,UAErB,yCACEmG,IAAS5G,EAAMlF,KACb,0BAAMsJ,SAAU,SAACpD,GAAO,OArKoB,2CAqKb0H,CAAW1H,KACtC,2BAAOqD,QAAQ,QAAf,QACA,4BAAQvJ,KAAK,OAAOwF,UAAU,eAAeqI,UAAU,EACnDnE,SAAU,SAACxD,GAAO,OAxKkB,2CAwKX4H,CAAW5H,KAAO2E,GAC/C,4BAAQrB,KAAK,SAAShE,UAAU,gCAAhC,cAEJ,4CAAkBsG,EAAlB,uBC0CGiC,MAnNR,SAAmB7I,GAAsC,IAAD,EACjC6B,mBAAS9I,EAAU+P,WADc,mBACpDtI,EADoD,KAC7CuI,EAD6C,OAEnClH,mBAAS,MAF0B,mBAEpD7E,EAFoD,KAE9CgM,EAF8C,OAGnBnH,oBAAS,GAHU,mBAGpDoH,EAHoD,KAGtCC,EAHsC,OAK3BrH,mBAAS,IALkB,mBAKpDtF,EALoD,KAK1C4M,EAL0C,OAMvBtH,mBAAS,MANc,mBAMpD+B,EANoD,KAMxCwF,EANwC,OAOjBvH,mBAAS,MAPQ,mBAOpDwD,EAPoD,KAOrCgE,EAPqC,KASrDC,EAAiBC,sBAAW,uCAAC,gCAAAhS,EAAA,sEACNyI,EAAM8C,IAAIwG,eAAetJ,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,MADpD,OACzB0O,EADyB,OAE/BnR,QAAQsL,IAAI,cACZtL,QAAQsL,IAAI6F,GAENhT,EAAQgT,EAAWhT,MAAMmB,KAAI,SAAC8R,GAChC,OAAO,IAAIzT,EAAKyT,EAAW1T,MAAO0T,EAAW1U,SAG3CiI,EAAO,IAAIzG,EAAKC,GACtBwS,EAAQhM,GAVuB,2CAAD,qDAW/B,CAACgD,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,KAAMkF,EAAM8C,MApBU,4CA8F3D,sBAAAvL,EAAA,sEACUyI,EAAM8C,IAAI4G,cAAc1J,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,MADnE,4CA9F2D,kEAkG3D,WAAsCG,GAAtC,SAAA1D,EAAA,sEACUyI,EAAM8C,IAAI6G,kBAAkB3J,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,KAAMG,GAD7E,4CAlG2D,kEAsG3D,WAAqC2O,EAAwCxO,GAA7E,iBAAA7D,EAAA,6DACIc,QAAQsL,IAAI,sCACZtL,QAAQsL,IAAIiG,GACZvR,QAAQsL,IAAI,kBACZtL,QAAQsL,IAAIvI,GAJhB,SAKoB4E,EAAM8C,IAAI+G,oBAAoB7J,EAAM3F,OAAQ2F,EAAMnF,MAAOmF,EAAMlF,KAAM8O,EAAiBxO,GAL1G,cAKUb,EALV,gBAMoBA,EAAEE,OANtB,OAMUC,EANV,OAOIrC,QAAQsL,IAAI,oBACZtL,QAAQsL,IAAIjJ,GARhB,6CAtG2D,kEAiH3D,WAAqCkJ,GAArC,eAAArM,EAAA,sEAE2ByI,EAAM8C,IAAIgH,YAAY9J,EAAM3F,OAAQ2F,EAAMnF,OAFrE,cAEU0B,EAFV,gBAGUwM,EAAShQ,EAAUgM,iBAH7B,uBAIUqE,EAAcxF,GAJxB,uBAKUuF,EAAY5M,GALtB,4CAjH2D,sBAyH3D,GAnGAyG,qBAAU,WAAM,4CACZ,4BAAAzL,EAAA,sEAC4ByI,EAAM8C,IAAIiH,iBAAiB/J,EAAM3F,OAAQ2F,EAAMnF,OAD3E,OACUmP,EADV,OAEI3R,QAAQsL,IAAR,mCAAwC3D,EAAMnF,QAC9CxC,QAAQsL,IAAIqG,GACRA,GAAaA,EAAUxJ,QACvBuI,EAASiB,EAAUxJ,OAChBwJ,EAAUxJ,QAAUzH,EAAU+P,WAC7BQ,KAGLU,EAAU3E,eACTgE,EAAiBW,EAAU3E,eAE/B6D,GAAgB,GAbpB,4CADY,sBAiBRD,GAjBS,WAAD,wBAkBRgB,GAGJjK,EAAM8C,IAAIgB,mBAAmB,CAACxN,EAAY4T,iBAAiB,SAACjQ,GAGrDA,EAAKI,SAAW2F,EAAM3F,QAAW2C,GAChCsM,SAGT,CAACtJ,EAAMnF,MAAOmF,EAAM3F,OAAQ2C,EAAMgD,EAAM8C,IAAK9C,EAAMlF,KAAMmO,EAAcK,IAE1EtG,qBAAU,WAAM,4CAEZ,4BAAAzL,EAAA,sEAC4ByI,EAAM8C,IAAIiH,iBAAiB/J,EAAM3F,OAAQ2F,EAAMnF,OAD3E,cACUmP,EADV,gBAEUZ,EAAcY,EAAUpG,YAFlC,4CAFY,kEAOZ,4BAAArM,EAAA,sEAC2ByI,EAAM8C,IAAIgH,YAAY9J,EAAM3F,OAAQ2F,EAAMnF,OADrE,OACU0B,EADV,OAEI4M,EAAY5M,GAFhB,4CAPY,sBAYPiE,IAAUzH,EAAUgM,iBAAmBvE,IAAUzH,EAAUkN,kBAAsBrC,GAZ1E,mCAcRjG,GAEC6C,IAAUzH,EAAUgM,iBAAmBvE,IAAUzH,EAAUkN,kBAAuB1J,GAAgC,IAApBA,EAASxF,QAhBhG,mCAiBR+S,KAEL,CAAC9J,EAAM8C,IAAKc,EAAYpD,EAAOR,EAAM3F,OAAQ2F,EAAMnF,MAAO0B,IAE7DyG,qBAAU,WACNhD,EAAM8C,IAAIgB,mBAAmB,CAACxN,EAAY6T,0BAA1C,uCAAqE,WAAO3N,GAAP,SAAAjF,EAAA,yDAC7DiF,EAAInC,SAAW2F,EAAM3F,OADwC,gCAEvD0O,EAAShQ,EAAUkN,kBAFoC,uBAGvDoD,EAAiB,CACnBpO,OAAQuB,EAAIvB,OACZQ,OAAQe,EAAIf,SAL6C,2CAArE,yDASD,CAACuE,EAAM8C,IAAK9C,EAAM3F,SAErB2I,qBAAU,WACNhD,EAAM8C,IAAIgB,mBAAmB,CAACxN,EAAY8T,4BAA1C,uCAAuE,WAAO5N,GAAP,SAAAjF,EAAA,yDAC/DiF,EAAInC,SAAW2F,EAAM3F,OAD0C,gCAEzD0O,EAAShQ,EAAU0H,SAFsC,uBAGzD6I,IAHyD,2CAAvE,yDAMD,CAACtJ,EAAM8C,IAAK9C,EAAM3F,OAAQiP,IA6B1B9I,IAAUzH,EAAU+P,UACnB,OAAG9I,EAAMiD,SAAWjD,EAAMmE,YACd,yBAAK7D,UAAU,cACnB,4BAAQgE,KAAK,SAAShE,UAAU,yBAC5BmB,QAAS,WAAO,OA7H2B,0CA6HpB4I,KAD3B,SAIG,yBAAK/J,UAAU,cAClB,4CAAkBN,EAAM/B,YAAY+B,EAAMiD,QAA1C,uBAGL,GAAGzC,IAAUzH,EAAU2H,QAC1B,OAAI1D,EAGO,yBAAKsD,UAAU,cAClB,kBAAC,EAAD,CACIxF,KAAMkF,EAAMlF,KACZT,OAAQ2F,EAAM3F,OACdQ,MAAOmF,EAAMnF,MACboD,YAAa+B,EAAM/B,YACnBgF,OAAQjD,EAAMiD,OACdkB,YAAanE,EAAMmE,YACnBrB,IAAK9C,EAAM8C,IACXzG,YAAaW,EACb6G,YAlJ2C,+CAsI5C,yBAAKvD,UAAU,cAAf,mCAeR,GAAGE,IAAUzH,EAAUgM,gBAC1B,OAAKnB,EAGO5G,EAGD,yBAAKsD,UAAU,cAClB,kBAAC,EAAD,CACIxF,KAAMkF,EAAMlF,KACZqJ,YAAanE,EAAMmE,YACnB9J,OAAQ2F,EAAM3F,OACduJ,WAAYA,EACZd,IAAK9C,EAAM8C,IACXvG,SAAUA,EACVS,KAAMA,EACN8H,mBArK2C,+CA0J5C,gEAFA,uEAgBR,GAAGtE,IAAUzH,EAAUkN,iBAC1B,OAAKZ,EAGOrI,EAGD,yBAAKsD,UAAU,cAClB,kBAAC,EAAD,CACIxF,KAAMkF,EAAMlF,KACZT,OAAQ2F,EAAM3F,OACd8J,YAAanE,EAAMmE,YACnBtJ,MAAOmF,EAAMnF,MACbmC,KAAMA,EACNT,SAAUA,EACV8I,cAAeA,EACfpH,YAAa+B,EAAM/B,YACnBkI,aAzL2C,iDA6K5C,gEAFA,0EAiBR,GAAG3F,IAAUzH,EAAU0H,QAC1B,OAAK4E,EAEOrI,EAGD,yBAAKsD,UAAU,cAClB,kBAACgG,EAAD,CACIxL,KAAMkF,EAAMlF,KACZqJ,YAAanE,EAAMmE,YACnB9J,OAAQ2F,EAAM3F,OACdQ,MAAOmF,EAAMnF,MACbwK,cAAeA,EACfrI,KAAMA,EACNiB,YAAa+B,EAAM/B,YACnB6E,IAAK9C,EAAM8C,OAXZ,gEAFA,0EAiBX,MAAM,IAAIrK,MAAJ,yBAA4B+H,KC1NpC8J,GAAkC,SAACtK,GAA4B,IAAD,EAC5B6B,qBAAS7B,EAAMa,aADa,mBACzDA,EADyD,KAC5C0J,EAD4C,KAYhE,IAJA,IAAM/B,EAAYxI,EAAM/B,YAAYtG,KAAI,SAACmD,GACrC,OAAO,wBAAIjB,IAAG,qBAAgBiB,IAAUA,MAEtC0P,EAAmB,GACjB3P,EAAQ,EAAGA,EAAQmF,EAAMnF,MAAOA,IACpC2P,EAAOrT,KAAK0D,GAGhB,IAAM4P,EAAYD,EAAO7S,KAAI,SAACkD,GAC1B,IAAM6P,EAAW1K,EAAM/B,YAAYtG,KAAI,SAACmD,GACpC,OAAO,wBAAIjB,IAAG,oBAAeiB,EAAf,kBAA6BD,IAAWmF,EAAMd,OAAOpE,GAAMD,IAAU,MAEjF8P,EAAqB,GAI3B,OAHI3K,EAAM4K,gBAAkB/P,GACxB8P,EAAQxT,KAAK,iBAET,wBAAI0C,IAAG,oBAAegB,GAASyF,UAAWqK,EAAQvK,KAAK,MAC1DsK,MAIT,OAAQ,yBAAKpK,UAAU,cACnB,4BACI,uBAAGiB,KAAK,iBAAiBC,KAAK,SAASqJ,cAAY,WAAWC,cAAY,iBACtEC,iBAAgBlK,EAAamK,gBAAc,iBAC3CvJ,QAAS,SAACT,GAAO,OA9B7B,SAAyBA,GACrBA,EAAEC,iBACFsJ,GAAc1J,GA4BkBoK,CAAgBjK,KACxC,+CACEH,EAAc,iDAAiC,OAIvDA,EAAc,KACZ,2BAAOP,UAAU,+BAA+BkH,GAAG,iBAC/C,+BACI,4BACMgB,IAGV,+BACMiC,MASPH,MC7BR,IAAMY,GAAb,kDACI,WAAYlL,GAAwB,IAAD,8BAC/B,cAAMA,IACDY,MAAQ,CACTuK,YAAY,EACZC,UAAW,GAIXvQ,MAAO,EAIPqE,OAAQ,GAKRjB,YAAa,GAIbgF,OAAQ,EACRkB,aAAc,GAGlB,EAAKkH,cAAgB,EAAKA,cAActK,KAAnB,gBACrB,EAAKuK,oBAAsB,EAAKA,oBAAoBvK,KAAzB,gBAC3B,EAAKwK,eAAiB,EAAKA,eAAexK,KAApB,gBA3BS,EADvC,4DA+B2B,IAAD,OAClB9K,KAAK+J,MAAM8C,IAAI0I,YAAYlV,EAAYmV,UAAW,CAC9CpR,OAAQpE,KAAK+J,MAAM3F,OACnBU,SAAU9E,KAAK+J,MAAMlF,KACrBY,aAAa,IAEjBgQ,OAAOC,YAAW,WACd,EAAKN,kBRzFiB,OQmDlC,4CA2CQpV,KAAKoV,kBA3Cb,qCAkDmBD,GAA2B,IAAD,OAC/BQ,EAAUxU,OAAO4E,KAAKoP,GAI5B,OAHAQ,EAAQtU,MAAK,SAACuU,EAAeC,GACzB,OAAO,EAAKlL,MAAMwK,UAAUS,GAAS,EAAKjL,MAAMwK,UAAUU,MAEvDF,IAvDf,0CA0D+B,IAAD,OACtB3V,KAAK+J,MAAM8C,IAAIgB,mBAAmB,CAACxN,EAAYyV,aAAa,SAAC9R,GAGzD,GAFA5B,QAAQsL,IAAR,8CAAmD1J,EAAKI,OAAxD,MACAhC,QAAQsL,IAAI1J,GACTA,EAAKI,SAAW,EAAK2F,MAAM3F,OAAQ,CAIlC,IAHA,IAAM2R,EAAa,GACf9M,EAAc,GAElB,MAA0B9H,OAAOK,QAAQwC,EAAK+R,OAA9C,eAAsD,CAAC,IAAD,sBAA3CC,EAA2C,KAArCC,EAAqC,KAE9CF,EAAMC,GADS,kBAATC,EACQA,EAEA/P,OAAOgQ,WAAWD,GAIxC,GAAGjS,EAAKiF,OACJA,EAASjF,EAAKiF,YAGd,IAAI,IAAJ,MAAkB9H,OAAO4E,KAAKgQ,GAA9B,eAAsC,CAClC9M,EADU,MACK,CAAC,GAIxB,IAAIrE,EAAQ,EACTZ,EAAKY,QACJA,EAAQZ,EAAKY,OAGjB,IAAIoI,EAAS,EACVhJ,EAAKgJ,SACJA,EAAShJ,EAAKgJ,QAElB,IAAMhF,EAAc,EAAKsN,eAAeS,GACxC,EAAK9K,SAAS,CACVkK,UAAWY,EACX9M,OAAQA,EACRjB,YAAaA,EACbgF,OAAQA,EACRkB,YAAalG,EAAYqF,QAAQ,EAAKtD,MAAMlF,MAC5CD,MAAOA,QAK6B,IAA7CzD,OAAO4E,KAAK/F,KAAK2K,MAAMwK,WAAWrU,QAEjCd,KAAK+J,MAAM8C,IAAI0I,YAAYlV,EAAYyV,WAAY,CAC/C1R,OAAQpE,KAAK+J,MAAM3F,OACnBU,SAAU9E,KAAK+J,MAAMlF,OAK7B7E,KAAKqV,wBAjHb,+BAqHQ,OAAQ,yBAAKhL,UAAU,aACnB,kBAAC,GAAD,CAAWpB,OAAQjJ,KAAK2K,MAAM1B,OAC1BjB,YAAahI,KAAK2K,MAAM3C,YACxBpD,MAAO5E,KAAK2K,MAAM/F,QACpB5E,KAAK2K,MAAM3C,YACT,kBAAC,EAAD,CACI5D,OAAQpE,KAAK+J,MAAM3F,OACnBQ,MAAO5E,KAAK2K,MAAM/F,MAClBC,KAAM7E,KAAK+J,MAAMlF,KACjBmD,YAAahI,KAAK2K,MAAM3C,YACxBgF,OAAQhN,KAAK2K,MAAMqC,OACnBkB,YAAalO,KAAK2K,MAAMuD,YACxBrB,IAAK7M,KAAK+J,MAAM8C,MACpB,6EAlIhB,GAA8BpB,IAAM0K,WCjD7B,SAASC,GAAUrM,GAEtB,IAAMsM,EAAQ,sBAAItM,EAAMuM,cAAV,CAAwBvM,EAAMlF,OAAMnD,KAAI,SAACoD,EAAkBjE,GACrE,OAAGiE,IAAaiF,EAAMlF,KACX,wBAAIjB,IAAG,qBAAgB/C,IAAOiE,EAA9B,UAEA,wBAAIlB,IAAG,qBAAgB/C,IAAOiE,MAI7C,OAAO,yBAAKuF,UAAU,cAClB,wCAAeN,EAAM3F,QACrB,mEAEA,qCACA,wBAAIiG,UAAU,iBACRgM,ICZP,SAASE,KAEZ,OAdG,WACH,IAAMC,EAAQC,SAASC,OAAOC,MAAM,MAC9BC,EAAgB,GAOtB,OANAJ,EAAMvV,SAAQ,SAAC4V,GACX,GAAGA,EAAK/V,OAAS,EAAG,CAAC,IAAD,EACD+V,EAAKF,MAAM,KADV,mBACTnT,EADS,KACNvD,EADM,KAEhB2W,EAAQpT,GAAKvD,MAGd2W,EAISE,GACDjS,MAAQ,KCyHZkS,OApHf,WAA4B,MAKYnL,oBAAS,GALrB,mBAKjBoL,EALiB,KAKLC,EALK,OAMIrL,mBAAS,MANb,mBAMjBxH,EANiB,KAMT8S,EANS,KAQlBrK,EAAM,IAAI9J,EARQ,EAaA6I,mBAAS,IAbT,mBAajB/G,EAbiB,KAaXsS,EAbW,OAcgBvL,mBAAS,IAdzB,mBAcjB0K,EAdiB,KAcHc,EAdG,KAwFxB,OAjEArK,qBAAU,WACN,SAASsK,EAAY5S,GAGjB,GAFArC,QAAQsL,IAAR,mCAAwCjJ,EAAEkB,QAA1C,qBAA8DlB,EAAEL,SAChEhC,QAAQsL,IAAIjJ,GACTA,EAAEL,SAAWA,EAAQ,CAEpB,IAAMkS,EAAe7R,EAAE4R,MAAM9I,QAAO,SAACyI,GACjC,OAAOA,IAASnR,KAEpBzC,QAAQsL,IAAI,kCACZtL,QAAQsL,IAAI4I,GACZc,EAAgBd,GAGW,IAAxBA,EAAaxV,QACZmW,GAAc,IAfd,4CAoBZ,WAAyB7S,EAAgBU,GAAzC,iBAAAxD,EAAA,6DACIc,QAAQkV,MAAR,uBAA8BlT,EAA9B,QADJ,SAEoByI,EAAI0K,SAASnT,EAAQU,GAFzC,YAEUR,EAFV,QAGUC,GAHV,iCAIwBD,EAAEE,OAJ1B,OAIcC,EAJd,OAKQrC,QAAQkV,MAAM,iBACdlV,QAAQkV,MAAM7S,GANtB,wBAQQrC,QAAQsC,MAAM,uBARtB,6CApBY,sBAiCZ,IAAMN,EAhEA,IAAId,IAAImS,OAAO+B,SAASlM,MACzB7H,aAAagU,IAAI,WAAa,KAgEnC,GAAGrT,EAAH,CACI8S,EAAU9S,GAOd,IAAMS,EAAO0R,KACV1R,GACCsS,EAAQtS,GAOZzC,QAAQkV,MAAR,qCAA4ClT,EAA5C,QACAyI,EAAI6K,YAAY7S,EAAMT,GACjB4J,MAAK,SAAC2J,GACHvV,QAAQkV,MAAM,cACdlV,QAAQkV,MAAMK,MAGtB9K,EAAI7J,OAAO4U,OAAS,SAAC7M,GACjB3I,QAAQkV,MAAM,8BACdzK,EAAIgB,mBAAmB,CAACxN,EAAYwX,YAAaR,GA5DzC,sCA6DRE,CAASnT,EAAQS,KAdjB4Q,OAAO+B,SAASlM,KAAO,eAVvBmK,OAAO+B,SAASlM,KAAO,YA0B5B,IAEA0L,GACK5S,GAAWS,IAEX4Q,OAAO+B,SAASlM,KAAO,WAGvB,yBAAKjB,UAAU,OACX,gCACI,yBAAKA,UAAU,WAAf,YAAoCjG,IAExC,0BAAMiG,UAAU,gCACZ,kBAAC,GAAD,CACIwC,IAAKA,EACLzI,OAAQA,EACRS,KAAMA,OAKd,0BAAMwF,UAAU,gCACpB,kBAAC+L,GAAD,CACIvR,KAAMA,EACNT,OAAQA,EACRkS,aAAcA,M,MCvH9B,SAASwB,GAAe/N,GAAoB,IAAD,EACf6B,mBAAS,MADM,mBAChC/G,EADgC,KAC1BsS,EAD0B,KAevC,SAASY,EAAahN,GAClBA,EAAEC,iBACCnG,KFXJ,SAAuBA,GAC1B4R,SAASC,OAAT,eAA0B7R,GEWlBmT,CAAcnT,GACdkF,EAAMkO,UAAUpT,IAhBxBkI,qBAAU,WACN,IAAMlI,EAAO0R,KACV1R,IACCsS,EAAQtS,GACRkF,EAAMkO,UAAUpT,MAErB,CAACkF,IAcJ,IAAImO,EAAa,KAQjB,OAPInO,EAAMoO,WACND,EACI,yBAAK7N,UAAU,sBACX,0CADJ,OACkCN,EAAMoO,WAIxC,6BACJ,8DAECD,EAED,iEACA,0BAAM7N,UAAU,YAAY8D,SAAU,SAACpD,GAAD,OAAOgN,EAAahN,KACtD,2BAAOqD,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOhE,UAAU,eAAeiE,YAAY,OAAOoE,UAAU,EACrEnE,SAAU,SAACxD,GAAD,OA7BtB,SAA0BA,GACtBoM,EAAQpM,EAAEyD,OAAO1O,OA4BQsY,CAAiBrN,MACtC,4BAAQsD,KAAK,SAAShE,UAAU,gCAAhC,cAYZ,IAAMgO,GAAwC,SAACtO,GAS3C,OARAgD,qBAAU,WACFhD,EAAM3F,QACN2F,EAAM8C,IAAIyL,WAAWvO,EAAMjF,UAAUkJ,MAAK,SAACuK,GACvCxO,EAAMyO,cAAcD,EAAenU,aAG5C,CAAC2F,IAEDA,EAAM3F,OACE,yBAAKiG,UAAU,oBAClB,qGAEA,8BACI,2BAAOgE,KAAK,OAAOhE,UAAU,eACzBvK,MAAOiK,EAAM3F,OAAQqU,UAAU,IACnC,uBAAGpO,UAAU,sCAAsCiB,KAAI,uBAAkBvB,EAAM3F,SAA/E,gBAID,yBAAKiG,UAAU,oBAAf,yBAWTqO,GAAwC,SAAC3O,GAA+B,IAAD,EAC7C6B,mBAAS,IADoC,mBAClExH,EADkE,KAC1D8S,EAD0D,KAgBzE,OAAO,yBAAK7M,UAAU,kBAClB,0IACA,0BAAM8D,SAAU,SAACpD,GAAD,OAfpB,SAAsBA,GAClBA,EAAEC,iBAGFjB,EAAM8C,IAAI8L,YAAY5O,EAAMlF,MAE5B4Q,OAAO+B,SAASlM,KAAhB,uBAAuClH,GAShBwU,CAAa7N,KAChC,2BAAOqD,QAAQ,WAAf,WACA,2BAAOC,KAAK,OAAOhE,UAAU,eAAeqI,UAAU,EAClDpE,YAAY,0BACZC,SAAU,SAACxD,GAAD,OAVtB,SAAsBA,GAClBmM,EAAUnM,EAAEyD,OAAO1O,OASM+Y,CAAa9N,IAC9BlG,KAAK,YACT,4BAAQwJ,KAAK,SAAShE,UAAU,uCAAhC,gBA+LGyO,G,kDAxKX,WAAY/O,GAAsB,IAAD,8BAC7B,cAAMA,IAHF8C,SAEyB,EAG7B,EAAKlC,MAAQ,CACT9F,KAAM,KACNkU,YAAa,GACbC,kBAAkB,EAClBC,cAAc,EACdC,UAAW,KACXC,eAAe,GAGnB,EAAKtM,IAAM,IAAI9J,EAEf,EAAKqW,cAAgB,EAAKA,cAActO,KAAnB,gBACrB,EAAKuO,mBAAqB,EAAKA,mBAAmBvO,KAAxB,gBAC1B,EAAKwO,eAAiB,EAAKA,eAAexO,KAApB,gBACtB,EAAKyO,kBAAoB,EAAKA,kBAAkBzO,KAAvB,gBACzB,EAAK0O,aAAe,EAAKA,aAAa1O,KAAlB,gBAlBS,E,gEAqBZ,IAAD,OAChB2L,SAASgD,MAAQ,kBACjBzZ,KAAK6M,IAAI7J,OAAO0W,UAAY1Z,KAAKqZ,mBACjCrZ,KAAK6M,IAAI7J,OAAO2W,QAAU,SAAC/S,GACvBxE,QAAQsC,MAAM,oCACdtC,QAAQsC,MAAMkC,GACd,EAAKqE,SAAS,CACVkO,eAAe,KAGvBnZ,KAAK6M,IAAI7J,OAAO4U,OAAS,SAAChR,GACtBxE,QAAQsL,IAAI,qCAET,EAAK/C,MAAM9F,MAEV,EAAKgI,IAAI+M,WAAW,EAAKjP,MAAM9F,MAAM,GAIzC4Q,OAAOC,YAAW,WACX,EAAK/K,MAAM9F,MAEV,EAAKgI,IAAI+M,WAAW,EAAKjP,MAAM9F,MAAM,KAE1C,Q,wCAIOT,GACd,IAAIpE,KAAK2K,MAAM9F,KACX,MAAM,IAAIrC,MAAM,mCAEpBxC,KAAKiL,SAAS,CACViO,UAAW9U,M,yCAIAwC,GAKf,GAJA5G,KAAKiL,SAAS,CACVkO,eAAe,IAEnB/W,QAAQsL,IAAI,oCACT9G,EAAM5C,KAAM,CACX,IAAMS,EAAIP,KAAK2C,MAAMD,EAAM5C,MAE3B,OADA5B,QAAQsL,IAAIjJ,GACLA,EAAEkB,SACL,KAAKtF,EAAYwZ,aACb7Z,KAAKiL,SAAS,CACV8N,YAAatU,EAAE4R,QAEnB,MACJ,KAAKhW,EAAYwX,WAEb,MACJ,QACIzV,QAAQsC,MAAR,gCAAuCD,EAAEkB,c,qCAM1CmU,GAER9Z,KAAK2K,MAAM9F,MACV7E,KAAK6M,IAAI8L,YAAY3Y,KAAK2K,MAAM9F,MAGpC7E,KAAKiL,SAAS,CACV+N,iBAAkBc,M,mCAIbA,GACT9Z,KAAKiL,SAAS,CACVgO,aAAca,M,oCAIRC,GACV/Z,KAAKiL,SAAS,CACVpG,KAAMkV,M,qCAIQ,IAAD,OACjB,IAAI/Z,KAAK2K,MAAM9F,KACX,MAAM,IAAIrC,MAAM,qCAEpBxC,KAAK6M,IAAIyL,WAAWtY,KAAK2K,MAAM9F,KAAM,CACjCmV,gBAAgB,IACjBhM,MAAK,SAACuK,GACL,IAAI,EAAK5N,MAAM9F,KACX,MAAM,IAAIrC,MAAM,qCAEpB,EAAKqK,IAAI8L,YAAY,EAAKhO,MAAM9F,MAChC4Q,OAAO+B,SAASlM,KAAhB,uBAAuCiN,EAAenU,a,+BAIvC,IAAD,OAClB,GAAGpE,KAAK2K,MAAMqO,kBAAoBhZ,KAAK2K,MAAM9F,KACzC,OAAQ,0BAAMwF,UAAU,aACpB,kBAAC,GAAD,CACIwC,IAAK7M,KAAK6M,IACVzI,OAAQpE,KAAK2K,MAAMuO,UACnBpU,SAAU9E,KAAK2K,MAAM9F,KACrB2T,cAAexY,KAAKuZ,qBAEzB,GAAGvZ,KAAK2K,MAAMsO,cAAgBjZ,KAAK2K,MAAM9F,KAC5C,OAAQ,0BAAMwF,UAAU,aACpB,kBAAC,GAAD,CAAcxF,KAAM7E,KAAK2K,MAAM9F,KAAMgI,IAAK7M,KAAK6M,OAEhD,GAAG7M,KAAK2K,MAAM9F,KAAM,CACvB,IAAMoV,EAAiBja,KAAK2K,MAAMoO,YAAYxL,QAAO,SAACyI,GAClD,OAAOA,IAAS,EAAKrL,MAAM9F,QAC5BnD,KAAI,SAACsU,EAAcnV,GAClB,OAAO,yBAAK+C,IAAG,sBAAiB/C,IAAOmV,MAG3C,OAAQ,0BAAM3L,UAAU,aACpB,8DACA,0CAAgBrK,KAAK2K,MAAM9F,MAE3B,yBAAKwF,UAAU,iBACX,4BAAQgE,KAAK,SAAShE,UAAU,yBAC5BmB,QAAS,kBAAM,EAAK8N,gBAAe,KADvC,mBAEA,4BAAQjL,KAAK,SAAShE,UAAU,sBAC5BmB,QAAS,kBAAM,EAAKgO,iBADxB,oBAEA,4BAAQnL,KAAK,SAAShE,UAAU,2BAC5BmB,QAAS,kBAAM,EAAK0O,cAAa,KADrC,uBAIJ,sDACED,EAAenZ,OACbmZ,EACA,2DAGR,OAAQ,0BAAM5P,UAAU,aACpB,kBAACyN,GAAD,CAAgBG,UAAWjY,KAAKoZ,qB,GAnK3B3N,IAAM0K,WC9GdgE,I,MAAgC,SAACpQ,GAa1C,IACM2K,EAAU,CAAC,eAAgB,QAZjC,SAAsB5V,GAClB,OAAOA,GACH,KAAKF,EAAKK,MACV,KAAKL,EAAKM,OACN,MAAO,QACX,KAAKN,EAAKI,SACV,KAAKJ,EAAKG,OACN,MAAO,OAIDqb,CAAarQ,EAAMjL,OAerC,OAbGiL,EAAMyB,SACLkJ,EAAQxT,KAAK,eAEd6I,EAAMsQ,YACL3F,EAAQxT,KAAR,MAAAwT,EAAO,YAAS3K,EAAMsQ,aAEtBtQ,EAAMuQ,YACN5F,EAAQxT,KAAK,iBAEd6I,EAAMwQ,UACL7F,EAAQxT,KAAK,aAGb6I,EAAMwQ,SAEC,yBAAKlQ,UAAYqK,EAAQvK,KAAK,OAGjC,yBAAKE,UAAYqK,EAAQvK,KAAK,KAClCqB,QAAS,SAACT,GAAO,OAAOhB,EAAMyB,QAAUzB,EAAMyB,QAAQT,GAAK,OAC3D,yBAAKV,UAAU,yBACX,0BAAMA,UAAU,SAAUxK,EAAckK,EAAMjK,QAC9C,0BAAMuK,UAAU,QAASN,EAAMjL,OAEnC,yBAAKuL,UAAU,cAEf,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,SAAUxK,EAAckK,EAAMjK,QAC9C,0BAAMuK,UAAU,QAASN,EAAMjL,UCjB9BgL,GAAoC,SAACC,GAQ9C,IAAMyQ,EAAY,GAClBrb,IAAW8B,SAAQ,SAACnC,GAChBiL,EAAMhD,KAAKvG,YAAY1B,GAAMmC,SAAQ,SAACF,GAClC,IAAMF,EAAIkJ,EAAMhD,KAAKxG,MAAM8M,QAAQtM,GAC/ByK,OAAUiP,EACX1Q,EAAM2Q,gBAAkB3Q,EAAM4Q,eAC7BnP,EAAU,SAACT,GAA6B,OAZ9BvD,EAYkD3G,OAXjEkJ,EAAM2Q,gBAAkB3Q,EAAM4Q,cAC7B5Q,EAAM4Q,aAAa5Q,EAAMmE,YAAa1G,IAF9C,IAAsBA,IAcd,IAAMoT,EAAO,kBAAC,GAAD,CAAU9b,KAAMiC,EAAKjC,KAAO8E,IAAG,sBAAiB/C,GACzDf,MAAOiB,EAAKjB,MACZya,UAAWxQ,EAAM8Q,UACjBrP,QAASA,EACT8O,WAAYvQ,EAAM+Q,eAAiB/Q,EAAM+Q,cAAcnZ,SAASd,KACpE2Z,EAAUtZ,KAAK0Z,SAIvB,IAAMG,EAAWhR,EAAM2Q,eAAiB,gBAAkB,GAE1D,OAAQ,yBAAKrQ,UAAY,UAAY0Q,GACjC,yBAAK1Q,UAAU,eACTN,EAAMlF,KACNkF,EAAMiR,SAAW,YAAc,GAC/BjR,EAAMkR,iBAAmB,cAAgB,GACzClR,EAAMQ,QAAUzH,EAAU2H,SAAWV,EAAMQ,QAAUzH,EAAUgM,gBAC7D,sCAAe/E,EAAMmR,eAArB,kBACA,MAER,yBAAK7Q,UAAU,eACTmQ,KC1EDW,GAAkC,SAACpR,GAC5C,IAAMqR,EAAcrR,EAAM/B,YAAYtG,KAAI,SAACmD,EAAchE,GACrD,IAAM6T,EAAU,CAAC,eAOjB,OANI7T,IAAMkJ,EAAMsR,kBACZ3G,EAAQxT,KAAK,gBAEbL,IAAMkJ,EAAMuR,mBACZ5G,EAAQxT,KAAK,iBAEV,yBAAKmJ,UAAWqK,EAAQvK,KAAK,KAAMvG,IAAG,iBAAY/C,IACrD,8BAAOgE,GACNkF,EAAMsR,mBAAqBxa,EACxB,0CACA,KAEHkJ,EAAMsR,mBAAqBxa,EACxB,2CACA,SAIZ,OAAO,yBAAKwJ,UAAU,cAChB+Q,ICpCH,SAASG,GAAQja,EAAWC,GAC/B,OAAOqI,KAAK4R,MAAM5R,KAAK6R,UAAYla,EAAID,IAAMA,ECOjD,SAASoa,GAAQ3U,GAAsB,IAAD,gBAClBA,EAAKxG,OADa,IAClC,IAAI,EAAJ,qBAA4B,CACxB,GADwB,QACfT,QAAUnB,EAAUU,IACzB,OAAO,GAHmB,8BAMlC,OAAO,EAGX,SAASsc,GAAqB5U,GAC1B,IADmD,EAC/C6U,EAAW,KACXC,EAAQ,EAFuC,cAGlC9U,EAAKtG,WAH6B,IAGnD,2BAAiC,CAAC,IAAzB3B,EAAwB,QACzBmB,EAAIpB,EAAiBC,GACrBmB,EAAI4b,IACJA,EAAQ5b,EACR2b,EAAW9c,IAPgC,8BAUnD,OAAO8c,EAiBX,SAASE,GAAc/U,GAGnB,GAA0B,IAAtBA,EAAKxG,MAAMO,QAAsC,IAAtBiG,EAAKxG,MAAMO,OACtC,MAAM,IAAI0B,MAAJ,uEAA0EuE,EAAKxG,MAAMO,SAG/F,IAAIib,EAAiB,EAGfC,EAASN,GAAQ3U,GACjBkV,EAAmBN,GAAqB5U,GAC1CiV,GAAUC,IACVF,GAAkBld,EAAiBod,IAIvC,cAAiB9a,OAAO4E,KAAKgB,EAAKvG,aAAlC,eAGI,IAHC,IAAI1B,EAAI,KACHod,EAAW9c,IAERyB,EAAI,EAAGA,EAAIkG,EAAKvG,YAAY1B,GAAMgC,OAAQD,IAAK,CAEpD,IAAIE,EAAOgG,EAAKvG,YAAY1B,GAAM+B,GAC9BE,EAAKjB,QAAUoc,EAASrb,KACxBkb,GAAkBhb,EAAKjB,OAKnC,OAAIic,EAAiB,GAAK,EAEfA,EAAkBA,EAAiB,EAGnCA,EAAkBA,EAAiB,EAAK,EAyDvD,SAASI,GAAiBpV,EAAYkB,EAA8Cd,EAAwB+B,GAExG,GADsBjB,EAAYiB,GAAYpI,OAAS,GAClCiG,EAAKtG,UAAUK,OAAS,EAAG,CAE5C,IAAMmb,EAAmBN,GAAqB5U,GAC9C,IAAKkV,EACD,MAAM,IAAIzZ,MAAM,2DAGpB,OAAOuE,EAAK/F,SAAS,CACjBlB,MAAOnB,EAAUa,MACjBV,KAAMmd,IAIV,OADeP,GAAQ3U,GAvH/B,SAAwBA,EAAY0B,GAChC,IAAI,IAAI5H,EAAI,EAAGA,EAAIkG,EAAKxG,MAAMO,OAAQD,IAAK,CAEvC,GADWkG,EAAKxG,MAAMM,GACbf,QAAU2I,EACf,OAAO5H,EAGf,OAAQ,EAmHOub,CAAerV,EAAMpI,EAAUU,KAtClD,SAAyB0H,EAAYzB,EAA4B6B,GAC7D,IAAMkV,EAAgBtV,EAAKxG,MAAMgN,QAAO,SAACxM,GACrC,OlBkDD,SAAqBgG,EAAYwB,EAAqBxH,EAAYoG,GACrE,GAAoB,IAAjBoB,EAAMzH,OAEL,OAAO,EAEX,IAAMwb,EAAc/T,EAAM,GAAGxH,KAAKjC,KAClC,OAAGiC,EAAKjC,OAASwd,IAQ4B,IAAzCvV,EAAKvG,YAAY8b,GAAaxb,QAAgBqG,GAAaJ,EAAKvG,YAAY2G,GAAWrG,OAAS,GAAKyH,EAAMzH,OAAS,EAC7GC,EAAKjC,OAASqI,EAG2B,IAAzCJ,EAAKvG,YAAY8b,GAAaxb,QkBpE9Byb,CAAYxV,EAAMzB,EAAcvE,EAAMoG,MAGjD,GAA6B,IAAzBkV,EAAcvb,OACd,MAAM,IAAI0B,MAAM,2CAGpB,IACMzB,EAAOsb,EADHd,GAAQ,EAAGc,EAAcvb,SAE7B2D,EAAIsC,EAAKxG,MAAM8M,QAAQtM,GAC7B,IAAW,IAAP0D,EACA,MAAM,IAAIjC,MAAM,yBAEpB,OAAOiC,EAyBQ+X,CAAgBzV,EAAM,GAAII,GAkL7C,SAASsV,GAAgB1V,EAAYiB,EAAuBkG,GACxD,IAAMhF,EAAalB,EAAYkG,GACzBwO,EAAmB1U,EAAYuF,QAAO,SAAC1I,EAAchE,GACvD,OAAOA,IAAMqN,KAGjB,GAAgC,IAA5BwO,EAAiB5b,OACjB,MAAM,IAAI0B,MAAM,yCAepB,IAHA,IAAMma,EAAiB,GACnBC,GAAuB,EAElB/b,EAAI,EAAGA,EAAIkG,EAAKxG,MAAMO,OAAQD,IACnC,IAAK,IAAI4D,EAAI5D,EAAI,EAAG4D,EAAIsC,EAAKxG,MAAMO,OAAQ2D,IAAK,CAC5C,IAAMoY,EAAQ9V,EAAKxG,MAAMM,GACnBic,EAAQ/V,EAAKxG,MAAMkE,GACnBsY,EAAQ,YAAOhW,EAAKxG,OAE1Bwc,EAASnN,OAAOnL,EAAG,GACnBsY,EAASnN,OAAO/O,EAAG,GACnB,IAAMmc,EAAU,IAAI1c,EAAKyc,GAGzB,KAFqBC,EAAQvc,UAAUK,OAEpB,IAAM+b,EAAM/c,QAAUnB,EAAUU,KAAOyd,EAAMhd,QAAUnB,EAAUU,IAApF,CAIA,IAAIY,EAAI6b,GAAckB,GAClB/c,EAAI2c,IACJD,EAAeD,EAAiB,IAAMG,EACtCF,EAAeD,EAAiB,IAAMI,EACtCF,EAAsB3c,IAOlC,OAFAmC,QAAQkV,MAAR,qCAA4CpO,EAA5C,yBAAuE0T,EAAvE,YAEOD,EAGI,QACXM,OAvSJ,SAAgBC,EAAuBnW,EAAYmC,GAG/C,IAAMyE,EAAajG,EAAcwV,GAC3BC,EAAa,CACf3X,OAAQ0D,EACRlE,OAAQ,GAGN+W,EAAiBD,GAAc/U,GAGrC,OAFA3E,QAAQkV,MAAR,UAAiBpO,EAAjB,iCAAoD6S,EAApD,YAEKpO,GAAcoO,EAAiBpO,EAAW3I,SAAa2I,GAAcoO,GlB9ChD,GkB+Cf,CACH/W,OAAQ+W,EACRvW,OAAQ0D,GAGLiU,GAsRXC,SA/IJ,SAAkBrW,EAAYzB,EAA4B2C,EAA8Cd,EAAwB+B,GAC5H,GAA0B,IAAtBnC,EAAKxG,MAAMO,OACX,MAAM,IAAI0B,MAAM,+BAKpB,GAA4B,IAAxB8C,EAAaxE,OAAc,CAC3B,IAAM0G,EAAY2U,GAAiBpV,EAAMkB,EAAad,EAAW+B,GACjE,IAAmB,IAAf1B,EACA,MAAM,IAAIhF,MAAJ,6CAAgD0G,EAAhD,mBAEV,OAAO1B,EAEP,IAAMA,EA9Fd,SAA4BT,EAAYzB,EAA4B2C,EAA8Cd,EAAwB+B,GACtI,IAAMoT,EAAchX,EAAa,GAAGvE,KAAKjC,KACnCue,EAAcnW,EAAsB5B,EAAc6B,GAAWpG,KAEnE,GAAIgG,EAAKvG,YAAY8b,GAAaxb,OAAS,EAAG,CAK1C,IAAMwc,EAAcvW,EAAKvG,YAAY8b,GAAa,GAC9CiB,EAAW,EAIXA,EAFAF,EAAYve,OAASwd,GAAegB,EAAYxd,MAAQud,EAAYvd,MAEzDiH,EAAKvG,YAAY8b,GAAaxb,OAAS,EAGvC,EAEf,IAAM0c,EAAUzW,EAAKvG,YAAY8b,GAAaiB,GACxC1c,EAAKkG,EAAKxG,MAAM8M,QAAQmQ,GAC9B,GAAI3c,EAAI,EACJ,MAAM,IAAI2B,MAAM,kCAEpB,OAAO3B,EACJ,GAAIsG,GAAaJ,EAAKvG,YAAY2G,GAAWrG,OAAS,EAAG,CAI5D,IAAIyc,EAAW,EACf,GAAIF,EAAYve,OAASwd,GAAee,EAAYve,OAASqI,EAGzDoW,EAAWxW,EAAKvG,YAAY2G,GAAWrG,OAAS,OAM5Cyc,EAHgBxW,EAAKvG,YAAY2G,GAAW,GAChCrH,MAAQud,EAAYvd,MAErB,EAGAiH,EAAKvG,YAAY2G,GAAWrG,OAAS,EAGxD,IAAM0c,EAAUzW,EAAKvG,YAAY2G,GAAWoW,GACtC1c,EAAIkG,EAAKxG,MAAM8M,QAAQmQ,GAC7B,GAAI3c,EAAI,EACJ,MAAM,IAAI2B,MAAM,gCAEpB,OAAO3B,EAIP,IAHG,EAGC4c,EAAU,IACVC,EAAa3W,EAAKxG,MAAM,GAJzB,cAKcwG,EAAKxG,OALnB,IAKH,2BAA6B,CAAC,IAArBQ,EAAoB,QACrBA,EAAKjB,MAAQ2d,IACbC,EAAa3c,EACb0c,EAAU1c,EAAKjB,QARpB,8BAWH,IAAMe,EAAIkG,EAAKxG,MAAM8M,QAAQqQ,GAC7B,GAAI7c,EAAI,EACJ,MAAM,IAAI2B,MAAM,uCAEpB,OAAO3B,EA4BW8c,CAAmB5W,EAAMzB,EAAc2C,EAAad,GACtE,IAAmB,IAAfK,EACA,MAAM,IAAIhF,MAAJ,+CAAkD0G,EAAlD,mBAEV,OAAO1B,GA8HXoW,eAnHJ,SAAwB7W,EAAYV,EAAuBwX,EAAyB7V,EAAuBkG,GACvG,IAAMhF,EAAalB,EAAYkG,GAC/B,IAAKnH,EACD,MAAM,IAAIvE,MAAJ,8DAAiE0G,IAc3E,IATA,IAAM4U,EAAY,sBAAO/W,EAAKxG,OAAZ,YAAsB8F,IAClCkJ,EAAU,IAAIjP,EAAKwd,GAGnBC,EAActB,GAAgBlN,EAASvH,EAAakG,GAGpD8P,EAAgB7c,OAAOC,OAAO2c,GAC9BhB,EAAQ,YAAOxN,EAAQhP,OACpBM,EAAI,EAAGA,EAAImd,EAAcld,OAAQD,IAAK,CAC3C,IAAME,EAAOid,EAAcnd,GACrB4D,EAAIsY,EAAS1P,QAAQtM,GAC3Bgc,EAASnN,OAAOnL,EAAG,GAEvB,IAGMwZ,EAAcnC,GAHJ,IAAIxb,EAAKyc,IAKzB,OAAIkB,EAAcJ,EACPI,EAEAJ,GAsFXpB,oBCtWEyB,GAAqD,SAACnU,GACxD,GAAIA,EAAMsR,mBAAqBtR,EAAMoU,oBACjC,MAAM,IAAI3b,MAAM,sEAGpB,IAAM4b,EAAqBrU,EAAM/B,YAAY+B,EAAMoU,qBAC7CE,EAAqBtU,EAAMuU,YAAYF,GAN2C,EASlDxS,oBAAU,GATwC,mBASnF2S,EATmF,KASrEC,EATqE,OAWvD5S,oBAAU,GAX6C,mBAWnFiF,EAXmF,KAWrE8B,EAXqE,OAgB1D/G,mBAAS,IAhBiD,mBAgBnF6S,EAhBmF,KAgBzEC,EAhByE,KAwBxF,SAASC,EAAmB5T,GACxB,IAAMmD,EAAchI,OAAOC,SAAU4E,EAAEyD,OAA4B1O,OACnE0e,EAAgBtQ,GAgDpB,IAAM0Q,EAAkB7U,EAAM/B,YAAY+B,EAAMsR,kBAE1CwD,EAAc,6BACZ,kBAAC,GAAD,CACIha,KAAM+Z,EACN1Q,YAAanE,EAAMsR,iBACnBtU,KAAMsX,EACN9T,MAAOzH,EAAU2H,QACjBuQ,SAAUjR,EAAMsR,mBAAqBtR,EAAM+U,YAC3C7W,YAAa,GACbiT,eAAgB,EAChBD,iBAAkBlR,EAAMsR,mBAAqBtR,EAAMoU,oBACnDzD,eAAgB3Q,EAAMsR,mBAAqBtR,EAAMoU,oBACjDtD,WAAW,EACXF,aArEZ,SAA0BzM,EAAqB1G,GAC3CpF,QAAQsL,IAAIlG,GACZmL,EAAWnL,OAsETuX,EAAmB,4EAC0BhV,EAAMiV,eADhC,2FAIrBC,EAAqB,KAErBA,GADkB,IAAlBpO,EACsB,yDAEA,gDAAuBwN,EAAmB9d,MAAMsQ,GAAczQ,YAGxF,IAAI4J,EAAQ,GACZD,EAAM/B,YAAY/G,SAAQ,SAAC4D,EAAcuF,GACrC,GAAIA,IAAUL,EAAMsR,iBAAkB,CAClC,IAAMT,EAAO,yBAAKvQ,UAAU,aAAazG,IAAG,gBAAWwG,IACnD,2BAAOC,UAAU,mBAAmBgE,KAAK,QAAQxJ,KAAK,eAAe/E,MAAOsK,EACxEmE,SAAUoQ,IACd,2BAAOvQ,QAAQ,eAAe/D,UAAU,oBAAqBxF,IAEjEmF,EAAM9I,KAAK0Z,OAGnB,IAAMsE,EAAgB,yBAAK7U,UAAU,kBACjC,uDACEL,GAGFmV,EAAkB,KACtB,GAAIhe,OAAO4E,KAAK0Y,GAAU3d,OAAS,EAAG,CAClC,IAAIse,EAAO,GACXrV,EAAM/B,YAAY/G,SAAQ,SAAC4D,EAAcuF,GACrC,GAAIA,IAAUL,EAAMsR,iBAAkB,CAClC,IAAMT,EAAO,wBAAIhX,IAAG,cAASwG,IACzB,4BAAMvF,GACN,4BAAMA,KAAQ4Z,EAAWJ,EAAmB9d,MAAMke,EAAS5Z,IAAOzE,WAAa,eAEnFgf,EAAKle,KAAK0Z,OAIlBuE,EAAmB,yBAAK9U,UAAU,8BAC9B,2CACA,2BAAOA,UAAU,uBACb,+BAAQ+U,IAEZ,4BAAQ/Q,KAAK,SAAShE,UAAU,yBAC5BqE,SAA2C,IAAjCvN,OAAO4E,KAAK0Y,GAAU3d,OAChC0K,QA3EZ,WAEI,IAAMsP,EAAgB,GACtB3Z,OAAOK,QAAQid,GAAUxd,SAAQ,YAA8B,IAAD,mBAA3BiI,EAA2B,KAAf1B,EAAe,KACpDzG,EAAOsd,EAAmB9d,MAAMiH,GACtCsT,EAAc5R,GAAcnI,KAGhCgJ,EAAMmG,aAAa4K,KAiEf,8BAMR,OAAQ,yBAAKzQ,UAAU,mCACnB,yBAAKA,UAAU,eAET0U,EAEF,yBAAK1U,UAAU,yBACX,yCACCwU,GAGHI,EAEAC,GAEkB,IAAlBX,IAAyC,IAAlB1N,EACrB,6BACI,uCAAcwN,EAAmB9d,MAAMsQ,GAAczQ,WAArD,OAAsE2J,EAAM/B,YAAYuW,GAAxF,KACA,4BAAQlQ,KAAK,SAAShE,UAAU,kBAAkBmB,QA/HlE,WACI,GAAIzB,EAAMsR,mBAAqBkD,EAC3B,MAAM,IAAI/b,MAAM,mCAGpB,IAAM6c,EAAc,GACpBle,OAAOqF,OAAO6Y,EAAaZ,GAE3B,IAAMa,EAAmBvV,EAAM/B,YAAYuW,GAC3Cc,EAAYC,GAAoBzO,EAIhC,IADA,IAAI0O,EAAkB,KACb1e,EAAI,EAAGA,EAAIkJ,EAAM/B,YAAYlH,OAAQD,IACtCA,IAAMkJ,EAAMsR,kBAAoBxa,IAAM0d,IACtCgB,EAAkBxV,EAAM/B,YAAYnH,IAG5C,GAAwB,OAApB0e,EACA,MAAM,IAAI/c,MAAM,sCAEhB6c,EAAYE,KAAqBF,EAAYC,WACtCD,EAAYE,GAGvBb,EAAYW,KAsGA,OAEN,KAEAF,KAQRK,GAAqD,SAACzV,GACxD,IAAMqU,EAAqBrU,EAAM/B,YAAY+B,EAAMoU,qBAC7CS,EAAkB7U,EAAM/B,YAAY+B,EAAMsR,kBAFwC,EAOlDzP,oBAAS,GAPyC,mBAOnF6T,EAPmF,KAOpEC,EAPoE,OAWtD9T,mBAAS,IAX6C,mBAWnF+T,EAXmF,KAWvEC,EAXuE,KA8BxF,IAAIrM,EAAaxJ,EAAMuU,YAAYM,GACnC,GAAIa,EAAe,CAEf,IAAMrZ,EAAW,YAAOmN,EAAWhT,OAC7Bsf,EAAUF,EAAWf,GAC3BxY,EAAYlF,KAAK2e,GAEjBtM,EAAa,IAAIjT,EAAK8F,GAG1B,OAAQ,yBAAKiE,UAAU,+DACnB,kBAAC,GAAD,CACIrC,YAAa+B,EAAM/B,YACnBqT,iBAAkBtR,EAAMsR,iBACxBC,kBAAmBvR,EAAMoU,sBAE7B,uBAAG9T,UAAU,gBAAb,4BAAsD+T,EAAtD,4EAEEqB,EAAgB,KACd,4BAAQpR,KAAK,SAAShE,UAAU,sBAC5BmB,QAlCZ,WACI,IAAMsU,EAAgBC,GAAGtD,gBAAgB1S,EAAMuU,YAAYF,GAAqBrU,EAAM/B,YAAa+B,EAAMoU,qBACzGyB,EAAcE,GACdJ,GAAe,KA8BX,YAKAD,EACA,yBAAKpV,UAAU,wBACX,8DAAoCsV,EAAWf,GAAiBxe,WAAhE,SAAkFge,EAAlF,KACA,4BAAQ/P,KAAK,SAAShE,UAAU,yBAC5BmB,QAhChB,WACIzB,EAAMmG,aAAayP,KA8BX,aAGJ,KAGJ,yBAAKtV,UAAU,yBACX,yCACA,kBAAC,GAAD,CACIxF,KAAM+Z,EACN1Q,YAAanE,EAAMsR,iBAEnBtU,KAAMwM,EACNhJ,MAAOzH,EAAUkN,iBACjBgL,SAAUjR,EAAMsR,mBAAqBtR,EAAM+U,YAC3C7W,YAAa,GACbiT,eAAgB,EAChBD,kBAAkB,EAClBP,gBAAgB,EAChBG,WAAW,OAKrB9L,GAAgD,SAAChF,GACnD,OAAIA,EAAMsR,mBAAqBtR,EAAMoU,oBAC1B,kBAAC,GAAD,CACHnW,YAAa+B,EAAM/B,YACnBqT,iBAAkBtR,EAAMsR,iBACxByD,YAAa/U,EAAM+U,YACnBR,YAAavU,EAAMuU,YACnBU,eAAgBjV,EAAMiV,eACtBb,oBAAqBpU,EAAMoU,oBAC3BjO,aAAcnG,EAAMmG,eAEjB,kBAAC,GAAD,CACHlI,YAAa+B,EAAM/B,YACnBqT,iBAAkBtR,EAAMsR,iBACxByD,YAAa/U,EAAM+U,YACnBR,YAAavU,EAAMuU,YACnBU,eAAgBjV,EAAMiV,eACtBb,oBAAqBpU,EAAMoU,oBAC3BjO,aAAcnG,EAAMmG,gBC1RnB8P,GAA2C,SAACjW,GACrD,IAAIA,EAAM7B,kBACN,MAAM,IAAI1F,MAAM,8BAGpB,IAAMyG,EAASlB,EAAmBgC,EAAM/B,YAAa+B,EAAM9B,YAAa8B,EAAM7B,kBAAmB6B,EAAM5B,UACjGE,EAAcY,EAAOH,MACrBV,EAAYa,EAAOJ,IAEnBhB,EAAiBkC,EAAM5B,SAAS3C,OAChCya,EAAiB5X,EAAYR,GAAkB,EAG/CqY,EAAenW,EAAM/B,YAAYtG,KAAI,SAACmD,EAAcqJ,GACtD,IACM5F,EADcyB,EAAM9B,YAAYpD,GACXnD,KAAI,SAAC6G,EAAqB4X,GACjD,IAAM5f,EAAQgI,EAAM7G,KAAI,SAAC6D,EAAgBiC,GACrC,OAAO,kBAAC,GAAD,CAAU5D,IAAG,iBAAYsK,EAAZ,yBAAwCiS,EAAxC,iBAA2D3Y,GAC3E6S,WAAY,CAAC,cAAD,OAAe7S,IAC3B1I,KAAMyG,EAAGxE,KAAKjC,KACdgB,MAAOyF,EAAGxE,KAAKjB,WAEvB,OAAO,yBAAKuK,UAAU,cAAczG,IAAG,iBAAYsK,EAAZ,yBAAwCiS,IAC1E5f,MAGH6f,EAAevb,KAAQkF,EAAM7B,kBAAoB6B,EAAM7B,kBAAkBrD,GAAM/D,OAAS,EACxFL,EAAY2f,EAAe,EAAIrW,EAAM7B,kBAAkBrD,GAAMsF,KAAK,KAAO,GAC/E,OAAO,yBAAKE,UAAU,gCAAgCzG,IAAG,iBAAYsK,EAAZ,4BACrD,4BAAKrJ,GACHyD,EAAOxH,OAAS,EACd,6BACI,6BAAMwH,EAAOxH,OAAb,mBACI+D,IAASgD,EAAT,UAEGO,EAAUvD,GAFb,iCAE2CkF,EAAM5B,SAASnD,OAF1D,sBAGGqD,EAAYxD,GAHf,YAKJ,6BAAMub,EAAN,sBACMA,EAAe,EAAI,KAAO3f,EAAY,MAC5C,yBAAK4J,UAAU,uBACV/B,IAGT,+DAIZ,OAAQ,yBAAK+B,UAAU,mBACnB,yBAAKA,UAAU,eACX,sCACA,6BAAMN,EAAM5B,SAAS3C,OAArB,uBAAiDuE,EAAM5B,SAASnD,OAAhE,WACA,6BAAqB,UAAM6C,EAApBoY,EAAc,sDAGzB,yBAAK5V,UAAU,iBACX,4CACC6V,GAEHnW,EAAMsW,SACJ,4BAAQhS,KAAK,SAAShE,UAAU,yBAC5BmB,QAAS,SAACT,GAAO,OAAOhB,EAAMsW,SAAWtW,EAAMsW,SAAShY,GAAe,OAD3E,oBAEA,OClENiY,GAA8B,SAACvW,GACjC,SAASwW,EAAazY,EAAUsC,GAC5B,OAAO,wBAAIxG,IAAG,cAASwG,IAClBtC,EAAI9C,OAAS,EAAI8C,EAAI9C,OAAS,QAOvC,IAHA,IAAMwb,EAAc,CAChB,wBAAI5c,IAAK,SAAT,UAEK/C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMgE,EAAOkF,EAAM/B,aAAa+B,EAAM0W,kBAAoB5f,GAAK,GAC/D2f,EAAYtf,KACR,wBAAI0C,IAAG,eAAU/C,IAAOgE,IAUhC,IANA,IAAMua,EAAO,GAETsB,EAAW,EAEX1W,EAAQ,GAEJnJ,EAAI,EAAGA,EAAIkJ,EAAMpC,WAAW7G,OAAQD,IAAK,CAC7C,GAAqB,IAAjBmJ,EAAMlJ,OAAc,CACpB,IAAI6f,EAAM,wBAAI/c,IAAG,gBAAW8c,IACxB,4BAAKA,GACH1W,GAENoV,EAAKle,KAAKyf,GACVD,IACA1W,EAAQ,GAEZ,IAAIlC,EAAMiC,EAAMpC,WAAW9G,GAC3BmJ,EAAM9I,KAAKqf,EAAazY,EAAKjH,IAGjC,GAAImJ,EAAMlJ,OAAS,EAAG,CAGlB,IADA,IAAID,EAAI,EACDmJ,EAAMlJ,OAAS,GAClBkJ,EAAM9I,KAAK,wBAAI0C,IAAG,gBAAW/C,MAC7BA,IAEJ,IAAI8f,EAAM,wBAAI/c,IAAG,gBAAW8c,IACxB,4BAAKA,GACH1W,GAENoV,EAAKle,KAAKyf,GAGd,OAAO,yBAAKtW,UAAU,eAClB,+CAC6B,IAA5BN,EAAMpC,WAAW7G,OACd,0CACA,2BAAOuJ,UAAU,gCACb,+BACI,4BAAKmW,IAET,+BAAQpB,MCrCXzT,GAAsC,SAAC5B,GAIhD,IAAM0W,GAAqB1W,EAAM+U,YAAc,GAAK,EAJyB,EAQ3BlT,mBAAS6U,GARkB,mBAQxEG,EARwE,KAQpDC,EARoD,OAY3CjV,mBAAS,IAZkC,mBAYxEjE,EAZwE,KAY5DmZ,EAZ4D,OAgBnDlV,mBAAS,GAhB0C,mBAgBxE5G,EAhBwE,KAgBhE+b,EAhBgE,OAoBnCnV,mBAAS,IApB0B,mBAoBxEoV,EApBwE,KAoBxDC,EApBwD,OA0BrCrV,mBAAS,IA1B4B,mBA0BxEW,EA1BwE,KA0BzDC,EA1ByD,KA+C7E,SAAS0U,EAAOC,EAAajT,GACzB4S,EAAc,GAAD,mBAAKnZ,GAAL,CAAiBwZ,KAC9BN,GAAuBD,EAAqB,GAAK,GAC3B,IAAlBO,EAAOnc,QAAiBuH,EAAc5K,SAASuM,IAC/C1B,EAAiB,GAAD,mBAAKD,GAAL,CAAoB2B,KApB5CnB,qBAAU,WAEN,GtB6LD,SAA2BpF,GAG9B,IAFA,IAAM4E,EAA0B,GAC5B6U,GAAgB,EACZvgB,EAAI,EAAGA,EAAI8G,EAAW7G,OAAQD,IAAK,CACvC,IAAIiH,EAAMH,EAAW9G,GACjB0L,EAAc5K,SAASmG,EAAItC,UAEL,IAAfsC,EAAI9C,OACXuH,EAAcrL,KAAK4G,EAAItC,QAEvB4b,GAAgB,GAGxB,OAAiC,IAAzB7U,EAAczL,QAAkBsgB,GAA0C,IAAzB7U,EAAczL,OsB3M7CugB,CAAkB1Z,GACrB,CACf,IAAIgG,EAAajG,EAAcC,GAC/BoC,EAAM6D,YAAYD,GAElBnB,EAAiB,IACjByU,EAAkB,IAClBF,EAAU,GACVD,EAAc,QAuFtB,IAAMjc,EAAOkF,EAAM/B,YAAY+B,EAAMsR,kBAC/BtU,EAAOgD,EAAMuU,YAAYzZ,GACzBga,EACD,6BACG,kBAAC,GAAD,CACIha,KAAMA,EACNqJ,YAAanE,EAAMsR,iBACnBtU,KAAMA,EACNwD,MAAOzH,EAAU2H,QACjBuQ,SAAUjR,EAAMsR,mBAAqBtR,EAAM+U,YAC3C7W,YAAa,GACbiT,eAAgB,EAChBD,kBAAkB,EAClBP,eAAgB3Q,EAAMsR,mBAAqBuF,EAC3C/F,WAAW,IACf,6BAAO9T,EAAKkD,YAAZ,mBACA,2CAAkBlD,EAAKtG,UAAUK,OAAS,EAAIiG,EAAKtG,UAAU0J,KAAK,KAAO,SAGjF,OAAO,yBAAKE,UAAU,gBAClB,kBAAC,GAAD,CACIrC,YAAa+B,EAAM/B,YACnBqT,iBAAkBtR,EAAMsR,iBACxBC,kBAAmBsF,IAEvB,kBAAC,GAAD,CACI5Y,YAAa+B,EAAM/B,YACnByY,kBAAmBA,EACnB9Y,WAAYA,IAEhB,yBAAK0C,UAAU,cACX,oCACYN,EAAM/B,YAAY4Y,GAD9B,oBAKJ,yBAAKvW,UAAU,2BACTuW,IAAuB7W,EAAMsR,iBAC3B,0BAAMhR,UAAU,gBACZ,yCACA,2BAAOgE,KAAK,SAASxJ,KAAK,SAASgF,IAAK,EAAG4D,IAAK,IAAK6T,KAAM,EACvDjX,UAAU,eACVkE,SAlFpB,SAA4BxD,GACxB,IAAM/F,EAASkB,OAAOC,SAAU4E,EAAEyD,OAAe1O,OAEjD,GAAIkF,EAAS,EACTic,EAAkB,kCAEf,GAAe,IAAXjc,EACPic,EAAkB,oBACf,IAAIjc,EAAS,IAAM,EAEtB,YADAic,EAAkB,+CAEf,GAAIjc,EtB9EW,GsBgFlB,YADAic,EAAkB,0CAGlBA,EAAkB,IAClBF,EAAU/b,OAmEAgc,EAAiB,uBAAG3W,UAAU,aAAc2W,GAAuB,KACrE,yBAAK3W,UAAU,aACX,4BAAQgE,KAAK,SAAShE,UAAU,yBAC5BmB,QA/DxB,WACQe,EAAc5K,SAASoI,EAAMsR,mBAC7B4F,EAAkB,qDAEtB,IAAMtT,EAAajG,EAAcC,GACjC,GAAIgG,GAAcA,EAAW3I,QAAUA,EACnCic,EAAkB,sDADtB,CAII,IAAM/X,EAAaa,EAAM/B,YAAY4Y,GACrCM,EAAO,CACHlc,OAAQA,EACRQ,OAAQ0D,GACTa,EAAMsR,oBAmDO3M,SAAqB,IAAX1J,GAAmC,KAAnBgc,GAAyBzU,EAAc5K,SAASoI,EAAMsR,mBAFpF,cAGA,4BAAQhN,KAAK,SAAShE,UAAU,wBAC5BmB,QApGxB,WAEI0V,EAAO,CACHlc,OAAQ,EACRQ,OAHeuE,EAAM/B,YAAY4Y,IAIlC7W,EAAMsR,oBA8FO,UAKR,4BAAQhN,KAAK,SAAShE,UAAU,yBAC5BmB,QA9HhB,WACI,GAAIoV,IAAuB7W,EAAMsR,iBAC7B,MAAM,IAAI7Y,MAAM,4CAEpB,IAAM0G,EAAaa,EAAM/B,YAAY4Y,GAWrCM,EATI3U,EAAc5K,SAASif,GAEd,CACL5b,OAAQ,EACRQ,OAAQ0D,GAGH6W,GAAG9C,OAAOtV,EAAYoC,EAAMuU,YAAYpV,GAAaA,GAEnD0X,KA8GP,WAKR,yBAAKvW,UAAU,yBACX,yCACCwU,KCpMPlQ,GAAoD,SAAC5E,GACvD,IAAMqU,EAAqBrU,EAAM/B,YAAY+B,EAAMoU,qBADwC,EAMjEvS,mBAAS,GANwD,mBAMtF5G,EANsF,KAM9E+b,EAN8E,OAO7DnV,mBAAS,IAPoD,mBAOtFuM,EAPsF,KAO5EoJ,EAP4E,OAY7D3V,oBAAS,GAZoD,mBAYtF4V,EAZsF,KAY1EC,EAZ0E,KAqE3F,IAAMpb,EAAgB0D,EAAMzD,SAAS5E,KAAI,SAACX,EAAYF,GAElD,OAAQ,yBAAK+C,IAAG,kCAA6B/C,IACzC,kBAAC,GAAD,CAAU+C,IAAG,wBAAmB/C,GAC5B/B,KAAMiC,EAAKjC,KACXgB,MAAOiB,EAAKjB,QAGV,SAIR8e,EAAkB7U,EAAM/B,YAAY+B,EAAMsR,kBAG1CwD,EAAc,6BACZ,kBAAC,GAAD,CACIha,KAAM+Z,EACN1Q,YAAanE,EAAMsR,iBACnBtU,KAAMgD,EAAMuU,YAAYM,GACxBrU,MAAOzH,EAAU2H,QACjBuQ,SAAUjR,EAAMsR,mBAAqBtR,EAAM+U,YAC3C7W,YAAa,GACbiT,eAAgB,EAChBD,iBAAkBlR,EAAMsR,mBAAqBtR,EAAMoU,oBACnDzD,eAAgB3Q,EAAMsR,mBAAqBtR,EAAMoU,oBACjDtD,WAAW,KAGnB6G,EAAe,KAenB,OAZIA,EADA3X,EAAMsR,mBAAqBtR,EAAMoU,oBACjB,wEAA+CpU,EAAMiV,eAArD,0FAIA,4EAEVZ,EAFU,+DAEwErU,EAAMiV,eAF9E,mFAIVZ,EAJU,iEAQZ,yBAAK/T,UAAU,kCACnB,yBAAKA,UAAU,eACX,6BACI,wCACA,yBAAKA,UAAU,sBAAsBhE,IAEzC,yBAAKgE,UAAU,yBACX,yCACCwU,GAGJ6C,EAEC3X,EAAMsR,mBAAqBtR,EAAMoU,oBAC/B,0BAAMhQ,SAjHlB,SAA8BpD,GAE1B,GADAA,EAAEC,iBACEhG,GAAU+E,EAAMiV,eAChBuC,EAAY,mDADhB,CAGO,GAAIvc,EAAS,IAAM,EAK1B,OADA+E,EAAM4X,mBAAmB3c,IAClB,EAJHuc,EAAY,8CA4GJ,2BAAOlT,KAAK,SAAShE,UAAU,eAAexF,KAAK,SAC/CgF,IAAKE,EAAMiV,eAAgBvR,IAAK,IAAK6T,KAAM,EAC3ChT,YAAY,wCACZC,SAjGpB,SAA4BxD,GACxB,IAAM9K,EAAIiG,OAAOC,SAAU4E,EAAEyD,OAA4B1O,OACzDihB,EAAU9gB,MAgGIkY,EAAW,yBAAK9N,UAAU,aAAc8N,GAAmB,KAC7D,yBAAK9N,UAAU,aACX,4BAAQgE,KAAK,SAAShE,UAAU,yBAC5BqE,SAAU1J,EAAS+E,EAAMiV,gBAD7B,qBAEA,4BAAQ3Q,KAAK,SAAShE,UAAU,wBAC5BmB,QA9GxB,WACIzB,EAAM4X,mBAAmB5X,EAAMiV,kBA4Gf,2BAIR,6BACMwC,EAAa,KACX,4BAAQnT,KAAK,SAAShE,UAAU,sBAC5BmB,QArGxB,WACI,IAAM3G,EAAOkF,EAAM/B,YAAY+B,EAAMoU,qBAC/ByD,EAAY7B,GAAGnC,eACjB7T,EAAMuU,YAAYzZ,GAClBkF,EAAMzD,SACNyD,EAAMiV,eACNjV,EAAM/B,YACN+B,EAAMoU,qBAEV,GAAIyD,EAAY7X,EAAMiV,eAClB,MAAM,IAAIxc,MAAM,6DAEpBue,EAAUa,GACVH,GAAU,KAuFM,oBAIFD,EACE,6BACIxc,IAAW+E,EAAMiV,eAAjB,UACGZ,EADH,0DAEGA,EAFH,oDAEiEpZ,EAFjE,aAIK,KAGXwc,EACE,4BAAQnT,KAAK,SAAShE,UAAU,yBAC5BmB,QAhGxB,WACI,IAAKgW,EACD,MAAM,IAAIhf,MAAM,uBAEpBuH,EAAM4X,mBAAmB3c,KA2FT,YAEA,SClJlB6c,GAA8B,SAAC9X,GAAmB,IAAD,EACD6B,oBAAS,GADR,mBAC9CkW,EAD8C,aAMlBlW,oBAAU,IANQ,mBAM9CiF,EAN8C,KAMhC8B,EANgC,KAyDnD,IAAMoP,EAAkBhY,EAAM/B,YAAY+B,EAAMsR,kBAE5CqG,EAAe,KACf3X,EAAMsR,mBAAqBtR,EAAMoU,sBACjCuD,EAAgB,uBAAGrX,UAAU,gBAAb,2CAC8BN,EAAMiV,eADpC,yHAQpB,IAAMgD,EAAoBjY,EAAMzE,aAAa5D,KAAI,SAACX,EAAkBF,GAChE,OAAO,kBAAC,GAAD,CAAU+C,IAAG,eAAU/C,GAAK/B,KAAMiC,EAAKA,KAAKjC,KAAMgB,MAAOiB,EAAKA,KAAKjB,WAG1EmiB,EAAmB,KACvB,GAAIlY,EAAMsR,mBAAqBtR,EAAMuR,mBAAqBvR,EAAMzE,aAAaxE,OAAS,EAClFmhB,EAAmB,qCAChB,GAAIlY,EAAMzE,aAAaxE,OAAS,EACnCmhB,EAAgB,gBAAYlY,EAAM/B,YAAY+B,EAAMuR,mBAApC,iBACb,GAAkC,IAA9BvR,EAAMzE,aAAaxE,OAAc,CACxC,IAAMohB,EAAI5a,EAAeyC,EAAMzE,aAAcyE,EAAM5C,WACnD8a,EAAgB,UAAMC,EAAE1c,OAAR,uBAEhBuE,EAAM5C,UACN8a,GAAgB,gCAA6BlY,EAAM5C,UAAnC,KAEhB8a,GAAgB,qCAIpB,IAAIhD,EAAqB,KACzB,IAAsB,IAAlBpO,EAAqB,CACrB,IAAM9P,EAAOgJ,EAAMuU,YAAYyD,GAAiBxhB,MAAMsQ,GACtD,IAAK9P,EAAKjB,QAAUnB,EAAUY,MAAQwB,EAAKjB,QAAUnB,EAAUa,QAAwC,IAA9BuK,EAAMzE,aAAaxE,OAE3EiJ,EAAMuU,YAAYyD,GACvBthB,UAAUkB,SAASZ,EAAKjC,QAExBmgB,EADAlV,EAAMtC,cAAgB,EACD,yBAAK4C,UAAU,oBAAf,oDACkCtJ,EAAKjC,KADvC,aAIA,yBAAKuL,UAAU,uBAChC,gDADiB,oDACiEtJ,EAAKjC,KADtE,cAQrC,OAAQ,yBAAKuL,UAAU,qBAEnB,kBAAC,GAAD,CACIrC,YAAa+B,EAAM/B,YACnBqT,iBAAkBtR,EAAMsR,iBACxBC,kBAAmBvR,EAAMuR,oBAE3BwG,EAAsBJ,EAAe,KAEvC,yBAAKrX,UAAU,yBACTN,EAAMzE,aAAaxE,OAAS,EAAI,6CAAyB,KACzDiJ,EAAMzE,aAAaxE,OAAS,GAAKiJ,EAAMzE,aAAa,GAAGF,WACrD,2BAAK2E,EAAMzE,aAAa,GAAGE,OAA3B,eAAiDuE,EAAMzE,aAAa,GAAGvE,KAAKjC,KAA5E,aACA,KAEJ,yBAAKuL,UAAU,2BACT2X,IAIV,yBAAK3X,UAAU,yBACX,yBAAKA,UAAU,kBACX,4BAAM4X,IAEV,kBAAC,GAAD,CACIpd,KAAMkd,EACN7T,YAAanE,EAAMsR,iBACnBtU,KAAMgD,EAAMuU,YAAYyD,GACxBxX,MAAOzH,EAAU0H,QACjBwQ,SAAUjR,EAAM+U,cAAgB/U,EAAMsR,iBACtCJ,iBAAkBlR,EAAMoU,sBAAwBpU,EAAMsR,iBACtDX,eAAgB3Q,EAAMuR,oBAAsBvR,EAAMsR,iBAClDR,WAAW,EACXK,eAAgBnR,EAAM9B,YAAY8Z,GAAiBjhB,OACnDmH,YAAa8B,EAAM9B,YAAY8Z,GAC/BjH,eAAiC,IAAlBjK,EAAsB,GAAK,CAACA,GAC3C8J,aAtIZ,SAA0BzM,EAAqB1G,GAEvCmL,EADAnL,IAAcqJ,GACF,EAEDrJ,MAoITyX,EAEF,8BACKlV,EAAMuR,oBAAsBvR,EAAMsR,kBAAoBtR,EAAMzE,aAAaxE,OAAS,EAC/E,4BAAQuN,KAAK,SAAShE,UAAU,uCAC5BqE,UAA4B,IAAlBmC,EACVrF,QAnIpB,WACI,IAAsB,IAAlBqF,EACA,MAAM,IAAIrO,MAAM,oBAGpB,IAAM2f,EAAmBpY,EAAM/B,YAAY+B,EAAMuR,mBAC3C8G,EAAmBrY,EAAMuU,YAAY6D,GACrCE,EAAY,CACd7c,OAAQ2c,EACRphB,KAAMqhB,EAAiB7hB,MAAMsQ,GAC7BzL,WAAYmC,EAA8B6a,EAAkBvR,EAAc9G,EAAMzE,aAAcyE,EAAMtC,gBAGxGsC,EAAM0I,WAAW4P,GAGjB1P,GAAY,KAiHA,aAGA,KACF5I,EAAMuR,oBAAsBvR,EAAMsR,kBAAoBtR,EAAMzE,aAAaxE,OAAS,EAChF,4BAAQuN,KAAK,SAAShE,UAAU,sBAC5BmB,QApHpB,WACI,IAAM2W,EAAmBpY,EAAM/B,YAAY+B,EAAMuR,mBAC3C8G,EAAmBrY,EAAMuU,YAAY6D,GACrC3a,EAAYuY,GAAG3C,SAASgF,EAAkBrY,EAAMzE,aAAcyE,EAAM9B,YAAa8B,EAAM5C,UAAWgb,GACxG,GAAI3a,EAAY,GAAKA,GAAa4a,EAAiB7hB,MAAMO,OACrD,MAAM,IAAI0B,MAAJ,aAAgB2f,EAAhB,+BAAuD3a,EAAvD,sBAEV,IAAM6a,EAAY,CACd7c,OAAQ2c,EACRphB,KAAMqhB,EAAiB7hB,MAAMiH,GAC7BpC,WAAYmC,EAA8B6a,EAAkB5a,EAAWuC,EAAMzE,aAAcyE,EAAMtC,gBAGrGsC,EAAM0I,WAAW4P,KAsGL,WAEA,KAC4B,IAA9BtY,EAAMzE,aAAaxE,OACjB,4BAAQuN,KAAK,SAAShE,UAAU,yBAC5BmB,QAASzB,EAAMuY,eADnB,MAEA,SCpHPC,GAAb,kDACI,WAAYxY,GAAyB,IAAD,sBAChC,cAAMA,GAGN,IAAM9B,EAAc9G,OAAOqhB,YAAY,EAAKzY,MAAM/B,YAAYtG,KAAI,SAACmD,GAC/D,MAAO,CAACA,EAAM,QALc,OAQhC,EAAK8F,MAAQ,CAETJ,MAAOzH,EAAU+P,UAGjByL,YAAa,GACbhY,SAAU,GAGVuX,gBAAiB,KACjBM,oBAAqB,EASrB7C,mBAAoB,EAAKvR,MAAM+U,YAAc,GAAK,EAClDxZ,aAAc,GACd6B,UAAW,KACXc,YAAaA,EAGbwa,YAAa,EACbva,kBAAmB,IAIvB,EAAKwa,UAAY,EAAKA,UAAU5X,KAAf,gBACjB,EAAK6X,sBAAwB,EAAKA,sBAAsB7X,KAA3B,gBAC7B,EAAK8X,uBAAyB,EAAKA,uBAAuB9X,KAA5B,gBAC9B,EAAK+X,sBAAwB,EAAKA,sBAAsB/X,KAA3B,gBAC7B,EAAKgY,eAAiB,EAAKA,eAAehY,KAApB,gBACtB,EAAKiY,gBAAkB,EAAKA,gBAAgBjY,KAArB,gBACvB,EAAKkY,mBAAqB,EAAKA,mBAAmBlY,KAAxB,gBAC1B,EAAKmY,WAAa,EAAKA,WAAWnY,KAAhB,gBAElB,EAAKoY,eAAiB,EAAKA,eAAepY,KAApB,gBACtB,EAAKqY,aAAe,EAAKA,aAAarY,KAAlB,gBAhDY,EADxC,gEAoDyB,IAAD,OAChB9K,KAAKkjB,iBAAiBlV,MAAK,SAACrD,GACnBA,EAGD,EAAKM,SAAS,CACVV,MAAOI,EAAMJ,MAEb+T,YAAa3T,EAAM2T,YACnBhY,SAAUqE,EAAMrE,SAEhBuX,gBAAiBlT,EAAMkT,gBACvBM,oBAAqBxT,EAAMwT,oBAE3B7C,kBAAmB3Q,EAAM2Q,oBAX7B,EAAK6H,oBAvDrB,qCA4EQ/gB,QAAQkV,MAAR,oCAA2CtX,KAAK+J,MAAM3F,OAAtD,sBAA0EpE,KAAK+J,MAAM2W,SAArF,QACA,IAAI0C,EAASlf,KAAKC,UAAU,CACxBoG,MAAOvK,KAAK2K,MAAMJ,MAElB+T,YAAate,KAAK2K,MAAM2T,YACxBhY,SAAUtG,KAAK2K,MAAMrE,SAErBuX,gBAAiB7d,KAAK2K,MAAMkT,gBAC5BM,oBAAqBne,KAAK2K,MAAMwT,oBAEhC7C,kBAAmBtb,KAAK2K,MAAM2Q,oBAElC7F,OAAO4N,aAAaC,QAApB,eAAoCtjB,KAAK+J,MAAM3F,OAA/C,kBAA+DpE,KAAK+J,MAAM2W,UAAY0C,GACtFhhB,QAAQkV,MAAM,8BAzFtB,gKAiGQlV,QAAQkV,MAAR,iEAAwEtX,KAAK+J,MAAM3F,OAAnF,sBAAuGpE,KAAK+J,MAAM2W,SAAlH,UACI0C,EAAS3N,OAAO4N,aAAaE,QAApB,eAAoCvjB,KAAK+J,MAAM3F,OAA/C,kBAA+DpE,KAAK+J,MAAM2W,YAlG/F,wBAoGgB/V,EAAQzG,KAAK2C,MAAMuc,GAEjBI,EAAW,GACjBriB,OAAOK,QAAQmJ,EAAM2T,aAAard,SAAQ,YAAqB,IAAD,mBAAlBuE,EAAkB,KACpDjF,EADoD,KACvCA,MAAMmB,KAAI,SAACX,GAC1B,OAAO,IAAIhB,EAAKgB,EAAKjB,MAAOiB,EAAKjC,SAErC0kB,EAAShe,GAAU,IAAIlF,EAAKC,MAEhCoK,EAAM2T,YAAckF,EAEdC,EAAc9Y,EAAMrE,SAAS5E,KAAI,SAACX,GACpC,OAAO,IAAIhB,EAAKgB,EAAKjB,MAAOiB,EAAKjC,SAErC6L,EAAMrE,SAAWmd,EAEjBrhB,QAAQkV,MAAM3M,GApH1B,kBAqHmBA,GArHnB,eAuHYvI,QAAQkV,MAAM,aAvH1B,kBAwHmB,MAxHnB,oJAiI2B0H,GAAyB,IAAD,OAE3C,GADA5c,QAAQC,OAAOrC,KAAK2K,MAAMJ,QAAUzH,EAAUgM,kBACzC9O,KAAK2K,MAAMkT,gBACZ,MAAM,IAAIrb,MAAM,sCAEpB,GAAIwc,EAAiBhf,KAAK2K,MAAMkT,gBAAgB7Y,OAC5C,MAAM,IAAIxC,MAAM,sCAGpB,IAAM4b,EAAqBpe,KAAK2K,MAAMkT,gBAAgBrY,OAEhDyY,EAAmB,CACrBzY,OAAQ4Y,EACRpZ,OAAQga,GAIN0E,EAAW1jB,KAAK2K,MAAM2T,YAAYF,GAAoB7d,MACtDwc,EAAQ,sBAAO2G,GAAP,YAAoB1jB,KAAK2K,MAAMrE,WACvCqd,EAAiBxiB,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAM2T,aACpDqF,EAAevF,GAAsB,IAAI9d,EAAKyc,GAE9C/c,KAAKiL,SAAS,CACV4S,gBAAiBI,EACjB1T,MAAOzH,EAAUkN,iBACjBsO,YAAaqF,IACd,WACC,EAAKR,oBA5JjB,qCAoKmBd,GACX,IAAMnU,EAAclO,KAAK+J,MAAM/B,YAAYqF,QAAQgV,EAAU7c,QAC7D,GAAI0I,IAAgBlO,KAAK2K,MAAM2Q,kBAC3B,MAAM,IAAI9Y,MAAM,iEAGpB,GAAIxC,KAAK2K,MAAMrF,aAAaxE,QAAU,EAClC,MAAM,IAAI0B,MAAM,4EAGpB,IAAMgF,EAAYxH,KAAK2K,MAAM2T,YAAY+D,EAAU7c,QAAQxE,SAASqhB,EAAUthB,MAC9E,IAAmB,IAAfyG,EACA,MAAM,IAAIhF,MAAJ,2BAA8B6f,EAAUthB,KAAxC,sBAA0DshB,EAAU7c,OAApE,YAGV,IAAM0D,EAAalJ,KAAK+J,MAAM/B,YAAYkG,GACpCnN,EAAOf,KAAK2K,MAAM2T,YAAYpV,GAAY3I,MAAMiH,GACtDpF,QAAQsL,IAAR,iBAAsB1N,KAAK2K,MAAM8X,YAAjC,aAAiDvZ,EAAjD,oBAAuEnI,IAEvE,IACMqE,EAAamC,EADMvH,KAAK2K,MAAM2T,YAAYpV,GACmB1B,EAAWxH,KAAK2K,MAAMrF,aAActF,KAAK2K,MAAM8X,aAClH,IAAKrd,GAAcid,EAAUjd,WACzB,MAAM,IAAI5C,MAAM,oEACb,GAAI4C,IAAeid,EAAUjd,WAChC,MAAM,IAAI5C,MAAM,mFACT4C,GACPhD,QAAQkV,MAAR,UAAiBpO,EAAjB,mCAAsDnI,EAAKjC,OAI/D,IAAMwG,EAAetF,KAAK2K,MAAMrF,aAAagK,QAC7ChK,EAAapE,KAAKmhB,GAGlB,IAAMtF,EAAW/c,KAAK2K,MAAM2T,YAAYpV,GAAY3I,MAAM+O,QAC1DyN,EAASnN,OAAOmN,EAAS1P,QAAQtM,GAAO,GACxC,IAAMud,EAAcnd,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAM2T,aAGjD,GAFAA,EAAYpV,GAAc,IAAI5I,EAAKyc,GAEP,IAAxBzX,EAAaxE,OAAc,CAC3B,IAAMoR,EAAS5K,EAAehC,EAActF,KAAK2K,MAAMxD,WACjDyc,EAAqB5jB,KAAK+J,MAAM/B,YAAYqF,QAAQ6E,EAAO1M,QAKjExF,KAAKiL,SAAS,CACV3F,aAAcA,EACdgZ,YAAaA,EACbhD,kBAAmBsI,QAEpB,CACH,IAAMC,GAAc7jB,KAAK2K,MAAM2Q,kBAAoB,GAAK,EACpDpT,EAAoBlI,KAAK2K,MAAMzC,kBAChC9C,IAEM8D,KADLhB,EAAoB/G,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAMzC,sBAE7CA,EAAkBgB,GAAc,IAEpChB,EAAkBgB,GAAYhI,KAAKH,EAAKjC,OAE5CkB,KAAKiL,SAAS,CACV3F,aAAcA,EACdgW,kBAAmBuI,EACnB1c,UAAW/B,EAAarE,EAAKjC,KAAOkB,KAAK2K,MAAMxD,UAC/Ce,kBAAmBA,EACnBoW,YAAaA,OAtO7B,2CAgP0B,IAAD,OACXpM,EAAS5K,EAAetH,KAAK2K,MAAMrF,aAActF,KAAK2K,MAAMxD,WAC5Dyc,EAAqB5jB,KAAK+J,MAAM/B,YAAYqF,QAAQ6E,EAAO1M,QAE3DyM,EAAa,GACnB9Q,OAAOqF,OAAOyL,EAAYjS,KAAK2K,MAAM1C,aACrC,IAAM6b,EAAoB9jB,KAAK+J,MAAM/B,YAAY4b,GACjD3R,EAAW6R,GAAmB5iB,KAAKlB,KAAK2K,MAAMrF,cAC9ClD,QAAQsL,IAAR,iBAAsB1N,KAAK2K,MAAM8X,YAAjC,aAAiDqB,EAAjD,6CACA,IAAIC,GAAqB,EAEkC,IAAvD/jB,KAAK2K,MAAM2T,YAAYpM,EAAO1M,QAAQjF,MAAMO,SAE5CijB,GAAqB,GAGzB/jB,KAAKiL,SAAS,CACV3F,aAAc,GACdgW,kBAAmBsI,EACnB3b,YAAagK,EACb1H,MAAOwZ,EAAqBjhB,EAAUkhB,QAAUlhB,EAAU0H,QAC1DiY,YAAaziB,KAAK2K,MAAM8X,YAAc,IACvC,WACC,GAAIsB,EAAoB,CACpB,IAAK,EAAKpZ,MAAMkT,gBACZ,MAAM,IAAIrb,MAAM,yCAIpB,IAAMyhB,EAAclc,EAChB,EAAKgC,MAAM/B,YACX,EAAK2C,MAAM1C,YACX,EAAK0C,MAAMzC,kBACX,EAAKyC,MAAMkT,iBAGf,EAAK9T,MAAMma,cAAcphB,EAAUkhB,QAASC,EAAYnb,aApRxE,mCAgSQ,IADA,IAAIG,EAAoC,GAC/BpI,EAAI,EAAGA,EAAIb,KAAK+J,MAAM/B,YAAYlH,OAAQD,IAAK,CACpD,IAAIqI,EAAalJ,KAAK+J,MAAM/B,YAAYnH,GACpCA,IAAMb,KAAK+J,MAAM+U,YACjB7V,EAAOC,IAAe,IAEtBD,EAAOC,GAAc,EAG7BlJ,KAAKijB,aACLjjB,KAAK+J,MAAMoa,YAAYlb,GAAQ,KAzSvC,kCA4SiB,IAAD,OACR7G,QAAQsL,IAAI,oBAKZ,IAJA,IAAM0W,EAAO,IAAIpiB,EAAKhC,KAAK+J,MAAM9H,YAG3BqE,EAAW,GACTzF,EAAI,EAAGA,EAAI,EAAGA,IAClByF,EAASpF,KAAKkjB,EAAK7hB,OAKvB,IADA,IAAM+b,EAAc,GACZzd,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGvB,IAFA,IAAMgE,EAAO7E,KAAK+J,MAAM/B,YAAYnH,GAC9BwjB,EAAY,GACV5f,EAAI,EAAGA,EAAI,EAAGA,IAClB4f,EAAUnjB,KAAKkjB,EAAK7hB,OAExB,IAAMwE,EAAO,IAAIzG,EAAK+jB,GACtB/F,EAAYzZ,GAAQkC,EAGxB/G,KAAKiL,SAAS,CACV3E,SAAUA,EACViE,MAAOzH,EAAU2H,QACjB6T,YAAaA,IACd,WACC,EAAKvU,MAAMma,cAAcphB,EAAU2H,SACnCrI,QAAQsL,IAAI,yBACZ,EAAKyV,oBAzUjB,4CAmV0BmB,GAA0C,IAAD,OAC3DliB,QAAQC,OAAOrC,KAAK2K,MAAMJ,QAAUzH,EAAUkN,kBAC9C5N,QAAQC,OAAgD,IAAzClB,OAAO4E,KAAKue,GAAkBxjB,QAC7CsB,QAAQC,OAAsC,IAA/BrC,KAAK2K,MAAMrE,SAASxF,QASnC,IAPA,IAAMsd,EAAqBpe,KAAK+J,MAAM/B,YAAYhI,KAAK2K,MAAMwT,qBAGvDoG,EAAgBvkB,KAAK2K,MAAM2T,YAAYF,GAAoB7d,MAE3DojB,EAAiBxiB,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAM2T,aAEpD,MAA0Bnd,OAAOK,QAAQ8iB,GAAzC,eAA4D,CAAC,IAAD,sBAAjDzf,EAAiD,KAA3C9D,EAA2C,KACxD,GAAI8D,IAASuZ,EACT,MAAM,IAAI5b,MAAM,kCAGpB,IAAM3B,EAAI0jB,EAAclX,QAAQtM,GAChC,IAAW,IAAPF,EACA,MAAM,IAAI2B,MAAM,wCAGpB,KAAIqC,KAAQ8e,GASR,MAAM,IAAInhB,MAAJ,eAAkBqC,EAAlB,4BAPN,IAAMtE,EAAQojB,EAAe9e,GAAMtE,MAAM+O,QACzC/O,EAAMW,KAAKH,GACX4iB,EAAe9e,GAAQ,IAAIvE,EAAKC,GAGhCgkB,EAAc3U,OAAO/O,EAAG,GAShC8iB,EAAevF,GAAsB,IAAI9d,EAAKikB,GAE9CvkB,KAAKiL,SAAS,CACVqT,YAAaqF,EACbpZ,MAAOzH,EAAU0H,QAEjB8Q,kBAAmBtb,KAAK2K,MAAMwT,sBAC/B,WACC,EAAKgF,oBAjYjB,mCAqYwB,IAAD,OACTlb,EAAc9G,OAAOqhB,YAAYxiB,KAAK+J,MAAM/B,YAAYtG,KAAI,SAACmD,GAC/D,MAAO,CAACA,EAAM,QAGlB7E,KAAKiL,SAAS,CAEVV,MAAOzH,EAAU+P,UAGjBvM,SAAU,GACVgY,YAAa,GAGbT,gBAAiB,KACjBM,qBAAsB,EAKtB7C,mBAAoB,EACpBhW,aAAc,GACd6B,UAAW,KACXc,YAAaA,EACbwa,YAAa,EACbva,kBAAmB,KACpB,WACC,EAAKib,oBAhajB,4CAwa0BxV,GAA+B,IAAD,OAEhD,GADAvL,QAAQsL,IAAI,uBACTC,EAAY,CACX,IAAM9M,EAAIb,KAAK+J,MAAM/B,YAAYqF,QAAQM,EAAWnI,QACpDxF,KAAKiL,SAAS,CACV4S,gBAAiBlQ,EACjBwQ,oBAAqBtd,EACrB0J,MAAOzH,EAAUgM,kBAClB,WACC,EAAK/E,MAAMma,cAAcphB,EAAUgM,iBACnC,EAAKqU,uBAGTnjB,KAAK+J,MAAMoa,YAAY,IAAI,GAC3BnkB,KAAKijB,eAtbjB,sCA0boBha,GACZjJ,KAAK+J,MAAMoa,YAAYlb,GAAQ,GAC/BjJ,KAAKijB,eA5bb,+BAgcQ,OAAOjjB,KAAK2K,MAAMJ,OACd,KAAKzH,EAAU+P,UACX,OAAO,yBAAKxI,UAAU,gBAClB,kBAAC,GAAD,CACIrC,YAAahI,KAAK+J,MAAM/B,YACxBqT,iBAAkBrb,KAAK+J,MAAMsR,iBAC7BC,kBAAmBtb,KAAK+J,MAAM+U,cAClC,yBAAKzU,UAAU,gBAEPrK,KAAK+J,MAAMya,eAAiB,EAC5B,+EACA,KAEFxkB,KAAK+J,MAAM/B,YAAYhI,KAAK+J,MAAM+U,aANxC,gBAQA,yBAAKzU,UAAU,oBACX,4BAAQgE,KAAK,SAAShE,UAAU,yBAC5BmB,QAASxL,KAAK0iB,WADlB,UAKZ,KAAK5f,EAAU2H,QACX,OAAO,kBAAC,GAAD,CACHzC,YAAahI,KAAK+J,MAAM/B,YACxB8W,YAAa9e,KAAK+J,MAAM+U,YACxBR,YAAate,KAAK2K,MAAM2T,YACxB1Q,YAAa5N,KAAK2iB,sBAClBtH,iBAAkBrb,KAAK+J,MAAMsR,mBAErC,KAAKvY,EAAUgM,gBACX,IAAK9O,KAAK2K,MAAMkT,gBACZ,MAAM,IAAIrb,MAAM,wDAEpB,OAAO,kBAAC,GAAD,CAEH6Y,iBAAkBrb,KAAK+J,MAAMsR,iBAC7BrT,YAAahI,KAAK+J,MAAM/B,YACxB8W,YAAa9e,KAAK+J,MAAM+U,YAExBR,YAAate,KAAK2K,MAAM2T,YACxBH,oBAAqBne,KAAK2K,MAAMwT,oBAChCa,eAAgBhf,KAAK2K,MAAMkT,gBAAgB7Y,OAC3CsB,SAAUtG,KAAK2K,MAAMrE,SACrBqb,mBAAoB3hB,KAAK4iB,yBAEjC,KAAK9f,EAAUkN,iBACX,IAAKhQ,KAAK2K,MAAMkT,gBACZ,MAAM,IAAIrb,MAAM,yDAGpB,OAAO,kBAAC,GAAD,CAEH6Y,iBAAkBrb,KAAK+J,MAAMsR,iBAC7BrT,YAAahI,KAAK+J,MAAM/B,YACxB8W,YAAa9e,KAAK+J,MAAM+U,YAExBR,YAAate,KAAK2K,MAAM2T,YACxBH,oBAAqBne,KAAK2K,MAAMwT,oBAChCa,eAAgBhf,KAAK2K,MAAMkT,gBAAgB7Y,OAC3CkL,aAAclQ,KAAK6iB,wBAE3B,KAAK/f,EAAU0H,QAEX,IAAIxK,KAAK2K,MAAMkT,gBACX,MAAM,IAAIrb,MAAM,0CAGpB,OAAO,kBAAC,GAAD,CAEHwF,YAAahI,KAAK+J,MAAM/B,YACxBqT,iBAAkBrb,KAAK+J,MAAMsR,iBAC7ByD,YAAa9e,KAAK+J,MAAM+U,YAGxBX,oBAAqBne,KAAK2K,MAAMwT,oBAChCa,eAAgBhf,KAAK2K,MAAMkT,gBAAgB7Y,OAC3CsZ,YAAate,KAAK2K,MAAM2T,YACxBhZ,aAActF,KAAK2K,MAAMrF,aACzBgW,kBAAmBtb,KAAK2K,MAAM2Q,kBAC9BrT,YAAajI,KAAK2K,MAAM1C,YACxBd,UAAWnH,KAAK2K,MAAMxD,UACtBM,cAAezH,KAAK2K,MAAM8X,YAG1BhQ,WAAYzS,KAAK8iB,eACjBR,cAAetiB,KAAKgjB,qBAG5B,KAAKlgB,EAAUkhB,QACX,IAAIhkB,KAAK2K,MAAMkT,gBACX,MAAM,IAAIrb,MAAM,0CAEpB,OAAO,kBAAC,GAAD,CACH2F,SAAUnI,KAAK2K,MAAMkT,gBACrBM,oBAAqBne,KAAK2K,MAAMwT,oBAChClW,YAAajI,KAAK2K,MAAM1C,YACxBC,kBAAmBlI,KAAK2K,MAAMzC,kBAC9BF,YAAahI,KAAK+J,MAAM/B,YACxBqY,SAAUrgB,KAAK+iB,kBAEvB,QACI,OAAO,kDAAwB/iB,KAAK2K,MAAMJ,YAriB1D,GAAwCmB,iBC5DlC2I,GAAkC,SAACtK,GAQrC,IANA,IAAMmL,E1B2cH,SAAuBlM,EAAyCpE,GAEnE,IADA,IAAM6f,EAAe1b,EAAgBC,EAAcpE,GACnD,MAAkBzD,OAAOC,OAAOqjB,GAAhC,eAA+C,CAC3C,GADU,MACG,IACT,OAAO,EAGf,OAAO,E0BldYC,CAAc3a,EAAMd,OAAQc,EAAM4a,aAAe,GAE9DC,EAAoB7a,EAAM/B,YAAYtG,KAAI,SAACmD,GAC7C,OAAO,wBAAIjB,IAAG,qBAAgBiB,IAAUA,MAEtC0P,EAAmB,GACjB3P,EAAQ,EAAGA,EAAQmF,EAAM4a,aAAc/f,IAC3C2P,EAAOrT,KAAK0D,GAGhB,IAAM4P,EAAYD,EAAO7S,KAAI,SAACkD,GAC1B,IAAM6P,EAAW1K,EAAM/B,YAAYtG,KAAI,SAACmD,GACpC,OAAO,wBAAIjB,IAAG,oBAAeiB,EAAf,kBAA6BD,IAAWmF,EAAMd,OAAOpE,GAAMD,IAAU,MAEjF8P,EAAqB,GAU3B,OATI3K,EAAM4a,aAAe,IAAM/f,IAEvBsQ,EACAR,EAAQxT,KAAK,iBAGbwT,EAAQxT,KAAK,kBAGb,wBAAI0C,IAAG,oBAAegB,GAASyF,UAAWqK,EAAQvK,KAAK,MAC3D,4BAAMvF,GAAS,SACd6P,MAQT,OAAQ,yBAAKpK,UAAU,mCAAmCkH,GAAG,mBAAmBsT,aAAW,OACvFC,UAAW,EAAGC,MALJ,CACVC,QAAS,UAKT,yBAAK3a,UAAU,sCACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,eAAd,iBACA,4BAAQgE,KAAK,SAAShE,UAAU,QAAQ4a,eAAa,QACjDC,aAAW,QAAQ1Z,QAAU,SAACT,GAAD,OAAOhB,EAAMob,cAC1C,0BAAMC,cAAY,QAAlB,UAGR,yBAAK/a,UAAU,cACX,2BAAOA,UAAU,iBAAiBkH,GAAG,iBACjC,+BACI,4BACI,qCACCqT,IAGT,+BACKpQ,KAIb,yBAAKnK,UAAU,gBACX,4BAAQgE,KAAK,SAAShE,UAAU,oBAAoB4a,eAAa,QAC7DzZ,QAAU,SAACT,GAAD,OAAOhB,EAAMob,cAD3B,cCzEdE,I,MAAqB,SAACtb,GACxB,IAAMub,EAAU7P,OAAO+B,SAAS+N,KAWhC,SAASC,EAAYza,GACjBA,EAAEC,iBAEF,IACMua,EADM,IAAIjiB,IAAKyH,EAAEyD,OAA6BlD,MACnCia,KACbxb,EAAM0b,WACN1b,EAAM0b,WAAWF,GAfzB,SAA8BG,GAC1BtjB,QAAQkV,MAAM,wCACd,IAAMjU,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MACpCjI,EAAIkiB,KAAOG,EACXtjB,QAAQkV,MAAR,sBAA6BoO,IAC7BjQ,OAAO+B,SAASlM,KAAOjI,EAAIjD,WAC3BqV,OAAO+B,SAASmO,SAWZC,CAAqBL,GAI7B,OAAQ,yBAAKlb,UAAU,gDAAgDkH,GAAG,mBACtE,uBAAGlH,UAAU,eAAeiB,KAAK,WAAWE,QAASga,GAArD,YAEA,4BAAQnb,UAAU,iBAAiBgE,KAAK,SAASuG,cAAY,WAAWC,cAAY,0BAChFE,gBAAc,yBAAyBD,gBAAc,QAAQoQ,aAAW,qBACxE,0BAAM7a,UAAU,yBAKpB,yBAAKA,UAAU,2BAA2BkH,GAAG,0BACzC,wBAAIlH,UAAU,sBAERN,EAAM3F,OACJ,wBAAIiG,UAAU,YACV,uBAAGA,UAAwB,mBAAZib,EAA+B,kBAAoB,WAAaha,KAAK,iBAAiBE,QAASga,GAA9G,SAEJ,KAEJ,wBAAInb,UAAU,YACV,uBAAGA,UAAwB,WAAZib,EAAuB,kBAAoB,WAAaha,KAAK,SAASE,QAASga,GAA9F,eCxDdK,GAA0B,SAAC9b,GAC7B,OAAO,+BCyJX,IAAM+b,GAAkB,CAAC,QAAS,QAAS,UAAW,QAAS,SAKlDC,GAAb,kDACI,WAAYhc,GAAyB,IAAD,sBAGhC,IAAM/B,EA1Jd,SAAwBkB,GACpB,IAAKA,EACD,MAAM,IAAI1G,MAAM,+BAIpBiT,OAAO4N,aAAaC,QAAQ,aAAcpa,GAE1C,IAAIrI,EAAIilB,GAAgBzY,QAAQnE,GAG1B8c,EAAa,UAAOF,IACtBjlB,GAAK,GACLmlB,EAAcpW,OAAO/O,EAAG,GAQ5B,IAFA,IAAMmH,EAAc,CAACkB,GAEdlB,EAAYlH,OAAS,GAAG,CAC3BD,EAAI0a,GAAQ,EAAGyK,EAAcllB,QADF,MAEdklB,EAAcpW,OAAO/O,EAAG,GAAhCgE,EAFsB,oBAG3BmD,EAAY9G,KAAK2D,GAGrB,OAAOmD,EA+HiBsN,EAFpB,cAAMvL,IAEkCA,MAAMb,YACxCD,EA7Hd,SAA0BjB,GAEtB,IAAMiB,EAAS,GAKf,OAHAjB,EAAY/G,SAAQ,SAAC4D,GACjBoE,EAAOpE,GAAQ,CAAC,MAEboE,EAsHYgd,CAAiBje,GAG1BqT,EAAmBrT,EAAYqF,QAAQtD,EAAMb,YAPnB,OAShC,EAAKyB,MAAQ,CACTub,aAAa,EACbhR,YAAY,EACZlN,YAAaA,EACb8W,YAAa,EACb7V,OAAQA,EACRkd,eAAgB,GAChBvhB,MAAO,EACPwhB,iBAAiB,EACjB/K,iBAAkBA,EAClBmJ,eAAgB,EAChBja,MAAOzH,EAAU+P,UAGjBwT,oBAAoB,EAEpBC,kBAAkB,EAGlBrkB,WAAY,GAIhB,EAAKkiB,YAAc,EAAKA,YAAYrZ,KAAjB,gBACnB,EAAKyb,cAAgB,EAAKA,cAAczb,KAAnB,gBACrB,EAAK0b,cAAgB,EAAKA,cAAc1b,KAAnB,gBACrB,EAAK2b,cAAgB,EAAKA,cAAc3b,KAAnB,gBACrB,EAAK4b,kBAAoB,EAAKA,kBAAkB5b,KAAvB,gBACzB,EAAK6b,0BAA4B,EAAKA,0BAA0B7b,KAA/B,gBArCD,EADxC,4DA2CQ,IAAM8b,EAAe1iB,KAAKC,UAAUnE,KAAK2K,OACzC8K,OAAO4N,aAAaC,QAApB,eAAoCtjB,KAAK+J,MAAM3F,QAAUwiB,GACzDxkB,QAAQkV,MAAR,oCAA2CtX,KAAK+J,MAAM3F,WA7C9D,sCAqDQhC,QAAQkV,MAAR,sEAA6EtX,KAAK+J,MAAM3F,OAAxF,QAEA,IAAIwiB,EAAenR,OAAO4N,aAAaE,QAApB,eAAoCvjB,KAAK+J,MAAM3F,SAClE,GAAIwiB,EAAc,CACdxkB,QAAQkV,MAAR,mDACA,IAAMuP,EAAiB3iB,KAAK2C,MAAM+f,GAelC,OAdAxkB,QAAQkV,MAAMuP,GACd7mB,KAAKiL,SAAS,CACVjD,YAAY,YAAK6e,EAAe7e,aAChCqT,iBAAkBwL,EAAexL,iBACjCyD,YAAa+H,EAAe/H,YAC5Bla,MAAOiiB,EAAejiB,MACtBqE,OAAQ4d,EAAe5d,OACvBub,eAAgBqC,EAAerC,eAC/B6B,mBAAoBQ,EAAeR,qBAAsB,EACzDnR,WAAY2R,EAAe3R,aAAc,EACzCiR,eAAgBU,EAAeV,gBAAkB,GAEjDD,aAAa,KAEV,EAKP,OAHAlmB,KAAKiL,SAAS,CACVib,aAAa,KAEV,IA9EnB,0CAmFalmB,KAAKwmB,kBACNpkB,QAAQkV,MAAR,gDAAuDtX,KAAK+J,MAAM3F,SAClEpE,KAAKumB,mBArFjB,sCAgGQ,IADA,IAAItd,EAAoC,GAC/BpI,EAAI,EAAGA,EAAIb,KAAK2K,MAAM3C,YAAYlH,OAAQD,IAAK,CACpD,IAAIqI,EAAalJ,KAAK2K,MAAM3C,YAAYnH,GACpCA,IAAMb,KAAK2K,MAAMmU,YACjB7V,EAAOC,IAAe,IAEtBD,EAAOC,GAAc,EAG7B,OAAOD,IAxGf,kCAqHgBgb,EAAsC6C,GAA6B,IAAD,OAC1E,GAAI9mB,KAAK2K,MAAMuK,WACX,MAAM,IAAI1S,MAAM,yDAGpB,GAAIskB,GAAe9mB,KAAK2K,MAAM6Z,eAAiB,EAC3CpiB,QAAQsL,IAAR,gBAAqB1N,KAAK2K,MAAM/F,MAAhC,iBACA5E,KAAKiL,SAAS,CACVuZ,eAAgBxkB,KAAK2K,MAAM6Z,eAAiB,IAC7C,WACCpiB,QAAQsL,IAAR,wCAA6C,EAAK/C,MAAM6Z,iBACxD,EAAK+B,wBAEN,GAAIO,GAA6C,IAA9B9mB,KAAK2K,MAAM6Z,eACjCpiB,QAAQsL,IAAI,yBACZuW,EAAcjkB,KAAKymB,oBAChB,CAEHrkB,QAAQC,OAAOrC,KAAK2K,MAAM/F,MAAQ,GAClCxC,QAAQkV,MAAR,gBAAuBtX,KAAK2K,MAAM/F,MAAlC,cAIA,IAFA,IAAMmiB,EAAkB5lB,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAM1B,QAErD,MAAkB9H,OAAO4E,KAAKke,GAA9B,eAA4C,CAAxC,IAAMpf,EAAI,KAGLkiB,EAAgBliB,GAAM7E,KAAK2K,MAAM/F,MAAQ,KAC1CmiB,EAAgBliB,GAAM7E,KAAK2K,MAAM/F,MAAQ,GAAK,GAKtD,IAhBG,EAgBGoiB,EAAsB3d,EAAa0d,EAAiB9C,EAAajkB,KAAK2K,MAAM/F,MAAQ,GAhBvF,cAkBgB5E,KAAK2K,MAAM3C,aAlB3B,IAkBH,2BAA2C,CAAC,IAAnCxC,EAAkC,QACvCuhB,EAAgBvhB,GAAQxF,KAAK2K,MAAM/F,OAASoiB,EAAoBxhB,IAnBjE,8BAuBH,IAvBG,EAuBG2gB,EAAiB,GACnBjR,GAAa,EAxBd,cAyBgBlV,KAAK2K,MAAM3C,aAzB3B,IAyBH,2BAA2C,CAAC,IAAnCxC,EAAkC,QACnCuhB,EAAgBvhB,GAAQxF,KAAK2K,MAAM/F,QAAU,MAC7CxC,QAAQkV,MAAR,iBAAwB9R,EAAxB,sBACA2gB,EAAejlB,KAAKsE,GACpB0P,GAAa,IA7BlB,8BAiCHlV,KAAKiL,SAAS,CACVhC,OAAQ8d,EACRniB,MAAO5E,KAAK2K,MAAM/F,MAAQ,EAE1B2F,MAAOzH,EAAU+P,UACjBiM,aAAc9e,KAAK2K,MAAMmU,YAAc,GAAK,EAC5C0F,eAAgB,EAChB2B,eAAgBA,EAChBjR,WAAYA,IACb,WACC,EAAKqR,sBAhLrB,wCAyLsBU,EAAqBhD,GACnC,GAAIjkB,KAAK2K,MAAMuK,WACX,MAAM,IAAI1S,MAAM,yDAIpB,IAAIukB,EAAkB/mB,KAAK2K,MAAM1B,OAEjC,GAAIge,IAAankB,EAAUkhB,SAAWC,EAAa,CAC/C7hB,QAAQkV,MAAM,oCAGdlV,QAAQC,OAAOrC,KAAK2K,MAAM/F,MAAQ,GAGlCmiB,EAAkB5lB,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAM1B,QAE/C,IAAI,IAAJ,MAAkB9H,OAAO4E,KAAKke,GAA9B,eAA4C,CAAxC,IAAMpf,EAAI,KAGLkiB,EAAgBliB,GAAM7E,KAAK2K,MAAM/F,MAAQ,KAC1CmiB,EAAgBliB,GAAM7E,KAAK2K,MAAM/F,MAAQ,GAAK,GAItD,IAjB+C,EAiBzCoiB,EAAsB3d,EAAa0d,EAAiB9C,EAAajkB,KAAK2K,MAAM/F,MAAQ,GAjB3C,cAkB5B5E,KAAK2K,MAAM3C,aAlBiB,IAkB/C,2BAA2C,CAAC,IAAnCxC,EAAkC,QACvCuhB,EAAgBvhB,GAAQxF,KAAK2K,MAAM/F,OAASoiB,EAAoBxhB,IAnBrB,+BAuBnDxF,KAAKiL,SAAS,CACVV,MAAO0c,EAEPhe,OAAQ8d,MA3NpB,iDA+NgC,IAAD,OACvB/mB,KAAKiL,SAAS,CACVob,oBAAoB,IACrB,WACC,EAAKE,qBAnOjB,gDAuO8BW,GACtBlnB,KAAKiL,SAAS,CACVqb,iBAAkBY,MAzO9B,+BA6O2B,IAAD,OACdC,EAAW,KA4Bf,OAzBIA,EADAnnB,KAAK2K,MAAMub,cAAgBlmB,KAAK2K,MAAMuK,WAC3B,kBAAC,GAAD,CACPjT,WAAYjC,KAAK2K,MAAM1I,WACvBmC,OAAQpE,KAAK+J,MAAM3F,OACnBsc,SAAU1gB,KAAK2K,MAAM/F,MACrBwhB,gBAAiBpmB,KAAK2K,MAAMyb,gBAC5Bpe,YAAahI,KAAK2K,MAAM3C,YACxB8W,YAAa9e,KAAK2K,MAAMmU,YACxBqF,YAAankB,KAAKmkB,YAClBK,eAAgBxkB,KAAK2K,MAAM6Z,eAC3BnJ,iBAAkBrb,KAAK2K,MAAM0Q,iBAC7B6I,cAAelkB,KAAK0mB,oBACjB1mB,KAAK2K,MAAMuK,WACN,6BACR,0CACA,gDAEA,2BAC0C,IAArClV,KAAK2K,MAAMwb,eAAerlB,OAA1B,wBAA0Dd,KAAK2K,MAAMwb,eAAe,GAApF,uCAC8BnmB,KAAK2K,MAAMwb,eAAehc,KAAK,MAD7D,OAKE,kBAAC,GAAD,MAGP,yBAAKE,UAAU,WACnB,gCACI,kBAAC,GAAD,CAAQjG,OAAQpE,KAAK+J,MAAM3F,OACvBqhB,WAAYzlB,KAAK+J,MAAMqd,cAE/B,0BAAM/c,UAAU,aACZ,yBAAKA,UAAU,sBACX,4BAAQgE,KAAK,SAAShE,UAAU,sBAC5BuK,cAAY,QACZC,cAAY,oBACZrJ,QAAU,SAACT,GAAD,OAAO,EAAK4b,2BAA2B,EAAKhc,MAAM2b,oBAC1DtmB,KAAK2K,MAAM2b,iBAAmB,iBAAmB,mBAGzDtmB,KAAK2K,MAAM2b,iBACT,6BAEI,kBAAC,GAAD,CAAW3B,aAAc3kB,KAAK2K,MAAMJ,QAAUzH,EAAUkhB,QAAUhkB,KAAK2K,MAAM/F,MAAQ,EAAI5E,KAAK2K,MAAM/F,MAChGoD,YAAahI,KAAK2K,MAAM3C,YACxBiB,OAAQjJ,KAAK2K,MAAM1B,OACnBkc,UAAW,kBAAM,EAAKwB,2BAA0B,MACpD,yBAAKtc,UAAU,2BACXmB,QAAS,kBAAM,EAAKmb,2BAA0B,OAEtD,KACFQ,QAnSlB,GAAmCzb,iBCnJtB2b,GAAb,kDACI,WAAYtd,GAAsB,IAAD,sBAC7B,cAAMA,GACN,IAAMa,EAA2C,qBAAtBb,EAAMa,aAAsCb,EAAMa,YAFhD,OAG7B,EAAKD,MAAQ,CACTC,YAAaA,GAEjB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANO,EADrC,2DAUmBC,GACXA,EAAEC,iBACFhL,KAAKiL,SAAS,CACVL,aAAc5K,KAAK2K,MAAMC,gBAbrC,+BAiBc,IAAD,OACC+K,EAAU3V,KAAK+J,MAAM/B,YAAYtG,KAAI,SAAC8D,EAAgB3E,GACxD,OAAO,wBAAI+C,IAAG,iBAAY/C,IAAO2E,MAErC,OAAQ,yBAAK6E,UAAU,0BACnB,4BACI,uBAAGiB,KAAK,6BAA6BC,KAAK,SAASqJ,cAAY,WAAWC,cAAY,6BAClFC,iBAAiB9U,KAAK2K,MAAMC,YAAcmK,gBAAc,4BACxDvJ,QAAS,SAACT,GAAD,OAAO,EAAKF,eAAeE,KACpC,yCACE/K,KAAK2K,MAAMC,YAAc,iDAAiC,OAIlE5K,KAAK2K,MAAMC,YACT,KACA,yBAAK2G,GAAG,6BACHvR,KAAK+J,MAAM/B,YAAYlH,OAAS,EAC7B,4BACK6U,GAEL,4DAtCxB,GAAqClK,IAAMC,eAwD9B4b,GAAb,kDACI,WAAYvd,GAAwB,IAAD,sBAC/B,cAAMA,GAEN,IAAMa,EAA2C,qBAAtBb,EAAMa,aAAsCb,EAAMa,YAH9C,OAI/B,EAAKD,MAAQ,CACTC,YAAaA,GAGjB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBARS,EADvC,2DAYmBC,GACXA,EAAEC,iBACFhL,KAAKiL,SAAS,CACVL,aAAe5K,KAAK2K,MAAMC,gBAftC,+BAmBc,IAAD,OACL,OAAQ,yBAAKP,UAAU,6BACnB,yBAAKkH,GAAG,oBACJ,4BACI,uBAAGjG,KAAK,sBAAsBC,KAAK,SAASqJ,cAAY,WAAWC,cAAY,sBAC3EC,gBAAgB9U,KAAK2K,MAAMC,YAAcmK,gBAAc,qBACvDvJ,QAAS,SAACT,GAAD,OAAO,EAAKF,eAAeE,KAChC,2CACE/K,KAAK2K,MAAMC,YAAc,iDAAiC,QAK1E5K,KAAK2K,MAAMC,YACT,KACA,yBAAK2G,GAAG,qBAAqBgW,kBAAgB,oBACzC,wCAAcvnB,KAAK+J,MAAM4N,SAAS/S,MAAlC,KACA,+CAAqB5E,KAAK+J,MAAM4N,SAAS6P,QAAzC,KACA,+CAAqBxnB,KAAK+J,MAAM4N,SAASX,WAAa,MAAQ,KAA9D,WArCpB,GAAkCvL,IAAMC,eAqD3BuJ,GAAb,kDACI,WAAYlL,GAAgB,IAAD,8BACvB,cAAMA,IAED0d,kBAAoB,EAAKA,kBAAkB3c,KAAvB,gBAHF,EAD/B,8DAOsBC,EAAyBnG,MAP/C,+BAYc,IAAD,OACC2P,EAASvU,KAAK+J,MAAMwK,OAAO7S,KAAI,SAACkD,GAClC,IAAM8iB,EAAW9iB,IAAU,EAAKmF,MAAM4N,SAAS/S,MACzC8P,EAAU,CAAC,cAIjB,OAHIgT,GACAhT,EAAQxT,KAAK,UAEV,wBAAI0C,IAAG,gBAAWgB,IACrB,uBAAG0G,KAAI,uBAAkB,EAAKvB,MAAM3F,OAA7B,kBAA6CQ,GAChDyF,UAAYqK,EAAQvK,KAAK,KACzBqB,QAAS,SAACT,GAAD,OAAO,EAAK0c,kBAAkB1c,EAAGnG,KACtC,uCAAaA,GACX8iB,EAAW,8CAA8B,UAK3D,OAAQ,6BACJ,wBAAIrd,UAAU,SAAd,QAA6BrK,KAAK+J,MAAM3F,QAKxC,kBAAC,GAAD,CACI6E,OAAQjJ,KAAK+J,MAAM4N,SAAS1O,OAC5BjB,YAAahI,KAAK+J,MAAM/B,YACxBpD,MAAO5E,KAAK+J,MAAM4N,SAAS/S,QAE/B,kBAAC,GAAD,CACI+S,SAAU3X,KAAK+J,MAAM4N,WAEzB,yBAAKtN,UAAU,0BACTrK,KAAK+J,MAAMwK,OAAOzT,OAAS,EACzB,6BACI,sCACA,4BACMyT,IAGV,gDAnDpB,GAA8B9I,IAAMC,eC/GvBic,GAAb,kDACI,WAAY5d,GAAoB,IAAD,8BAC3B,cAAMA,IAED6d,iBAAmB,EAAKA,iBAAiB9c,KAAtB,gBAHG,EADnC,6DAOqBC,EAAyB3G,MAP9C,+BAYc,IAAD,OACCyjB,EAAY1mB,OAAOK,QAAQxB,KAAK+J,MAAM+d,OAAOpmB,KAAI,YAA8C,IAAD,mBAA3C0C,EAA2C,KAC1F4S,EAD0F,KACpEA,WAC5B,OAAO,wBAAIpT,IAAG,oBAAeQ,IACzB,uBAAGkH,KAAI,uBAAkBlH,GACrBoH,QAAS,SAACT,GAAD,OAAO,EAAK6c,iBAAiB7c,EAAG3G,KACzC,8BAAQ4S,EAAa5S,EAAH,UAAeA,EAAf,sDAK9B,OAAQ,yBAAKiG,UAAU,mBACnB,wBAAIA,UAAU,SAAd,mBAEA,qCAECwd,EAAU/mB,OAAS,EAChB,4BACK+mB,GAEL,8CAhChB,GAAsCpc,IAAMC,eCK/BqD,GAAb,kDACI,WAAYhF,GAAgB,IAAD,8BACvB,cAAMA,IACDY,MAAQ,CACTod,eAAgB,MAEpB,EAAKC,aAAe,EAAKA,aAAald,KAAlB,gBACpB,EAAKmd,SAAW,EAAKA,SAASnd,KAAd,gBANO,EAD/B,yDAUiBtF,GACLA,IAAWxF,KAAK2K,MAAMod,eACtB/nB,KAAKiL,SAAS,CACV8c,eAAgB,OAGpB/nB,KAAKiL,SAAS,CACV8c,eAAgBviB,MAjBhC,+BAsBazE,GACDf,KAAK2K,MAAMod,gBAGf/nB,KAAK+J,MAAMke,SAASjoB,KAAK2K,MAAMod,eAAgBhnB,KA1BvD,+BA6Bc,IAAD,OACCR,EAAQP,KAAK+J,MAAMme,oBAAoB3nB,MAAM+O,QACnD/O,EAAMW,KAAN,MAAAX,EAAK,YAASP,KAAK+J,MAAM1D,gBACzB,IAAMkJ,EAAU,IAAIjP,EAAKC,GAEnB2J,EAAY,GAClB/I,OAAOK,QAAQ+N,EAAQ/O,aAAaS,SAAQ,YAAoB,IAAD,mBAAjBnC,EAAiB,UACrDmC,SAAQ,SAACF,EAAYF,GACvB,IAAMyZ,EAAanZ,OAAOC,OAAO,EAAK2I,MAAM+Q,eAAenZ,SAASZ,GAChEwd,EAAe,KACnB,GAAIjE,EAEA,cAA8BnZ,OAAOK,QAAQ,EAAKuI,MAAM+Q,eAAxD,eAAwE,CAAC,IAAD,sBAA9DjW,EAA8D,KAAxDsjB,EAAwD,KAChEpnB,IAASonB,IACT5J,EAAe1Z,GAI3B,IAAM+V,EAAQ,yBAAKhX,IAAG,oCAA+B9E,EAA/B,YAAuC+B,IACzD,kBAAC,GAAD,CAAU+C,IAAG,0BAAqB/C,GAC9B/B,KAAMiC,EAAKjC,KACXgB,MAAOiB,EAAKjB,MACZua,WAAYC,EAAa,CAAC,iBAAmB,GAC7C9O,QAAS,SAACT,GAAD,OAAO,EAAKkd,SAASlnB,MACjCwd,EACG,yBAAKlU,UAAU,iBAAf,cAA2CkU,GACzC,MAEVrU,EAAUhJ,KAAK0Z,SAIvB,IAAMwN,EAAgBpoB,KAAK+J,MAAM/B,YAAYuF,QAAO,SAAC1I,GACjD,OAAOA,IAAS,EAAKkF,MAAMlC,kBAC5BnG,KAAI,SAACmD,EAAchE,GAClB,IAAM6T,EAAU,CAAC,MAAO,iBAClB4F,EAAa,EAAK3P,MAAMod,iBAAmBljB,EAIjD,OAHIyV,GACA5F,EAAQxT,KAAK,UAET,2BAAO0C,IAAG,iBAAY/C,GAC1BwJ,UAAWqK,EAAQvK,KAAK,MACpB,2BAAOkE,KAAK,QAAQxJ,KAAK,UAAU0M,GAAE,kBAAa1Q,GAAKwnB,aAAa,MAChEC,QAAShO,EACT/L,SAAU,SAACxD,GAAD,OAAO,EAAKid,aAAanjB,MAJvC,IAIkDA,MAI9D,OAAQ,0BAAMwF,UAAU,yBACpB,yBAAKA,UAAU,6BAA6BuK,cAAY,WAClDwT,GAEN,yBAAK/d,UAAU,eACTH,GAEN,4BAAQmE,KAAK,SAAShE,UAAU,kBAC5BmB,QAAS,SAACT,GAAD,OAAO,EAAKhB,MAAMmG,iBAD/B,yBApFZ,GAAyCzE,IAAMC,eCalC6c,GAAb,kDACI,WAAYxe,GAAgB,IAAD,8BACvB,cAAMA,IAEDY,MAAQ,CACTkC,IAAK,IAAI9J,EACT+E,KAAM,EACNgT,cAAe,IAGnB,EAAK0N,YAAc,EAAKA,YAAY1d,KAAjB,gBACnB,EAAK2d,YAAc,EAAKA,YAAY3d,KAAjB,gBACnB,EAAK4d,WAAa,EAAKA,WAAW5d,KAAhB,gBAClB,EAAK6d,YAAc,EAAKA,YAAY7d,KAAjB,gBACnB,EAAK8d,wBAA0B,EAAKA,wBAAwB9d,KAA7B,gBAC/B,EAAK+d,iBAAmB,EAAKA,iBAAiB/d,KAAtB,gBACxB,EAAKoF,aAAe,EAAKA,aAAapF,KAAlB,gBACpB,EAAK2H,WAAa,EAAKA,WAAW3H,KAAhB,gBAClB,EAAKge,YAAc,EAAKA,YAAYhe,KAAjB,gBAjBI,EAD/B,sGAqB2ByT,EAAsBxd,GArBjD,wEAsBc+Z,EAAgB3Z,OAAOqF,OAAO,GAAIxG,KAAK2K,MAAMmQ,gBACrCyD,GAAgBxd,EAC9Bf,KAAKiL,SAAS,CACV6P,kBAzBZ,uQA8Bc9a,KAAK2K,MAAMkC,IAAI4G,cACjBzT,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpB5E,KAAK+J,MAAMgK,UAAU/G,QAjCjC,OAoCQyI,OAAO+B,SAASmO,SApCxB,wIAuCgB5a,GACR,IAAMjD,EAAM5B,OAAOC,SAAU4E,EAAEyD,OAA4B1O,OAC3DE,KAAKiL,SAAS,CACVnD,IAAKA,MA1CjB,2EA8CsBiD,GA9CtB,wEA+CQA,EAAEC,iBA/CV,SAgDchL,KAAK2K,MAAMkC,IAAIC,QACjB9M,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpB5E,KAAK+J,MAAMgK,UAAUjI,cACrB,GApDZ,OAuDQ2J,OAAO+B,SAASmO,SAvDxB,oQA2Dc3lB,KAAK2K,MAAMkC,IAAIC,QACjB9M,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpB5E,KAAK+J,MAAMgK,UAAUjI,cACrB9L,KAAK2K,MAAM7C,KA/DvB,OAkEQ2N,OAAO+B,SAASmO,SAlExB,mQAsEY3lB,KAAK+J,MAAMgK,UAAUpG,WAtEjC,sBAuEkB,IAAInL,MAAM,yDAvE5B,uBAyEcxC,KAAK2K,MAAMkC,IAAI6G,kBACjB1T,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpB5E,KAAK+J,MAAMgK,UAAUpG,WAAWnI,OAChCxF,KAAK2K,MAAM7C,KA7EvB,OAgFQ2N,OAAO+B,SAASmO,SAhFxB,gQAoFY3lB,KAAK+J,MAAMgK,UAAU3E,cApFjC,sBAqFkB,IAAI5M,MAAM,2DArF5B,UAwFYxC,KAAK+J,MAAM3D,aAAgBpG,KAAK+J,MAAMzD,SAxFlD,sBAyFkB,IAAI9D,MAAM,oCAzF5B,UA6F4D,IAAjDrB,OAAO4E,KAAK/F,KAAK2K,MAAMmQ,eAAeha,OA7FjD,sBA8FkB,IAAI0B,MAAM,+CA9F5B,UAiGc2C,EAAqB,GACrB4jB,EAAkB5nB,OAAOC,OAAOpB,KAAK2K,MAAMmQ,eACjD9a,KAAK+J,MAAM3D,YAAYpG,KAAK+J,MAAMgK,UAAU3E,cAAc5J,QAAQjF,MAAMU,SAAQ,SAACF,GACxEgoB,EAAgBpnB,SAASZ,IAC1BoE,EAAUjE,KAAKH,MAGvBf,KAAK+J,MAAMzD,SAASrF,SAAQ,SAACF,GACpBgoB,EAAgBpnB,SAASZ,IAC1BoE,EAAUjE,KAAKH,MAIC,IAArBoE,EAAUrE,OA9GrB,uBA+GkB,IAAI0B,MAAM,wCA/G5B,yBAkHcxC,KAAK2K,MAAMkC,IAAI+G,oBACjB5T,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpB5E,KAAK+J,MAAMgK,UAAU3E,cAAc5J,OACnCxF,KAAK2K,MAAMmQ,cACX3V,GAvHZ,QA0HQsQ,OAAO+B,SAASmO,SA1HxB,iLA6HqBzX,EAAqB1G,GA7H1C,gFA8HYxH,KAAK+J,MAAM3D,YA9HvB,sBA+HkB,IAAI5D,MAAM,wBA/H5B,cAkIcgD,EAASxF,KAAK+J,MAAM/B,YAAYkG,GAChCnH,EAAO/G,KAAK+J,MAAM3D,YAAYZ,GAC9BzE,EAAOgG,EAAKxG,MAAMiH,GAGpBpC,GAAa,GACb2B,EAAKtG,UAAUkB,SAASZ,EAAKjC,OAAUiC,EAAKjB,QAAUnB,EAAUY,MAAQwB,EAAKjB,QAAUnB,EAAUa,QACjG4F,GAAa,GAzIzB,SA4IcpF,KAAK2K,MAAMkC,IAAIwE,aACjBrR,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpBY,EACAzE,EACAqE,GAjJZ,OAoJQqQ,OAAO+B,SAASmO,SApJxB,wQAwJc3lB,KAAK2K,MAAMkC,IAAImc,aACjBhpB,KAAK+J,MAAM3F,OACXpE,KAAK+J,MAAM4N,SAAS/S,MACpB5E,KAAK+J,MAAM4N,SAAS6P,SA3JhC,OA+JQ/R,OAAO+B,SAASlM,KAAhB,uBAAuCtL,KAAK+J,MAAM3F,QA/J1D,qIAkKc,IAAD,OACDya,EAAa,KACjB,GAAI7e,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU0H,SAAWxK,KAAK+J,MAAMkf,kBAAoBjpB,KAAK+J,MAAMgK,UAAU3E,eAAiBpP,KAAK+J,MAAM3D,YAAa,CACjJ,IAAIZ,EAASxF,KAAK+J,MAAMkf,iBAAiBtY,KACrCuK,EAAiB,EACjBjT,EAA8B,GAClCjI,KAAK+J,MAAMkf,iBAAiBhX,WAAWvQ,KAAI,SAAC6G,GACrCA,EAAM2J,SAAW1M,IAChB0V,GAAkB,EAClBjT,EAAY/G,KAAKqH,EAAMA,WAI/BsW,EAAa,kBAAC,GAAD,CACTha,KAAM7E,KAAK+J,MAAMkf,iBAAiBtY,KAClCzC,YAAalO,KAAK+J,MAAM/B,YAAYqF,QAAQ7H,GAC5CuB,KAAM/G,KAAK+J,MAAM3D,YAAYZ,GAC7B+E,MAAOvK,KAAK+J,MAAMgK,UAAUxJ,MAC5ByQ,SAAUhb,KAAK+J,MAAMgK,UAAU/G,SAAWxH,EAC1CyV,iBAAkBjb,KAAK+J,MAAMgK,UAAU3E,cAAc5J,SAAWA,EAChEkV,gBAAgB,EAChBQ,eAAgBA,EAChBjT,YAAaA,EACb0S,aAAc3a,KAAKyS,WAEnBoI,WAAW,IAGnB,OAAQ,yBAAKxQ,UAAU,iBACjBrK,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU+P,UACvC,4BAAQxI,UAAU,kBACdqE,SAAU1O,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU+P,UACnDrH,QAASxL,KAAKwoB,aAFlB,UAEuCxoB,KAAK+J,MAAMgK,UAAU/G,QAC1D,KAEJhN,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU2H,QACvC,0BAAMJ,UAAU,gBACZ,uCACA,2BAAO+D,QAAQ,OAAf,WAA8BpO,KAAK+J,MAAMgK,UAAUjI,cAAnD,KACA,2BAAOuC,KAAK,SAASxJ,KAAK,MAAMwF,UAAU,eACtCiE,YAAY,YACZzE,IAAK,IACL4D,IAAK,IACLiB,SAAW1O,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU2H,QACpD8D,SAAU,SAACxD,GAAD,OAAO,EAAK0d,YAAY1d,MACtC,4BAAQV,UAAU,4BAA4BgE,KAAK,SAC/C7C,QAAS,SAACT,GAAD,OAAO,EAAK4d,YAAY5d,KADrC,eACuD/K,KAAK+J,MAAMgK,UAAUjI,eAC5E,4BAAQzB,UAAU,+BAA+BgE,KAAK,SAClD7C,QAASxL,KAAK0oB,YADlB,cAC2C1oB,KAAK+J,MAAMgK,UAAUjI,gBAC1D,KAEZ9L,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUgM,iBAAmB9O,KAAK+J,MAAMgK,UAAUpG,WAC/E,0BAAMtD,UAAU,uBACZ,8CACA,2BAAO+D,QAAQ,OAAf,sBAAyCpO,KAAK+J,MAAMgK,UAAUpG,WAAWnI,OAAzE,KACA,2BAAO6I,KAAK,SAASxJ,KAAK,MAAMwF,UAAU,eACtCiE,YAAY,uBACZzE,IAAK7J,KAAK+J,MAAMgK,UAAUpG,WAAW3I,OACrCyI,IAAK,IACLc,SAAU,SAACxD,GAAD,OAAO,EAAK0d,YAAY1d,MACtC,4BAAQV,UAAU,+BAA+BgE,KAAK,SAClD7C,QAASxL,KAAK4oB,yBADlB,uBACgE5oB,KAAK+J,MAAMgK,UAAUpG,WAAWnI,SAElG,KAELxF,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUkN,kBAAoBhQ,KAAK+J,MAAMgK,UAAU3E,eAAiBpP,KAAK+J,MAAM3D,aAAepG,KAAK+J,MAAMzD,SACrI,kBAAC,GAAD,CACI4hB,oBAAqBloB,KAAK+J,MAAM3D,YAAYpG,KAAK+J,MAAMgK,UAAU3E,cAAc5J,QAC/Ea,cAAerG,KAAK+J,MAAMzD,SAC1BwU,cAAe9a,KAAK2K,MAAMmQ,cAC1B9S,YAAahI,KAAK+J,MAAM/B,YACxBH,eAAgB7H,KAAK+J,MAAMgK,UAAU3E,cAAc5J,OACnDyiB,SAAUjoB,KAAK6oB,iBACf3Y,aAAclQ,KAAKkQ,eACrB,KAEJ2O,EAED7e,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUkhB,QACtC,0BAAM3Z,UAAU,mBACZ,4BAAQgE,KAAK,SAAShE,UAAU,kBAC5BmB,QAAS,SAACT,GAAD,OAAO,EAAK+d,gBADzB,eAEM,UApP1B,GAA6Brd,IAAMC,eCtBtBwd,GAAb,uKAEQ,IAAMjX,EAAajS,KAAK+J,MAAMkI,WAAWvQ,KAAI,SAACynB,EAAuBtoB,GACjE,IAAMe,EAAMunB,EAAU5gB,MAAM7G,KAAI,SAACX,GAC7B,OAAOA,EAAKA,KAAKjB,SAClB+B,QAAO,SAACP,EAAGC,GACV,OAAOD,EAAIC,IACZ,GACGhB,EAAQ4oB,EAAU5gB,MAAM7G,KAAI,SAACX,EAAkB0D,GACjD,OAAO,0BAAMb,IAAG,gBAAW/C,EAAX,iBAAqB4D,IAC/BA,EAAI,EACF,uCAAuB,KAC3B,8BAAO1D,EAAKA,KAAKjC,MACjB,8BAAOe,EAAckB,EAAKA,KAAKjB,YAGvC,OAAQ,yBAAKuK,UAAU,aAAazG,IAAG,qBAAgB/C,IACnD,6BACI,uCAAcA,EAAI,EAAlB,SACA,0CAAgBsoB,EAAUjX,OAA1B,QACA,kCAAStQ,EAAT,aAEJ,6BACMrB,OAKd,OAAQ,6BACJ,2CACE0R,EAAWnR,OAASmR,EAClB,oDA/BhB,GAAoCxG,IAAMC,eCO7B0d,GAAb,uKAEQ,IAAM/iB,EAAgBrG,KAAK+J,MAAM1D,cAAc3E,KAAI,SAACX,EAAYF,GAC5D,OAAO,0BAAM+C,IAAG,mBAAc/C,IACxBE,EAAKX,eAIf,OAAQ,yBAAKiK,UAAU,4BACnB,4BACI,0CACCrK,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU2H,QACtC,2DACA,4DAEPpE,OAfb,GAAuCoF,IAAMC,eCDhCiD,GAAb,uKAEQ,IAAM9J,EAAO7E,KAAK+J,MAAM/B,YAAYhI,KAAK+J,MAAMoU,qBACzCtd,EAAIb,KAAK+J,MAAMoU,oBACfkL,EAAWrpB,KAAK+J,MAAMuU,YAAYzZ,GAAMtE,MAAM+O,QACpD+Z,EAASnoB,KAAT,MAAAmoB,EAAQ,YAASrpB,KAAK+J,MAAMzD,WAC5B,IAAMiJ,EAAU,IAAIjP,EAAK+oB,GACnB/K,EACF,kBAAC,GAAD,CAAY1a,IAAG,iBAAY/C,GACnBgE,KAAMA,EACNqJ,YAAalO,KAAK+J,MAAMoU,oBACxBpX,KAAMwI,EACNhF,MAAOzH,EAAUgM,gBACjBkM,SAAUna,IAAMb,KAAK+J,MAAM+U,YAC3B7D,kBAAkB,EAClBP,gBAAgB,EAChBzS,YAAa,GACbiT,eAAgB,EAChBL,WAAW,IAGvB,OAAQ,yBAAKxQ,UAAU,mBACnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,gBACX,0CACCiU,SAzBrB,GAAwC7S,IAAMC,eCOxC4d,G,kDACF,WAAYvf,GAAgB,IAAD,8BACvB,cAAMA,IACDY,MAAQ,CACTC,aAAa,GAEjB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBALC,E,2DAQZC,GACXA,EAAEC,iBACFhL,KAAKiL,SAAS,CACVL,aAAc5K,KAAK2K,MAAMC,gB,+BAIvB,IAAD,OACL,OAAQ,yBAAKP,UAAU,wBACnB,4BACI,uBAAGiB,KAAK,uBAAuBC,KAAK,SAChCC,QAAS,SAACT,GAAD,OAAO,EAAKF,eAAeE,KACpC,uCAAc/K,KAAK+J,MAAMnF,MAAzB,SACE5E,KAAK2K,MAAMC,YAAc,kDAAkC,OAInE5K,KAAK2K,MAAMC,YAAc,KACvB,yBAAK2G,GAAG,uBACJ,wCrCpBb,SAA2BhH,GAC9B,OAAQA,GACJ,KAAKzH,EAAU+P,UACX,MAAO,YACX,KAAK/P,EAAU2H,QACX,MAAO,UACX,KAAK3H,EAAUgM,gBACX,MAAO,kBACX,KAAKhM,EAAUkN,iBACX,MAAO,mBACX,KAAKlN,EAAU0H,QACX,MAAO,UACX,KAAK1H,EAAUkhB,QACX,MAAO,WqCOgBuF,CAAkBvpB,KAAK+J,MAAMgK,UAAUxJ,QACtD,yCAAgBvK,KAAK+J,MAAMgK,UAAU/G,QACnChN,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU2H,QACvC,iDAAwBzK,KAAK+J,MAAMgK,UAAUjI,eAAuB,KACtE9L,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUgM,iBAAmB9O,KAAK+J,MAAMgK,UAAUpG,WAC/E,8CAAoB3N,KAAK+J,MAAMgK,UAAUpG,WAAW3I,OAApD,KAA8DhF,KAAK+J,MAAMgK,UAAUpG,WAAWnI,OAA9F,KACA,KACFxF,KAAK+J,MAAMgK,UAAUxJ,OAASzH,EAAUkN,kBAAoBhQ,KAAK+J,MAAMgK,UAAU3E,cAC/E,iDAAuBpP,KAAK+J,MAAMgK,UAAU3E,cAAcpK,OAA1D,KAAoEhF,KAAK+J,MAAMgK,UAAU3E,cAAc5J,OAAvG,KACA,KACFxF,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU0H,SAAWxK,KAAK+J,MAAMkf,iBAC7D,+CAAsBjpB,KAAK+J,MAAMkf,iBAAiBtY,MAChD,KACJ3Q,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU0H,SAAWxK,KAAK+J,MAAMkf,iBAC7D,gDAAuBjpB,KAAK+J,MAAMkf,iBAAiBxY,SAAWzQ,KAAK+J,MAAMkf,iBAAiBxY,SAAW,QACnG,W,GA3CEhF,IAAMC,eAsErBkH,GAAb,kDACI,WAAY7I,GAAyB,IAAD,8BAChC,cAAMA,IAEDY,MAAQ,GAGb,EAAK+P,eAAiB,EAAKA,eAAe5P,KAApB,gBANU,EADxC,2DAUmBjG,GACX,OAAQ7E,KAAK+J,MAAMgK,UAAUxJ,OACzB,KAAKzH,EAAU+P,UACX,OAAO,EACX,KAAK/P,EAAU2H,QACX,OAAO5F,IAAS7E,KAAK+J,MAAMgK,UAAUjI,cACzC,KAAKhJ,EAAUgM,gBACX,IAAMnB,EAAajG,EAAc1H,KAAK+J,MAAMpC,YAC5C,IAAKgG,EACD,MAAM,IAAInL,MAAM,sEAEpB,OAAOmL,EAAWnI,SAAWX,EACjC,KAAK/B,EAAUkN,iBACX,IAAKhQ,KAAK+J,MAAMgK,UAAU3E,cACtB,MAAM,IAAI5M,MAAM,+DAEpB,OAAOxC,KAAK+J,MAAMgK,UAAU3E,cAAc5J,SAAWX,EACzD,KAAK/B,EAAU0H,QACX,QAAKxK,KAAK+J,MAAMkf,kBAKTjpB,KAAK+J,MAAMkf,iBAAiBtY,OAAS9L,EAChD,QAEI,OAAO,KApCvB,+BAwCc,IAAD,OACDsZ,GAAuB,EACxBne,KAAK+J,MAAMgK,WAAa/T,KAAK+J,MAAMgK,UAAU3E,gBAC5C+O,EAAsBne,KAAK+J,MAAM/B,YAAYqF,QAAQrN,KAAK+J,MAAMgK,UAAU3E,cAAc5J,SAG5F,IAAImQ,EAAU,KACV3V,KAAK+J,MAAMgK,WAAa/T,KAAK+J,MAAMgK,UAAUxJ,MAAQzH,EAAU+P,WAAa7S,KAAK+J,MAAMxJ,OAASP,KAAK+J,MAAMxJ,MAAM6F,cACjHuP,EAAU3V,KAAK+J,MAAM/B,YAAYtG,KAAI,SAACmD,EAAchE,GAChD,IAAI,EAAKkJ,MAAMxJ,MAEX,MAAM,IAAIiC,MAAM,iBAEpB,IAAMgnB,EAAc,EAAK9O,eAAe7V,GAAQ,gBAAkB,GAElE,OAAQ,yBAAKjB,IAAG,iBAAY/C,EAAZ,eACZ,wBAAIwJ,UAAY,eAAiBmf,GAAe3kB,GAChD,kBAAC,EAAD,CAAYjB,IAAG,iBAAY/C,GACvBuJ,MAAOvJ,EACPN,MAAO,EAAKwJ,MAAMxJ,MAAM6F,YAAYvB,GACpC0F,MAAO,EAAKR,MAAMgK,UAAUxJ,aAK5C,IAAIkf,EAAmB,KACvB,GAAIzpB,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUkhB,SAAWhkB,KAAK+J,MAAMgK,UAAU3E,eAAiBpP,KAAK+J,MAAMkf,kBAAoBjpB,KAAK+J,MAAMkf,iBAAkB,CACtJ,IAAMS,ErCuIX,SAA6B1hB,EAAuBC,GAEvD,IAAMyhB,EAAmD,GAOzD,OANA1hB,EAAY/G,SAAQ,SAAC4D,GACjB6kB,EAAgB7kB,GAAQ,MAE5BoD,EAAYhH,SAAQ,SAACsH,GACjBmhB,EAAgBnhB,EAAM2J,QAAQhR,KAAKqH,EAAMA,UAEtCmhB,EqChJyBC,CAAoB3pB,KAAK+J,MAAM/B,YAAahI,KAAK+J,MAAMkf,iBAAiBhX,YAChGwX,EAAmB,kBAAC,GAAD,CACXthB,SAAUnI,KAAK+J,MAAMgK,UAAU3E,cAC/B+O,oBAAqBA,EACrBnW,YAAahI,KAAK+J,MAAM/B,YACxBC,YAAayhB,EACbxhB,kBAAmBlI,KAAK+J,MAAMkf,iBAAiB/gB,oBAG3D,IAAM0hB,EAAgB5pB,KAAK+J,MAAMnF,QAAU5E,KAAK+J,MAAM4N,SAAS/S,MAE/D,OAAQ,6BACJ,wBAAIyF,UAAU,SACV,sCAAarK,KAAK+J,MAAM3F,OAAxB,YAA2CpE,KAAK+J,MAAMnF,QAExDglB,EAAgB,KACd,4BACI,0BAAMvf,UAAU,sBAAhB,eAGNrK,KAAK+J,MAAM4N,SAASX,WAClB,kBAAC,GAAD,CACIpS,MAAO5E,KAAK+J,MAAM4N,SAAS/S,MAC3B+P,cAAe3U,KAAK+J,MAAMnF,MAC1BqE,OAAQjJ,KAAK+J,MAAM4N,SAAS1O,OAC5BjB,YAAahI,KAAK+J,MAAM/B,YACxB4C,YAAa5K,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUkhB,SAAWhkB,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU+P,YAC9G,kBAAC,GAAD,CACI7K,YAAahI,KAAK+J,MAAM/B,YACxB4C,aAAa,IACrB,kBAAC,GAAD,CACI+M,SAAU3X,KAAK+J,MAAM4N,SACrB/M,aAAa,IAEjB,kBAAC,GAAD,CACImJ,UAAW/T,KAAK+J,MAAMgK,UACtBnP,MAAO5E,KAAK+J,MAAMnF,MAClBqkB,iBAAkBjpB,KAAK+J,MAAMkf,mBAE/BjpB,KAAK+J,MAAMgK,UAAUxJ,MAAQzH,EAAU+P,UACrC,kBAAC,EAAD,CACIjI,YAAa5K,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAU0H,SAAWxK,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUkhB,QAC1G7Y,KAAMnL,KAAK+J,MAAMpC,aAAiB,KAEzC3H,KAAK+J,MAAMkf,kBAAoBjpB,KAAK+J,MAAMgK,UAAUxJ,OAASzH,EAAU0H,SAAWxK,KAAK+J,MAAMgK,UAAUxJ,MAAQzH,EAAUkhB,QACtH,kBAAC,GAAD,CACI/R,WAAYjS,KAAK+J,MAAMkf,iBAAiBhX,aAC5C,KAEFjS,KAAK+J,MAAMkf,kBAAoBjpB,KAAK+J,MAAMgK,UAAUxJ,OAASzH,EAAU0H,SAAWxK,KAAK+J,MAAMgK,UAAUxJ,MAAQzH,EAAUkhB,QACvH,kBAAC7T,EAAD,CACI7K,aAActF,KAAK+J,MAAMkf,iBAAiB3jB,eAC9C,KAEFtF,KAAK+J,MAAMgK,UAAUxJ,MAAQzH,EAAU+P,WAAa7S,KAAK+J,MAAMgK,UAAUxJ,OAASzH,EAAUkN,kBAAoBhQ,KAAK+J,MAAMxJ,MACzH,kBAAC,GAAD,CACI8F,cAAerG,KAAK+J,MAAMxJ,MAAM+F,SAChCyN,UAAW/T,KAAK+J,MAAMgK,YACxB,KAEJ/T,KAAK+J,MAAMgK,UAAUxJ,MAASzH,EAAU+P,WAAa7S,KAAK+J,MAAMgK,UAAUxJ,MAAQzH,EAAUkhB,QAC1F,yBAAK3Z,UAAU,gCACX,4CAECsL,GACI,KAEX3V,KAAK+J,MAAMgK,UAAUxJ,QAAUzH,EAAUgM,iBAAmB9O,KAAK+J,MAAMxJ,OAASP,KAAK+J,MAAMgK,UAAUpG,WACnG,kBAAC,GAAD,CACI3F,YAAahI,KAAK+J,MAAM/B,YACxBsW,YAAate,KAAK+J,MAAMxJ,MAAM6F,YAC9BE,SAAUtG,KAAK+J,MAAMxJ,MAAM+F,SAC3BwY,YAAa9e,KAAK+J,MAAM/B,YAAYqF,QAAQrN,KAAK+J,MAAMgK,UAAU/G,QACjEmR,oBAAqBne,KAAK+J,MAAM/B,YAAYqF,QAAQrN,KAAK+J,MAAMgK,UAAUpG,WAAWnI,UAC9E,KAEZikB,EAEAG,EACE,kBAAC,GAAD,CAAS7V,UAAW/T,KAAK+J,MAAMgK,UAC3B4D,SAAU3X,KAAK+J,MAAM4N,SACrBsR,iBAAkBjpB,KAAK+J,MAAMkf,iBAC7B7kB,OAAQpE,KAAK+J,MAAM3F,OACnB4D,YAAahI,KAAK+J,MAAM/B,YACxB5B,YAAapG,KAAK+J,MAAMxJ,MAAQP,KAAK+J,MAAMxJ,MAAM6F,YAAc,KAC/DE,SAAUtG,KAAK+J,MAAMxJ,MAAQP,KAAK+J,MAAMxJ,MAAM+F,SAAW,OAC7D,UAzJhB,GAA+BmF,IAAMC,eCrCxBme,GAAb,kDACI,WAAY9f,GAAgB,IAAD,8BACvB,cAAMA,IAEDY,MAAQ,CAETvG,OAAQ,KAGRQ,OAAQ,EAERkjB,MAAO,GAEPjb,IAAK,IAAI9J,EAETiF,YAAa,GACbuM,OAAQ,GACRoD,SAAU,KACV5D,UAAW,GACX/N,cAAe,GACf2B,WAAY,GACZshB,iBAAkB,KAElB9Q,SAAU,MAGd,EAAK2R,UAAY,EAAKA,UAAUhf,KAAf,gBACjB,EAAKif,aAAe,EAAKA,aAAajf,KAAlB,gBACpB,EAAKkf,cAAgB,EAAKA,cAAclf,KAAnB,gBACrB,EAAKmf,SAAW,EAAKA,SAASnf,KAAd,gBAChB,EAAKof,aAAe,EAAKA,aAAapf,KAAlB,gBACpB,EAAKqf,cAAgB,EAAKA,cAAcrf,KAAnB,gBA9BE,EAD/B,kGAkCuB1G,GAlCvB,8EAmCQhC,QAAQsL,IAAR,qCAA0CtJ,EAA1C,QAnCR,SAoCwBpE,KAAK2K,MAAMkC,IAAIud,iBAAiBhmB,GApCxD,OAoCcE,EApCd,OAqCQlC,QAAQsL,IAAIpJ,GACZtE,KAAKiL,SAAS,CACV7G,SACA4D,YAAa1D,EAAE0D,YACfuM,OAAQjQ,EAAEiQ,OACVoD,SAAUrT,EAAEqT,SACZ5D,UAAWzP,EAAEyP,UACb/N,cAAe1B,EAAE0B,gBA5C7B,oLAgDwB5B,EAAgBQ,GAhDxC,uFAiDwB5E,KAAK2K,MAAMkC,IAAIkB,QAAQ3J,EAAQQ,GAjDvD,OAiDcN,EAjDd,OAkDQlC,QAAQsL,IAAI,uBACZtL,QAAQsL,IAAIpJ,GACZtE,KAAKiL,SAAS,CACVtD,WAAYrD,EAAEqD,aArD1B,6LAyD+BvD,EAAgBQ,GAzD/C,8EA0DQxC,QAAQsL,IAAR,8CAAmDtJ,EAAnD,sBAAuEQ,IA1D/E,SA2DwB5E,KAAK2K,MAAMkC,IAAIiF,oBAAoB1N,EAAQQ,GA3DnE,OA2DcN,EA3Dd,OA4DQlC,QAAQsL,IAAIpJ,GACZtE,KAAKiL,SAAS,CACVge,iBAAkB3kB,IA9D9B,qLAkEuBF,GAlEvB,0FAmEepE,KAAK+pB,aAAa3lB,IAnEjC,oLAsEwBQ,GAtExB,iEAuEQ5E,KAAKiL,SAAS,CACVrG,MAAOA,IAxEnB,8PA6EQ5E,KAAK2K,MAAMkC,IAAIwd,gBAAgBrc,MAAK,SAAC1J,GACjC,EAAK2G,SAAS,CACV6c,MAAOxjB,EAAEwjB,WAEdwC,OAAM,SAACC,GACNnoB,QAAQsC,MAAM6lB,GACd,EAAKtf,SAAS,CACVkN,SAAUoS,OApF1B,2PA0FQnoB,QAAQsL,IAAI,uBACZ1N,KAAK8pB,YAGCzmB,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MAChClH,EAASpE,KAAK2K,MAAMvG,OACpBf,EAAII,aAAa+mB,IAAI,UACrBpmB,EAASf,EAAII,aAAagU,IAAI,SAE9BrT,GACApE,KAAK+pB,aAAa3lB,GAGlBQ,EAAQ5E,KAAK2K,MAAM/F,MACnBvB,EAAII,aAAa+mB,IAAI,WACrB5lB,EAAQsB,OAAOC,SAAS9C,EAAII,aAAagU,IAAI,UAAY,KAAM,KAE/DrT,IAAqB,IAAXQ,IACV5E,KAAKgqB,cAAc5lB,EAAQQ,GAC3B5E,KAAKyqB,qBAAqBrmB,EAAQQ,IAGtC5E,KAAKiL,SAAS,CACV7G,SACAQ,UAEJ6Q,OAAOC,WAAW1V,KAAKiqB,SAAU,KApHzC,iJAwHQjqB,KAAKiqB,aAxHb,+BA4HQ,IAAIS,EAAO,KA4BX,OAvBQA,EAJJ1qB,KAAK2K,MAAMvG,OACPpE,KAAK2K,MAAMgN,UAEkB,IAAtB3X,KAAK2K,MAAM/F,MACX,kBAAC,GAAD,CACHR,OAAQpE,KAAK2K,MAAMvG,OACnB4D,YAAahI,KAAK2K,MAAM3C,YACxB2P,SAAU3X,KAAK2K,MAAMgN,SACrBpD,OAAQvU,KAAK2K,MAAM4J,OACnB4V,cAAenqB,KAAKmqB,gBAEjB,kBAAC,GAAD,CACH/lB,OAAQpE,KAAK2K,MAAMvG,OACnB4D,YAAahI,KAAK2K,MAAM3C,YACxB2P,SAAU3X,KAAK2K,MAAMgN,SACrB/S,MAAO5E,KAAK2K,MAAM/F,MAClBmP,UAAW/T,KAAK2K,MAAMoJ,UAAU/T,KAAK2K,MAAM/F,OAC3CrE,MAAOP,KAAK2K,MAAM3E,cAAchG,KAAK2K,MAAM/F,OAC3C+C,WAAY3H,KAAK2K,MAAMhD,WACvBshB,iBAAkBjpB,KAAK2K,MAAMse,mBAjB1B,qDAoBJ,kBAAC,GAAD,CACHnB,MAAO9nB,KAAK2K,MAAMmd,MAClBoC,aAAclqB,KAAKkqB,eAGpB,0BAAM7f,UAAU,aAClBqgB,OAzJb,GAAgCjf,IAAMC,eCWvBif,I,MA5B6B,SAAC5gB,GACzC,SAAS8O,EAAa9N,GAClB,IAAM9K,EAAK8K,EAAEyD,OAA4B1O,MACzCiK,EAAMwE,SAAStO,GAGnB,IAAM2qB,EAAU7gB,EAAM8gB,OAAOnpB,KAAI,SAACopB,EAAejqB,GAC7C,IAAI6T,EAAU,iCAQd,OAPIoW,IAAU/gB,EAAMghB,eAChBrW,GAAW,WAEX3K,EAAMihB,gBAAkBjhB,EAAMihB,eAAerpB,SAASmpB,KACtDpW,GAAW,aAGR,2BAAOrK,UAAWqK,EAAS9Q,IAAKknB,GACnC,2BAAOzc,KAAK,QAAQxJ,KAAMkF,EAAMkhB,UAAWnrB,MAAOgrB,EAC9Cpc,SAAU3E,EAAMihB,gBAAkBjhB,EAAMihB,eAAerpB,SAASmpB,GAChExC,QAASwC,IAAU/gB,EAAMghB,aACzBxc,SAAUsK,IAJX,IAI6B9O,EAAMmhB,YAAYrqB,OAI1D,OAAQ,yBAAKwJ,UAAU,6BAA6BuK,cAAY,UAAUrD,GAAIxH,EAAMohB,aAC9EP,KC1CV,SAASQ,KAEL,IADA,IAAIhnB,EAAS,GACJvD,EAAI,EAAGA,EAZG,EAYiBA,IAAK,CACrC,IAAM4D,EAAI8W,GAAQ,GAAI,KAElBnX,GADAK,EAAI,IACOA,EAAI,IAAIrE,WAETirB,OAAOC,aAAa7mB,GAGtC,OAAOL,EAyCX,SAASmnB,GAAennB,GACpB,IAAMwiB,EAAenR,OAAO4N,aAAaE,QAApB,eAAoCnf,IACzD,IAAKwiB,EACD,MAAM,IAAIpkB,MAAJ,gCAAmC4B,EAAnC,eAGV,OADoBF,KAAK2C,MAAM+f,GAQnC,IAAM4E,GAAkB,CAAC,MAUnBC,GAAiD,SAAC1hB,GACpD,IAAM2hB,EAAMvqB,OAAOK,QAAQuI,EAAM+d,OAAOpmB,KAAI,YAA4B,IAAD,mBAAzB0C,EAAyB,KAAjBunB,EAAiB,KACnE,OAAO,wBAAI/nB,IAAKQ,GACZ,uBAAGkH,KAAK,IAAIC,KAAK,SAASC,QAAS,kBAAMzB,EAAMwN,SAASnT,KAAYA,EAApE,KAAgFunB,EAAY/mB,MAA5F,yBAGR,OAAO,yBAAKyF,UAAU,4BAClB,mEACA,4BACMqhB,KAURE,GAAqC,SAAC7hB,GAA6B,MAIvC6B,mBAAS,QAJ8B,mBAIhEigB,EAJgE,UAMrE,OAAO,yBAAKxhB,UAAU,iBAClB,0GAGA,4BAAQgE,KAAK,SAAShE,UAAU,0BAAhC,mBAEe,SAAbwhB,EACE,0FAGA,KAEJ,8BACI,2BAAOzd,QAAQ,WAAf,WACA,2BAAOC,KAAK,OAAOxJ,KAAK,UAAUwF,UAAU,eACxCiE,YAAY,UACZoE,UAAU,IACd,4BAAQrE,KAAK,SAAShE,UAAU,0BAAhC,gBAkCNyhB,GAAuC,SAAC/hB,GAG1C,IACMgiB,EADM,IAAIzoB,IAAImS,OAAO+B,SAASlM,MAChB7H,aAAagU,IAAI,QACrC,GAAIsU,IAAYP,GAAgB7pB,SAASoqB,GACrC,MAAM,IAAIvpB,MAAJ,mBAAsBupB,EAAtB,0BAN6D,MAQjDngB,mBAASmgB,GAAoB,MARoB,mBAQlEC,EARkE,KASjEC,GATiE,KApI3E,WACI,IAAMC,EAAU,kBACVC,EAAUhrB,OAAO4E,KAAK0P,OAAO4N,cAAc9V,QAAO,SAAC3J,GACrD,OAAOA,EAAIwoB,MAAMF,MAClBxqB,KAAI,SAACkC,GACJ,OAAOA,EAAIyoB,QAAQ,QAAS,OAGhCjqB,QAAQkV,MAAR,gBAAuB6U,EAAQrrB,OAA/B,cAEA,IAAMwrB,EAAI,GACVH,EAAQlrB,SAAQ,SAACmD,GACbkoB,EAAEloB,GAAUmnB,GAAennB,MAK/B,IAFA,IAAImoB,EAAc,EAElB,MAAmBprB,OAAO4E,KAAKumB,GAA/B,eAAmC,CAA9B,IAAIloB,EAAM,KACPkoB,EAAEloB,GAAQ8Q,oBACHoX,EAAEloB,GACTmoB,KAMR,OAFAnqB,QAAQkV,MAAR,UAAiBiV,EAAjB,uBAEOD,EAmHaE,IATmD,EAa3B5gB,oBAAS,GAbkB,mBAalE6gB,EAbkE,KAajDC,EAbiD,OAiBjB9gB,mBAASzK,OAAO4E,KAAKkmB,GAAanrB,OAAS,GAjB1B,mBAiBlE6rB,EAjBkE,KAiB5CC,EAjB4C,OAmB3ChhB,mBAAS,IAnBkC,mBAmBlE1C,EAnBkE,KAmBtDiO,EAnBsD,OAoBzCvL,mBAAS,MApBgC,mBAoBlEigB,EApBkE,KAoBxDgB,EApBwD,KA6FvE,IAAIC,EAAqB,KACrBH,IACAG,EAAsB,yBAAKziB,UAAU,gFAAgFkB,KAAK,SACtH,4BAAQ8C,KAAK,SAAShE,UAAU,QAAQ4a,eAAa,QAAQC,aAAW,QAAQ1Z,QAAS,kBAAMohB,GAAwB,KACnH,0BAAMxH,cAAY,QAAlB,SAGJ,uCAAcjkB,OAAO4E,KAAKkmB,GAAanrB,OAAvC,mDACA,4BAAQuN,KAAK,SAAShE,UAAU,yBAAyBmB,QAAU,kBAAMkhB,GAAmB,KAA5F,2BAIR,IAAIvF,EAAY,6BACZ,uBAAG9c,UAAU,gBAAb,wIAIA,0BAAMA,UAAU,oBACZ,2BAAO+D,QAAQ,QAAf,aACA,2BAAOC,KAAK,OAAOhE,UAAU,eACzBxF,KAAK,aACLyJ,YAAY,8BACZoE,UAAU,EACVnE,SA9FZ,SAA0BxD,GACtB,IAAMlG,EAAQkG,EAAEyD,OAA4B1O,MAC5CqX,EAAQtS,MA+FJ,kBAAC,GAAD,CACIomB,UAAU,YACVE,YAAY,0BACZD,YAAa,CAAC,QAAS,YACvBL,OAAQ,CAAC,KAAM,SACfG,eAAgB,CAAC,SACjBD,aAAcc,EACdtd,SAAUse,IAEC,OAAbhB,EACE,4BAAQxd,KAAK,SAAShE,UAAU,sCAC5BmB,QAAS,kBAnGzB,WAEI,IAAMpH,EAASgnB,KAET/nB,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MACpCjI,EAAIkiB,KAAO,iBACXliB,EAAII,aAAaspB,IAAI,SAAU3oB,EAAOhE,YACtCiD,EAAII,aAAaspB,IAAI,aAAc7jB,GACnC7F,EAAII,aAAaspB,IAAI,OAAQf,GAC7BvW,OAAO+B,SAASlM,KAAOjI,EAAIjD,WA0FA4sB,KADnB,mBAEA,MAGM,UAAbnB,EACG,kBAAC,GAAD,CACIoB,WAnEZ,SAA6B7oB,GACzB,IAAMf,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MACpCjI,EAAIkiB,KAAO,cACXliB,EAAII,aAAaspB,IAAI,SAAU3oB,GAC/Bf,EAAII,aAAaspB,IAAI,aAAc7jB,GACnC7F,EAAII,aAAaspB,IAAI,OAAQf,GAC7BvW,OAAO+B,SAASlM,KAAOjI,EAAIjD,YA8DnB8sB,UAxDZ,WAEI,IAAM9oB,EAASgnB,KAET/nB,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MACpCjI,EAAIkiB,KAAO,cACXliB,EAAII,aAAaspB,IAAI,SAAU3oB,EAAOhE,YACtCiD,EAAII,aAAaspB,IAAI,aAAc7jB,GACnC7F,EAAII,aAAaspB,IAAI,OAAQf,GAC7BvW,OAAO+B,SAASlM,KAAOjI,EAAIjD,cAgDvB,MAGR,OAAQ,yBAAKiK,UAAU,wBACnB,kBAAC,GAAD,CACIob,WAAY1b,EAAMqd,aACtB,yBAAK/c,UAAU,QACX,wBAAIA,UAAU,cAAd,UAEJ,8BACI,+DAEEoiB,EAAkB,KAAOK,EACzBL,EACE,kBAAC,GAAD,CAAiB3E,MAAQmE,EACrB1U,SArGhB,SAA0BnT,GACtB,IAAMunB,EAAcJ,GAAennB,GAC7Bf,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MACpCjI,EAAIkiB,KAAO,iBACXliB,EAAII,aAAaspB,IAAI,SAAU3oB,GAE/B,IAEM8E,EAFcyiB,EAAY3jB,YACP2jB,EAAYtQ,kBAErChY,EAAII,aAAaspB,IAAI,aAAc7jB,GAGnC7F,EAAII,aAAaspB,IAAI,OAAQf,GAE7BvW,OAAO+B,SAASlM,KAAOjI,EAAIjD,cAuFkB,KAGvC+mB,GAGN,oECjUKgG,I,MAAkC,SAACpjB,GAC5C,IAAMqjB,EAAoBjuB,IAAWuC,KAAI,SAAC5C,GACtC,OAAQ,wBAAI8E,IAAM9E,EAAKc,WACnB,4BAAKd,EAAKsB,YACV,4BAAKvB,EAAiBC,QAIxBuuB,EAAqBjuB,IAAgBsC,KAAI,SAAC5B,GAC5C,OAAQ,wBAAI8D,IAAM9D,EAAMF,WACpB,4BAAMC,EAAcC,IACpB,4BAAMA,EAAMF,eAIpB,OAAQ,yBAAKyK,UAAU,cACnB,qCACA,iCACI,qCACA,0KAGA,oHAC0F,wCAD1F,qKAUJ,iCACI,oCACA,4SAIA,8HACoG,sCADpG,2EAE0E,wCAF1E,+DAGwD,wCAHxD,0FAOJ,iCACI,uCACA,6LAC+B,wCAD/B,6DAIJ,iCACI,uCACA,kQzCHkB,GyCGlB,iQAK+F,uCAL/F,kDAQA,yBAAKA,UAAU,mBAAmBkB,KAAK,SACnC,4CADJ,kJAIA,sPAKA,sGAC4E,wCAD5E,4NAMA,2TAMA,wCAEA,2EACiD,+CADjD,mCAEkC,wCAFlC,wUAQA,sMAKJ,iCACI,0DACA,sEAC4C,wCAD5C,oBAEmB,wCAFnB,yMAIkD,qCAJlD,6EAQA,2BAAOlB,UAAU,gCACb,kEACA,+BACI,4BACI,oCACA,wCAGR,+BACM+iB,IAIV,0OAKA,2BAAO/iB,UAAU,gCACb,8DACA,+BACI,4BACI,oCACA,uCAGR,+BACMgjB,KAKd,iCACI,6DAEA,+KAKA,6LAKA,gDACA,6FAIA,mEACA,mHACyF,4CADzF,0CAEwC,wCAFxC,4KAMA,mDACA,4OAEoH,4CAFpH,+LAQA,mDACA,4RAMA,yBAAKhjB,UAAU,mBAAmBkB,KAAK,SACnC,4CADJ,iHAIA,6LAEA,yBAAKlB,UAAU,sBAAsBkB,KAAK,SACtC,+CADJ,6MAIA,wIAEA,kEACA,uWAMA,ofAMA,sHAIA,gGAKJ,iCACI,+CAEA,yFAEA,sCAEA,qNACgD,6CADhD,2cAQA,mlBAOA,6NAKA,4EAKJ,iCACI,qCAEA,qLAEA,2HAEA,kGAGJ,iCACI,wCAEA,4BACI,4BACI,4BAAQlB,UAAU,iBAAlB,mBADJ,6GAGA,4BACI,4BAAQA,UAAU,iBAAlB,YADJ,sIAGA,4BACI,4BAAQA,UAAU,iBAAlB,mBADJ,gEAGA,4BACI,4BAAQA,UAAU,iBAAlB,gBADJ,mGAGA,4BACI,4BAAQA,UAAU,iBAAlB,YADJ,gIAGA,4BACI,4BAAQA,UAAU,iBAAlB,YADJ,2EAGA,4BACI,4BAAQA,UAAU,iBAAlB,SADJ,sFAGA,4BACI,4BAAQA,UAAU,iBAAlB,cADJ,0CAGA,4BACI,4BAAQA,UAAU,iBAAlB,gBADJ,8KC1RhB,SAASijB,GAAe5H,GACJ,KAAZA,IACAA,EAAU,YAEd,IAAMriB,EAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MACpCjI,EAAIkiB,KAAOG,EAEXjQ,OAAO+B,SAASlM,KAAOjI,EAAIjD,WAC3BgC,QAAQkV,MAAR,8BAAqCoO,IACrCjQ,OAAO+B,SAASmO,SAKpB,OAFAvjB,QAAQkV,MAAR,gBAAuB7B,OAAO+B,SAAS+N,OAE/B9P,OAAO+B,SAAS+N,MACpB,IAAK,GACL,IAAK,IACL,IAAK,WACD9O,SAASgD,MAAQ,WAEjB8T,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,CACIrG,WAAakG,MAErB7W,SAASiX,eAAe,SAE5B,MACJ,IAAK,UACDH,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJhX,SAASiX,eAAe,SAE5B,MACJ,IAAK,SACD,IACMtpB,GADM,IAAId,IAAImS,OAAO+B,SAASlM,MACjB7H,aAAagU,IAAI,WAAa,KAEjD8V,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,yBAAKpjB,UAAU,WACX,gCACI,kBAAC,GAAD,CAAQjG,OAAQA,GACZqhB,WAAY6H,MAEpB,0BAAMjjB,UAAU,aACZ,kBAAC,GAAD,SAIZoM,SAASiX,eAAe,SAE5B,MAEJ,IAAK,iBACL,IAAK,aAED,IAAMrqB,GAAM,IAAIC,IAAImS,OAAO+B,SAASlM,MAC9BlH,GAASf,GAAII,aAAagU,IAAI,UAC9BvO,GAAa7F,GAAII,aAAagU,IAAI,cAExC,IAAKrT,KAAW8E,GAAY,CACxBuM,OAAO+B,SAASlM,KAAO,IACvB,MAGJmL,SAASgD,MAAT,0BAAoCrV,IAEpCmpB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,CACIrpB,OAAQA,GACR8E,WAAYA,GACZke,WAAYkG,MAEpB7W,SAASiX,eAAe,SAE5B,MACJ,IAAK,UACDH,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJhX,SAASiX,eAAe,SAE5B,MACJ,IAAK,QACDH,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJhX,SAASiX,eAAe,SAE5B,MACJ,QACIH,IAASC,OACL,6CAAoB/X,OAAO+B,SAAS+N,MACpC9O,SAASiX,eAAe,Y","file":"static/js/main.10dc083b.chunk.js","sourcesContent":["import seedrandom from \"seedrandom\";\nimport * as _ from \"lodash\";\n\nexport enum CardValue {\n    NINE = 0,\n    JACK = 2,\n    QUEEN = 3,\n    KING = 4,\n    TEN = 10,\n    ACE = 11\n}\n\nexport enum Suit {\n    HEARTS = \"♥\",\n    DIAMONDS = \"♦\",\n    CLUBS = \"♣\",\n    SPADES = \"♠\"\n}\n\nexport function getMarriageValue(suit: Suit): number {\n    switch(suit) {\n        case Suit.HEARTS:\n            return 100;\n        case Suit.DIAMONDS:\n            return 80;\n        case Suit.CLUBS:\n            return 60;\n        case Suit.SPADES:\n            return 40;\n    }\n}\n\n/**\n * Suits are returned in the order they are displayed\n */\nexport function getSuits(): Suit[] {\n    return [Suit.HEARTS, Suit.CLUBS, Suit.DIAMONDS, Suit.SPADES];\n}\n\n/**\n * Return all of the possible card values\n * These are guaranteed to be in order from highest to lowest\n */\nexport function getCardValues(): CardValue[] {\n    return [\n        CardValue.ACE,\n        CardValue.TEN,\n        CardValue.KING,\n        CardValue.QUEEN,\n        CardValue.JACK,\n        CardValue.NINE,\n    ];\n}\n\nexport function suitToString(suit: Suit): string {\n    return suit.valueOf();\n}\n\nexport function valueToString(value: CardValue): string {\n    switch(value) {\n        case CardValue.ACE:\n            return \"A\";\n        case CardValue.KING:\n            return \"K\";\n        case CardValue.QUEEN:\n            return \"Q\";\n        case CardValue.JACK:\n            return \"J\";\n        case CardValue.TEN:\n            return \"10\";\n        case CardValue.NINE:\n            return \"9\";\n    }\n}\n\nexport interface ICard {\n    suit: Suit;\n    value: CardValue;\n}\n\nexport class Card {\n    suit: Suit;\n    value: CardValue;\n\n    constructor(value: CardValue, suit: Suit) {\n        this.suit = suit;\n        this.value = value;\n    }\n\n    valueToString(): string {\n        return valueToString(this.value);\n    }\n\n    toString(): string {\n        const v = valueToString(this.value);\n        const s = suitToString(this.suit);\n        return s + v;\n    }\n}\n\nexport function cardToString(c: ICard): string {\n    return (new Card(c.value, c.suit)).toString();\n}\n\ntype CardsBySuit = {[key: string]: Card[]};\n\ninterface IHand {\n    cards: Card[];\n\n    cardsBySuit: CardsBySuit;\n\n    marriages: Suit[];\n}\n\n/**\n * Utility functions for a hand\n */\nexport class Hand {\n    cards: Card[];\n    /**\n     * Cards sorted according to their suit\n     * Guaranteed to be ordered with highest value first\n     * Each suit will exist (but may be an empty array)\n     */\n    cardsBySuit: CardsBySuit;\n\n    /**\n     * Computed once, can be reused\n     */\n    marriages: Suit[];\n\n    constructor(cards: Card[]) {\n        this.cards = cards;\n\n        // sort the cards by suit\n        this.cardsBySuit = this._sortCardsBySuit(cards)\n        this.marriages = this._findMarriages();\n    }\n\n    /**\n     * Return the index of the given card in `hand.cards`\n     * Useful when we can't call `hand.cards.indexOf(card)`\n     * @param needle - description of the card rather than a card object\n     * @returns index into `hand.cards` if found, -1 otherwise\n     */\n    findCard(needle: ICard): number {\n        for (let i = 0; i < this.cards.length; i++) {\n            let card = this.cards[i];\n            if (card.suit === needle.suit && card.value === needle.value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    hasCard(needle: ICard): boolean {\n        return this.findCard(needle) !== -1;\n    }\n\n    _sortCardsBySuit(cards: Card[]): CardsBySuit {\n        const cardsBySuit = {} as any;\n        for(const suit of getSuits()) {\n            cardsBySuit[suit] = [] as Card[];\n        }\n\n        cards.forEach((card: Card) => {\n            cardsBySuit[card.suit].push(card);\n        });\n\n        for(const cards of Object.values(cardsBySuit)) {\n            // cards within a suit should be sorted by VALUE (descending)\n            (cards as Card[]).sort((a: Card, b: Card) => {\n                return b.value - a.value;\n            });\n        }\n\n        return cardsBySuit;\n    }\n\n    _findMarriages(): Suit[] {\n        const marriages: Suit[] = [];\n        for(const [suit, cards] of Object.entries(this.cardsBySuit)) {\n            const l = (cards as Card[]).map((card: Card) => {return card.valueToString()});\n            const hasMarriage = (l.includes(\"Q\") && l.includes(\"K\"));\n            if(hasMarriage) {\n                marriages.push(suit as Suit);\n            }\n        }\n        return marriages;\n    }\n\n    /**\n     * Get the number of points in the hand\n     * Don't include marriages\n     */\n    getPoints(): number {\n        let pts = 0;\n        for(const cards of Object.values(this.cardsBySuit)) {\n            pts += (cards as Card[]).reduce((acc: number, cur: Card) => {\n                return acc + cur.value;\n            }, 0);\n        }\n        return pts;\n    }\n}\n\n/**\n * Standard deck in marriage\n */\nexport class Deck {\n    randomSeed: number;\n    cards: Card[];\n\n    constructor(randomSeed: number) {\n        this.randomSeed = randomSeed;\n        this.cards = [];\n\n        // create the deck\n        for(const suit of getSuits()) {\n            for(const value of getCardValues()) {\n                this.cards.push(new Card(value, suit));\n            }\n        }\n\n        // seed random number generator\n        seedrandom(randomSeed.toString(), {global: true});\n\n        console.assert(this.cards.length > 0, 'Cards must not be an empty array');\n\n        // shuffle the deck\n        this.cards = _.shuffle(this.cards);\n        console.assert(this.cards.length > 0, 'Cards must not be an empty array');\n    }\n\n    pop(): Card {\n        const card = this.cards.pop();\n        if(typeof card === \"undefined\") {\n            throw new Error(\"Deck is empty\");\n        }\n        return card;\n    }\n}","import { WEBSOCKET_SERVER, HTTP_SERVER } from './constants';\nimport { Bid, GamePhase, ITrickCard, IPastTrick, IDeal } from './game-mechanics';\nimport { Card, ICard, Suit, Hand } from './cards';\n\n// TODO this is not at all secure\nexport const ADMIN_API_KEY = \"a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\";\n\n// async function importWebsocketInNode() {\n//     const IS_BROWSER = (typeof window !== \"undefined\");\n//     if(typeof WebSocket === \"undefined\" && !IS_BROWSER) {\n//         console.debug(\"Loading websocket module outside of browser\");\n//         var WebSocket = await import(\"ws\");\n//     } else {\n//         console.log(\"Using native websocket object\");\n//         console.log(WebSocket);\n//     }\n// }\n\n// importWebsocketInNode();\n\n\nif(typeof fetch === \"undefined\" && process.env.IS_SERVER !== \"1\") {\n    // eslint-disable-next-line\n    var fetch = require(\"node-fetch\");\n}\n\nexport enum MessageType {\n    /**\n     * Lounge - initial waiting area\n     */\n\n    /**\n     * User enters the lounge. Also used for heartbeat messages\n     */\n    JOIN_LOUNGE = 'join-lounge',\n\n    /**\n     * User leaves the lounge\n     */\n    LEAVE_LOUNGE = 'leave-lounge',\n    /**\n     * Retrieve a list of users in the lounge\n     */\n    LOUNGE_USERS = 'lounge-users',\n\n    /**\n     * Request game seeds for each user in a game.\n     * Determines users' positions - lowest first and then in increasing order.\n     * These are also broadcast when a game starts and at other times.\n     */\n    GAME_SEEDS = 'game-seeds',\n\n    /**\n     * Get the game seed for the current user\n     */\n    GAME_SEED = 'game-seed',\n\n    /**\n     * User joins the game\n     */\n    JOIN_GAME = 'join-game',\n\n    /**\n     * Users leaves the game\n     */\n    LEAVE_GAME = 'leave-game',\n\n    /**\n     * Get the current users in the game\n     */\n    GAME_USERS = 'game-users',\n\n    /**\n     * tell the server there was a deal event\n     * when receiving this event, means the server has dealt cards and is ready to ask for the cards\n     */\n    BROADCAST_DEAL = 'game-deal',\n\n    /**\n     * Request your cards\n     */\n    PLAYER_CARDS = 'player-cards',\n\n    /**\n     * When new bids are created by other players, they are broadcast using this message type\n     */\n    BROADCAST_BID = 'broadcast-bid',\n\n    /**\n     * When a player fixes on a final contract, the server lets everyone know what that is\n     */\n    BROADCAST_FINAL_CONTRACT = 'broadcast-final-contract',\n\n    /**\n     * Broadcast when the contract player distributes cards.\n     * Clients are expected to poll the server to get their new cards\n     */\n    BROADCAST_DISTRIBUTE_CARDS = 'broadcast-distribute-cards',\n\n    /**\n     * Broadcast when a player plays a card on their turn\n     * Contains whether the resulting play is a marriage declaration\n     * Also contains what card the player played\n     */\n    BROADCAST_PLAY_CARD = 'broadcast-play-card',\n}\n\n/**\n * Expected fields in a message of type BROADCAST_PLAY_CARD\n */\nexport interface IPlayCardMessage {\n    gameId: string;\n    round: number;\n    msgType: MessageType.BROADCAST_PLAY_CARD;\n    player: string;\n    card: ICard;\n    isMarriage: boolean;\n    /**\n     * this is a unique string to identify this particular message\n     * this helps detect prevent parsing duplicate messages on the client\n     */\n    id: string;\n}\n\nexport interface IPlayingPhaseInfo {\n    currentTrick: ITrickCard[];\n    pastTricks: IPastTrick[];\n    /**\n     * name of the player whose turn it is\n     */\n    turn: string;\n    marriage: Suit | null;\n    /**\n     * map from player to declared marriages\n     */\n    declaredMarriages: {[key: string]: Suit[]};\n}\n\nexport interface IBidsResponse {\n    bidHistory: Bid[];\n    nextPhase: GamePhase;\n}\n\nexport interface ICreateGameResponse {\n    gameId: string;\n}\n\nexport interface IAdminResponse {\n    /**\n     * Map from gameID to GameInfo\n     */\n    games: {[key: string]: IGameInfo};\n}\n\nexport interface IGameInfo {\n    creator: string;\n    round: number;\n    hasStarted: boolean;\n    /**\n     * Map from player names to their scores in each number\n     */\n    scores: {[key: string]: number[]};\n    /**\n     * True iff this game was created to play against the computer/AI\n     */\n    isComputerOnly: boolean;\n}\n\nexport interface IRoundInfo {\n    phase: GamePhase;\n    /**\n     * Name of the player who has dealt/will deal the cards\n     */\n    dealer: string;\n    /**\n     * Name of the player whose turn it is to bid\n     * This has no meaning in rounds after BIDDING\n     */\n    biddingPlayer: string;\n    /**\n     * The winning bid during the bidding phase\n     * This has no meaning in rounds before REVEAL_TREASURE\n     */\n    winningBid: Bid | null;\n    /**\n     * The finalized contract.\n     * This has no meaning in rounds before DISTRIBUTE_CARDS\n     */\n    finalContract: Bid | null;\n}\n\nexport interface IAdminGameResponse {\n    playerNames: string[];\n    rounds: number[];\n    gameInfo: IGameInfo;\n    roundInfo: {[key: number]: IRoundInfo}\n    cardsPerRound: {[key: number]: IDeal};\n}\n\nexport class API {\n    socket: WebSocket;\n\n    constructor() {\n        this.socket = new WebSocket(WEBSOCKET_SERVER);\n    }\n\n    async getJSON(path: string, query?: {[key: string]: any}, userHeaders?: {[key: string]: string}): Promise<Response> {\n        const url = new URL(HTTP_SERVER);\n        url.pathname = path;\n        if(query) {\n            for(const [k, v] of Object.entries(query)) {\n                url.searchParams.append(k, v);\n            }\n        }\n\n        const headers = {\n            'Content-Type': 'application/json',\n        } as {[key: string]: string};\n        if(userHeaders) {\n            for(const [key, val] of Object.entries(userHeaders)) {\n                headers[key] = val;\n            }\n        }\n\n        return fetch(url.toString(), {\n            headers,\n            method: 'GET',\n            mode: 'cors',\n        });\n    }\n\n    async postJSON(path: string, data?: any, userHeaders?: {[key: string]: string}): Promise<Response> {\n        if(!data) {\n            data = {};\n        }\n        const url = new URL(HTTP_SERVER);\n        url.pathname = path;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        } as {[key: string]: string};\n        if(userHeaders) {\n            for(const [key, val] of Object.entries(userHeaders)) {\n                headers[key] = val;\n            }\n        }\n\n        return fetch(url.toString(), {\n            body: JSON.stringify(data),\n            headers,\n            method: 'POST',\n            mode: 'cors',\n        });\n    }\n\n    async getGameUsers(gameId: string): Promise<string[]> {\n        const r = await this.getJSON(`/game/${gameId}/users`);\n        if (r.ok) {\n            const j = await r.json();\n            return j;\n        } else {\n            console.error(r);\n            throw new Error(await r.text());\n        }\n    }\n\n    async getPlayerCards(gameId: string, round: number, name: string): Promise<any> {\n        const r = await this.getJSON(`/game/${gameId}/round/${round}/cards`, {\n            username: name\n        });\n        if(r.ok) {\n            const j = await r.json();\n            return j;\n        } else {\n            console.error(r);\n            throw new Error(await r.text());\n        }\n    }\n\n    async postDealCards(gameId: string, round: number, username: string): Promise<Response> {\n        const r = await this.postJSON(`/game/${gameId}/round/${round}/deal`, {\n            username: username\n        });\n        return r;\n    }\n\n    async joinGame(gameId: string, username: string): Promise<Response> {\n        const r = await this.postJSON(`game/${gameId}/join`, {\n            username: username\n        });\n        return r;\n    }\n\n    async getGameRoundInfo(gameId: string, round: number): Promise<any> {\n        const r = await this.getJSON(`/game/${gameId}/round/${round}`);\n        if(r.ok) {\n            const j = await r.json();\n            return j;\n        } else {\n            console.error(`failed to get info for game ${gameId} round ${round}`);\n        }\n    }\n\n    /**\n     * Get the entire bidding history\n     */\n    async getBids(gameId: string, round: number): Promise<IBidsResponse> {\n        const r = await this.getJSON(`/game/${gameId}/round/${round}/bids`);\n        if(r.ok) {\n            const j = await r.json();\n            return j;\n        } else {\n            throw new Error(`failed to get bids for game ${gameId} round ${round}`);\n        }\n    }\n\n    async postBid(gameId: string, round: number, username: string, points: number): Promise<Response> {\n        const r = await this.postJSON(`/game/${gameId}/round/${round}/bid`, {\n            username: username,\n            points: points,\n        });\n        return r;\n    }\n\n    async getTreasure(gameId: string, round: number): Promise<Card[]> {\n        const r = await this.getJSON(`/game/${gameId}/round/${round}/treasure`);\n        if(r.ok) {\n            const j = await r.json();\n            // make sure the return value is actually a card object\n            return j.map((item: any) => {\n                return new Card(item.value, item.suit);\n            })\n        } else {\n            throw new Error(`failed to get treasure for game ${gameId}`);\n        }\n    }\n\n    async postFinalContract(gameId: string, round: number, username: string, points: number): Promise<Response> {\n        const r = await this.postJSON(`/game/${gameId}/round/${round}/final-contract`, {\n            username: username,\n            points: points,\n        });\n        return r;\n    }\n\n    async postDistributeCards(gameId: string, round: number, username: string,\n        distributedCards: {[key: string]: Card}, keptCards: Card[]): Promise<Response> {\n        const r = await this.postJSON(`/game/${gameId}/round/${round}/distribute-cards`, {\n            username,\n            distributedCards,\n            keptCards,\n        });\n        return r;\n    }\n\n    async postPlayCard(gameId: string, round: number, username: string,\n        card: Card, isMarriage: boolean): Promise<Response> {\n        const r = await this.postJSON(`/game/${gameId}/round/${round}/play-card`, {\n            username,\n            card,\n            isMarriage,\n        });\n        if(r.ok) {\n            return r;\n        } else {\n            const t = await r.text();\n            throw new Error(`failed to play card: ${t}`)\n        }\n    }\n\n    async getPlayingPhaseInfo(gameId: string, round: number): Promise<IPlayingPhaseInfo> {\n        const r = await this.getJSON(`/game/${gameId}/round/${round}/playing-phase-info`);\n        if (r.ok) {\n            const j = (await r.json()) as IPlayingPhaseInfo;\n            if (!j) {\n                throw new Error('no playing phase info loaded');\n            }\n            j.currentTrick = j.currentTrick.map((tc: ITrickCard) => {\n                return {\n                    player: tc.player,\n                    card: new Card(tc.card.value, tc.card.suit),\n                };\n            });\n            return j;\n        } else {\n            throw new Error(`failed to get playing phase info for game ${gameId}`);\n        }\n    }\n\n    async joinLounge(username: string, isHeartbeat: boolean): Promise<Response> {\n        const r = await this.postJSON('/lounge/join', {\n            username,\n            isHeartbeat,\n        });\n        return r;\n    }\n\n    leaveLounge(username: string) {\n        this.socket.send(JSON.stringify({\n            msgType: MessageType.LEAVE_LOUNGE,\n            username: username,\n        }));\n    }\n\n    async createGame(username: string, options?: any): Promise<ICreateGameResponse> {\n        const data : any = {\n            username,\n        };\n        if (options) {\n            for (const [k, v] of Object.entries(options)) {\n                data[k] = v;\n            }\n        }\n        const r = await this.postJSON('/game/new', data);\n        const j = await r.json();\n        return j as ICreateGameResponse;\n    }\n\n    async getGameInfo(username: string, gameId: string): Promise<IGameInfo> {\n        const r = await this.getJSON(`/game/${gameId}`, {\n            username,\n        });\n        if (r.ok) {\n            const j = await r.json();\n            return j as IGameInfo;\n        } else {\n            console.error(r);\n            throw new Error(await r.text());\n        }\n    }\n\n    async postEndRound(gameId: string, round: number, username: string): Promise<Response> {\n        const r = await this.postJSON(`/game/${gameId}/round/${round}/end-round`, {\n            username,\n        });\n        return r;\n    }\n\n    /** ******** Admin APIs *********** */\n\n    async adminGetGames(): Promise<IAdminResponse> {\n        const r = await this.getJSON('/admin', {}, {\n            Authorization: `Bearer ${ADMIN_API_KEY}`,\n        });\n        if (r.ok) {\n            const j = await r.json();\n            return j as IAdminResponse;\n        } else {\n            console.error(r);\n            throw new Error(await r.text());\n        }\n    }\n\n    async adminGetGameInfo(gameId: string): Promise<IAdminGameResponse> {\n        const r = await this.getJSON(`/admin/game/${gameId}`, {}, {\n            Authorization: `Bearer ${ADMIN_API_KEY}`,\n        });\n        if (r.ok) {\n            const j = (await r.json()) as IAdminGameResponse;\n\n            // for the cards, recreate card objects\n            const rounds = Object.keys(j.cardsPerRound).map((n) => {return Number.parseInt(n, 10)});\n            rounds.forEach((round: number) => {\n                // player cards\n                const playerCards = {} as {[key: string]: Hand};\n                Object.keys(j.cardsPerRound[round].playerCards).forEach((name: string) => {\n                    const cards = j.cardsPerRound[round].playerCards[name].cards.map((card: ICard) => {\n                        return new Card(card.value, card.suit);\n                    });\n                    playerCards[name] = new Hand(cards);\n                });\n\n                // treasure cards\n                const treasureCards = j.cardsPerRound[round].treasure.map((card: ICard) => {\n                    return new Card(card.value, card.suit);\n                });\n                j.cardsPerRound[round].treasure = treasureCards;\n                j.cardsPerRound[round].playerCards = playerCards;\n            });\n\n            return j;\n        } else {\n            console.error(r);\n            throw new Error(await r.text());\n        }\n    }\n\n    /** ************* WebSocket stuff ************* */\n\n    /**\n     * Send a websocket message\n     */\n    async sendMessage(msgType: MessageType, data: any): Promise<void> {\n        const msg: any = {};\n        Object.assign(msg, data);\n        msg.msgType = msgType;\n        await this.socket.send(JSON.stringify(msg));\n    }\n\n    addMessageListener(msgTypes: MessageType[], callback: (data: any) => void): void {\n        this.socket.addEventListener('message', (event: MessageEvent) => {\n            const data = JSON.parse(event.data);\n            if(msgTypes.includes(data.msgType)) {\n                callback(data);\n            }\n        });\n    }\n}\n\nexport default API;","import { Card, Hand, CardValue, Suit, ICard, getMarriageValue } from \"./cards\";\n\nexport enum GamePhase {\n    /**\n     * The first phase - we wait until a deal is initiated\n     */\n    NOT_DEALT = 0,\n    /**\n     * The cards have been dealt and the treasure cards have been allocated\n     */\n    BIDDING = 1,\n    /**\n     * The treasure is revealed to all players\n     * The player who won the bidding phase may revise their contract up\n     */\n    REVEAL_TREASURE = 2,\n    /**\n     * The treasure cards have been moved to the player who holds the contract\n     * The contract player must now allocate one card to each opponent\n     */\n    DISTRIBUTE_CARDS = 3,\n    /**\n     * The players take tricks\n     */\n    PLAYING = 4,\n    /**\n     * All past tricks are shown and scores are calculated\n     */\n    SCORING = 5,\n}\n\nexport function gamePhaseToString(phase: GamePhase): string {\n    switch (phase) {\n        case GamePhase.NOT_DEALT:\n            return \"NOT_DEALT\";\n        case GamePhase.BIDDING:\n            return \"BIDDING\";\n        case GamePhase.REVEAL_TREASURE:\n            return \"REVEAL_TREASURE\";\n        case GamePhase.DISTRIBUTE_CARDS:\n            return \"DISTRIBUTE_CARDS\";\n        case GamePhase.PLAYING:\n            return \"PLAYING\";\n        case GamePhase.SCORING:\n            return \"SCORING\";\n    }\n}\n\nexport function getGamePhases(): GamePhase[] {\n    return [\n        GamePhase.NOT_DEALT,\n        GamePhase.BIDDING,\n        GamePhase.REVEAL_TREASURE,\n        GamePhase.DISTRIBUTE_CARDS,\n        GamePhase.PLAYING,\n        GamePhase.SCORING,\n    ];\n}\n\nexport const MIN_BID_POINTS = 60;\n\n/**\n * A bid of 0 -> pass\n */\nexport type Bid = {\n    points: number;\n    player: string;\n}\n\nexport interface ITrickCard {\n    /**\n     * Name of the player\n     */\n    player: string;\n    card: ICard;\n    /**\n     * When specified and true, whether this card represents a declared marriage\n     */\n    isMarriage?: boolean;\n}\n\nexport interface IPastTrick {\n    trick: ITrickCard[];\n    // winning player\n    winner: string;\n}\n\n/**\n * NOTE: perhaps in the future a user should manually specify this\n * For now we specify for the user\n * If they can play a marriage with a given card, they do.\n */\nexport function isMarriagePlayed(card: Card, hand: Hand, totalTricks: number, isFirstCardInTrick: boolean): boolean {\n    if (!isFirstCardInTrick) {\n        return false;\n    }\n    if ((card.value === CardValue.QUEEN || card.value === CardValue.KING) && hand.marriages.includes(card.suit)) {\n        // we have the marriage. is this the first trick\n        return totalTricks > 0;\n    }\n    return false;\n}\n\n/**\n * Return the winning card in this trick. Unlike the safe version, makes no assumptions about whether the trick has 3 cards (but must not be empty).\n * This is useful for an AI to call.\n * @param cards The cards in the trick. May not be an empty array.\n * @param trumpSuit The current trump suit\n * @returns The card in the trick that wins\n */\nexport function UNSAFE_getWinningCard(cards: ITrickCard[], trumpSuit: null | Suit): ITrickCard {\n    if (cards.length === 0) {\n        throw new Error('current trick may not be empty');\n    }\n\n    let winningP = cards[0].player;\n    let bestCard = cards[0].card;\n\n    for (const tc of cards) {\n        let isBetter = false;\n        if (trumpSuit && tc.card.suit === trumpSuit) {\n            // this player played a trump\n            if (bestCard.suit === trumpSuit) {\n                isBetter = tc.card.value > bestCard.value;\n            } else {\n                isBetter = true\n            }\n        } else if (tc.card.suit === cards[0].card.suit) {\n            // this player played in the \"correct\" suit\n            if (trumpSuit && bestCard.suit === trumpSuit) {\n                // tough luck - someone else played a trump\n                isBetter = false;\n            } else {\n                // highest card wins\n                isBetter = tc.card.value > bestCard.value;\n            }\n        } else {\n            // this player played the wrong suit and not a trump\n            isBetter = false;\n        }\n\n        if (isBetter) {\n            bestCard = tc.card;\n            winningP = tc.player;\n        }\n    }\n\n    return {\n        player: winningP,\n        card: bestCard,\n    };\n}\n\n/**\n * Return the winning card in this trick. The trick *must* have 3 cards.\n * @param cards The cards in the trick\n * @param trumpSuit The current trump suit\n * @returns The card in the trick that wins\n */\nexport function getWinningCard(cards: ITrickCard[], trumpSuit: null | Suit): ITrickCard {\n    if (cards.length !== 3) {\n        throw new Error(`There must only be 3 cards in the current trick, found ${cards.length}`);\n    }\n    return UNSAFE_getWinningCard(cards, trumpSuit);\n}\n\n/**\n * Return true iff the player can play the given card from their hand given the trick\n * Assume the card is part of the hand\n */\nexport function canPlayCard(hand: Hand, trick: ITrickCard[], card: Card, trumpSuit: Suit | null): boolean {\n    if(trick.length === 0) {\n        // they can play whatever card they want\n        return true;\n    }\n    const leadingSuit = trick[0].card.suit;\n    if(card.suit === leadingSuit) {\n        // can always play in the same suit as the first card in the trick\n        return true;\n    }\n\n    // if the player is not playing the leading card\n    // and they don't have the leading suit\n    // but they do have a trump card\n    if (hand.cardsBySuit[leadingSuit].length === 0 && trumpSuit && hand.cardsBySuit[trumpSuit].length > 0 && trick.length > 0) {\n        return card.suit === trumpSuit;\n    } else {\n        // can play any other card so long as the player has no cards in the leading suit\n        return hand.cardsBySuit[leadingSuit].length === 0;\n    }\n}\n\n/**\n * NOTE: the hand *must* include the played card (obviously)\n * Otherwise we get nonsense\n * @param hand Hand *before* this card is played (includes this card)\n * @param cardIndex Index into hand.cards\n * @param currentTrick The current trick *excluding* the current card\n * @param numPastTricks The number of tricks that have already been taken (by all players, total)\n */\nexport function doesPlayedCardDeclareMarriage (hand: Hand, cardIndex: number, currentTrick: ITrickCard[], numPastTricks: number) {\n    if (cardIndex < 0 || cardIndex >= hand.cards.length) {\n        throw new Error(`cardIndex is invalid - ${cardIndex}`);\n    }\n\n    if (currentTrick.length !== 0 || numPastTricks === 0) {\n        return false;\n    }\n\n    const card = hand.cards[cardIndex];\n\n    // check to see if they have the other card\n    if ((card.value === CardValue.KING || card.value === CardValue.QUEEN) && hand.marriages.includes(card.suit)) {\n        // console.log(`[trick ${this.state.trickNumber}] ${playerName} declared a ${card.suit} marriage`);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Compute the winning bid from the bid history\n * If all people pass, return null\n * @param {Bid[]} bidHistory\n * @returns {Bid | null} winning bid\n */\nexport function getWinningBid(bidHistory: Bid[]): Bid | null {\n    let contractPts = 0;\n    let contractPlayer : string | null = null;\n    for(const bid of bidHistory) {\n        if (bid.points > contractPts) {\n            contractPts = bid.points;\n            contractPlayer = bid.player;\n        }\n    }\n\n    if (!contractPlayer) {\n        return null;\n    }\n\n    return {\n        player: contractPlayer,\n        points: contractPts,\n    } as Bid;\n}\n\n/**\n * Count the # of points in a single trick\n * *DO NOT* round here\n */\nexport function countTrickPoints(trick: ITrickCard[]): number {\n    return trick.map((tc: ITrickCard) => {\n        return tc.card.value;\n    }).reduce((total: number, cardValue: CardValue) => {\n        return total + cardValue;\n    }, 0);\n}\n\n/**\n * Return true iff the bidding is now concluded\n * This occurs when all players have passed\n */\nexport function isBiddingComplete(bidHistory: Bid[]): boolean {\n    const passedPlayers: string[] = [];\n    let hasNonPassBid = false;\n    for(let i = 0; i < bidHistory.length; i++) {\n        let bid = bidHistory[i];\n        if (passedPlayers.includes(bid.player)) {\n            continue;\n        } else if (bid.points === 0) {\n            passedPlayers.push(bid.player);\n        } else {\n            hasNonPassBid = true;\n        }\n    }\n    return (passedPlayers.length === 3) || (hasNonPassBid && passedPlayers.length === 2);\n}\n\n/**\n * Count the # of points in all tricks. Round to nearest 5\n */\nexport function countAllTrickPoints(tricks: ITrickCard[][]): number {\n    const pts  = tricks.map((trick: ITrickCard[]) => {\n        return countTrickPoints(trick);\n    }).reduce((total: number, trickPoints: number) => {\n        return total + trickPoints;\n    }, 0);\n    if(pts % 5 < 3) {\n        // 0, 1, 2\n        return pts - (pts % 5);\n    } else {\n        // 3, 4\n        return pts + (5 - (pts % 5));\n    }\n}\n\nexport function groupTricksByPlayer(playerNames: string[], tricksTaken: IPastTrick[]): {[key: string]: ITrickCard[][]} {\n    // sort the tricks by player\n    const tricksPerPlayer: {[key: string]: ITrickCard[][]} = {};\n    playerNames.forEach((name: string) => {\n        tricksPerPlayer[name] = [];\n    })\n    tricksTaken.forEach((trick: IPastTrick) => {\n        tricksPerPlayer[trick.winner].push(trick.trick);\n    });\n    return tricksPerPlayer;\n}\n\ninterface IScores {\n    /**\n     * Scores before we factor in the contract\n     */\n    raw: {[key: string]: number};\n    /**\n     * Scores after we factor in the contract\n     */\n    final: {[key: string]: number};\n}\n\n/**\n * Compute the scores for each player in the round, taking into account who was the contract player\n * @param playerNames List of all players' names\n * @param tricksTaken A map from player names to the tricks they have taken\n * @param declaredMarriages A map from player names to the marriages they declared\n * @param contract The *final* contract\n */\nexport function computeRoundScores(\n    playerNames: string[],\n    tricksTaken: { [key: string]: ITrickCard[][] },\n    declaredMarriages: { [key: string]: Suit[] },\n    contract: Bid\n): IScores {\n    const rawPoints = {} as {[key: string]: number};\n    const finalPoints = {} as {[key: string]: number};\n\n    // first calculate the raw scores that the players earned that round\n    playerNames.forEach((name: string) => {\n        let pts = countAllTrickPoints(tricksTaken[name]);\n        if(name in declaredMarriages) {\n            declaredMarriages[name].forEach((suit: Suit) => {\n                pts += getMarriageValue(suit);\n            });\n        }\n        rawPoints[name] = pts;\n        finalPoints[name] = 0;\n    });\n\n    for (let name of playerNames) {\n        if (name === contract.player) {\n            // now figure out if the contract player fulfilled their contract\n            if (rawPoints[name] >= contract.points) {\n                finalPoints[name] = contract.points;\n            } else {\n                finalPoints[name] = -1 * contract.points;\n            }\n        } else {\n            // all other players just get their raw points\n            finalPoints[name] = rawPoints[name];\n        }\n    }\n\n    return {\n        raw: rawPoints,\n        final: finalPoints,\n    };\n}\n\n/**\n * Given the history of the scores, return a map from the player names to their current scores\n * @param round - The round for which to get the scores\n */\nexport function getLatestScores(scoreHistory: {[key: string]: number[]}, round: number): {[key: string]: number} {\n    const scores = {} as {[key: string]: number};\n    for (let [playerName, playerScores] of Object.entries(scoreHistory)) {\n        if (isNaN(playerScores[round])) {\n            throw new Error(`round ${round} scores not set in scoreHistory`);\n        }\n        scores[playerName] = playerScores[round];\n    }\n    return scores;\n}\n\n/**\n * Return the name of any players currently on the barrel\n */\nexport function getBarrelPlayers(scores: {[key: string]: number}): string[] {\n    const barrelPlayers = [] as string[];\n    Object.entries(scores).forEach(([playerName, playerScore]) => {\n        if (playerScore >= 880 && playerScore < 1000) {\n            barrelPlayers.push(playerName);\n        }\n    });\n    return barrelPlayers;\n}\n\n/**\n * Return the number of turns that a player has been on the barrel (not including any unscored turns)\n * -1 means the player is not on the barrel\n * @param round - The latest round to count in scoreHistory.\n */\nexport function getBarrelTurnCounts(scoreHistory: {[key: string]: number[]}, round: number): {[key: string]: number} {\n    const barrelTurnCounts = {} as {[key: string]: number};\n\n    Object.entries(scoreHistory).forEach(([playerName, playerScores]) => {\n        let count = -1;\n        // start with most recent turn\n        let i = round;\n\n        while ((playerScores[i] >= 880 && playerScores[i] < 1000) && i >= 0) {\n            // the player was on the barrel on turn i\n            count++;\n            i--;\n        }\n        barrelTurnCounts[playerName] = count;\n    });\n    return barrelTurnCounts;\n}\n\n/**\n * Return the number of completed rounds in the score history\n */\nexport function getRoundsComplete(scoreHistory: {[key: string]: number[]}): number {\n    for (let scores of Object.values(scoreHistory)) {\n        return scores.length - 1;\n    }\n    throw new Error('no players in score history');\n}\n\n/**\n * Update the player scores given the new scores for the round and other related information\n * The round scores should already take into account the contract, etc.\n *\n * @param scoreHistory - includes history of scores not including this most recent turn. Each entry is cumulative.\n * This method is guaranteed to *not* modify scoreHistory\n *\n * @param round - The latest round to count in scoreHistory\n * @returns The scores for the latest round we are computing. Up to the caller to insert this correctly into the score history\n */\nexport function updateScores(scoreHistory: { [key: string]: number[] }, newRoundScores: { [key: string]: number }, round: number): { [key: string]: number } {\n    const newScores = {} as {[key: string]: number};\n    const lastRoundScores = getLatestScores(scoreHistory, round);\n    const barrelTurnCounts = getBarrelTurnCounts(scoreHistory, round);\n\n    for (let player of Object.keys(newRoundScores)) {\n        // tentatively compute the player's new score\n        newScores[player] = lastRoundScores[player] + newRoundScores[player];\n\n        if (barrelTurnCounts[player] > 0) {\n            if (newScores[player] >= 1000) {\n                // round it down to 1000\n                newScores[player] = 1000;\n                // console.debug(`[updateScores] player ${player} has won after being on the barrel`);\n            } else if (barrelTurnCounts[player] === 2 && newScores[player] >= 880) {\n                // player was already on the barrel for 2 turns and their new score puts them on the barrel again\n                // NOTE: the score is <1000\n                console.assert(lastRoundScores[player] === 880);\n                newScores[player] = lastRoundScores[player] - 120;\n                // console.debug(`[updateScores] player ${player} has been on the barrel for 3 turns and is thrown off`);\n            } else if (barrelTurnCounts[player] === 2 && newScores[player] < 880) {\n                // player was already on the barrel for 2 turns but their new score throws them off the barrel\n                newScores[player] = Math.min(lastRoundScores[player] - 120, newScores[player]);\n                // console.debug(`[updateScores] player ${player} is thrown off the barrel after receiving a negative`);\n            } else if (newScores[player] >= 880 && newScores[player] < 1000) {\n                // player continues to be on the barrel\n                newScores[player] = 880;\n                // console.debug(`[updateScores] player ${player} is still on the barrel`);\n            }\n\n            // in all other cases, our player gets kicked off the barrel\n        } else {\n            // player was not on the barrel last turn\n            // can just add the score in a straightforward manner\n            if (newScores[player] >= 1000) {\n                // round it down to 1000\n                newScores[player] = 1000;\n                // console.debug(`[updateScores] player ${player} has won the game`);\n            } else if (newScores[player] >= 880 && newScores[player] < 1000) {\n                // round it down to 880\n                newScores[player] = 880;\n                // console.debug(`[updateScores] player ${player} is now on the barrel`);\n            }\n        }\n    }\n\n    return newScores;\n}\n\n/**\n * @param round - The latest round to count in scoreHistory\n */\nexport function getIsGameOver(scoreHistory: {[key: string]: number[]}, round: number): boolean {\n    const latestScores = getLatestScores(scoreHistory, round);\n    for (let score of Object.values(latestScores)) {\n        if (score >= 1000) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport type TCards = {[key: string]: Hand};\n\nexport interface IDeal {\n    playerCards: TCards;\n    treasure: Card[];\n}\n","export const WEBSOCKET_SERVER = `ws://localhost:8081`;\nexport const HTTP_SERVER = 'http://localhost:8080';\n\n/**\n * Time in ms\n */\nexport const HEARTBEAT_INTERVAL = 60 * 1000;","import * as React from 'react';\nimport { Card, Suit, suitToString, Hand } from './cards';\nimport {GamePhase} from './game-mechanics';\n\ninterface IPlayerProps {\n    index: number;\n    cards: Hand;\n    phase: GamePhase;\n}\n\n/**\n * Display the player's cards\n * Organize them by suit\n */\nexport function PlayerView(props: IPlayerProps): JSX.Element {\n    const elems = [];\n    const pts = props.cards.getPoints();\n\n    // display cards by suit\n    for(const [suit, cards] of Object.entries(props.cards.cardsBySuit)) {\n        // let cardElems = (cards as Card[]).map((card: Card) => {\n        //     return <span key={card.toString()}>{card.valueToString() }</span>;\n        // });\n        const cardElems = (cards as Card[]).map((card: Card) => {\n            return card.valueToString();\n        }).join(', ');\n\n        elems.push(<div key={`suit-${suit}-player-${props.index}-cards`}>\n            <span className='player-cards-suit'>{suitToString(suit as Suit)}</span>\n            {cardElems}\n        </div>);\n    }\n\n    // does the player have a marriage?\n    const marriages = props.cards.marriages;\n    const potentialMarriages = [];\n\n    for(const [suit, cards] of Object.entries(props.cards.cardsBySuit)) {\n        if(marriages.includes(suit as Suit)) {\n            continue;\n        }\n        const l = (cards as Card[]).map((card: Card) => {return card.valueToString()});\n        if(l.includes('Q') || l.includes('K')) {\n            potentialMarriages.push(suit);\n        }\n    }\n\n    return (<div className='player'>\n        {/* <h3>Player {props.index + 1}</h3> */}\n        { elems }\n        { props.phase !== GamePhase.PLAYING ?\n            <div>Points: {pts}</div> : null }\n        <div className='marriages'>\n            <span>Marriages: </span>\n            { marriages.length > 0 ?\n                marriages.join(', ') : 'none' }\n        </div>\n        { props.phase === GamePhase.BIDDING ?\n            <div className='potential-marriages'>\n                <span>Potential Marriages: </span>\n                { potentialMarriages.length > 0 ?\n                    potentialMarriages.join(', ') : 'none' }\n            </div> : null}\n    </div>);\n}","import React, {useState, useEffect} from 'react';\nimport API, { MessageType, IBidsResponse } from './api';\nimport {PlayerView} from './player-view';\nimport { Hand } from './cards';\nimport { GamePhase, Bid, getWinningBid } from './game-mechanics';\n\ninterface IBiddingHistoryViewProps {\n    bids: Bid[];\n    /**\n     * Whether to collapse the view initially\n     */\n    isCollapsed?: boolean;\n}\n\ninterface IBiddingHistoryViewState {\n    isCollapsed: boolean;\n}\n\nexport class BiddingHistoryView extends React.PureComponent<IBiddingHistoryViewProps, IBiddingHistoryViewState> {\n    constructor(props: IBiddingHistoryViewProps) {\n        super(props);\n        this.state = {\n            isCollapsed: this.props.isCollapsed ? true : false,\n        };\n        this.toggleCollapse = this.toggleCollapse.bind(this);\n    }\n\n    toggleCollapse(e: React.SyntheticEvent): void {\n        e.preventDefault();\n        this.setState({\n            isCollapsed: !this.state.isCollapsed,\n        });\n    }\n\n    render(): JSX.Element {\n        const highestBid = getWinningBid(this.props.bids);\n        const bidRows = this.props.bids.map((bid: Bid, i: number) => {\n            return <tr key={`}bid-row-${i}`}>\n                <td>{bid.player}</td>\n                <td>{bid.points === 0 ? 'pass' : bid.points }</td>\n            </tr>\n        });\n\n        const table = this.props.bids.length === 0 ?\n            <div>no bids yet</div> :\n            <table className='table table-striped table-sm'>\n                <thead>\n                    <tr>\n                        <th>Player</th>\n                        <th>Bid</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { bidRows }\n                </tbody>\n            </table>\n\n        return (<div className=\"bid-history-container\">\n            <h2>\n                <a href=\"#bid-collpase\" role=\"button\"\n                    onClick={(e) => {return this.toggleCollapse(e)}}>\n                    <span>Bids</span>\n                    <span>{ this.state.isCollapsed ? \"(collapsed)\" : \"\"}</span>\n                </a>\n            </h2>\n            { highestBid === null || this.state.isCollapsed ? null :\n                <div className=\"highest-bid\">Highest bid: { highestBid.points }&nbsp;({highestBid.player})</div> }\n\n            { this.state.isCollapsed ? null :\n                table }\n        </div>);\n    }\n}\n\ninterface IProps {\n    name: string;\n\n    gameId: string;\n\n    round: number;\n\n    playerNames: string[];\n\n    dealer: number;\n\n    /**\n     * The index of the *current* player\n     */\n    playerIndex: number;\n\n    api: API;\n\n    playerCards: Hand;\n\n    onNextPhase(winningBid: Bid | null): any;\n}\n\n/**\n * This view handles the bidding process\n */\nexport function BiddingView(props: IProps): JSX.Element {\n    const [bids, setBids] = useState([] as Bid[]);\n    const [biddingPlayer, setBiddingPlayer] = useState(-1);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [errorText, setErrorText] = useState(null as string | null);\n    const [fetchedBiddingHistory, setFetchedBiddingHistory] = useState(false);\n    // derived state\n    const [highestBid, setHighestBid] = useState(0);\n    /**\n     * names of players who have passed\n     */\n    const [passedPlayers, setPassedPlayers] = useState([] as string[]);\n\n    // form control\n    const [bidPoints, setBidPoints] = useState(0);\n\n    useEffect(() => {\n        if(biddingPlayer === -1) {\n            // to the dealer's left\n            setBiddingPlayer((props.dealer + 1) % 3);\n        }\n    }, [props.dealer, biddingPlayer]);\n\n    useEffect(() => {\n        function updateBidHistory(bidHistory: Bid[], lastBidder: string, nextPhase: GamePhase) {\n            // calculate next bidding player\n            const lastBidderIndex = props.playerNames.indexOf(lastBidder);\n            const nextBidderIndex = (lastBidderIndex + 1) % 3;\n            setBiddingPlayer(nextBidderIndex);\n            // add this bid to the list of bids, if not already present\n            if (bids.length !== bidHistory.length) {\n                setBids(bidHistory);\n\n                // also update passed players\n                const newPassedPlayers = bidHistory.filter((bid: Bid) => {\n                    return bid.points === 0;\n                }).map((bid: Bid) => {\n                    return bid.player;\n                });\n                setPassedPlayers(newPassedPlayers);\n            }\n            if(bidHistory.length > 0) {\n                const newHighestBid = Math.max(...bidHistory.map((bid: Bid) => {\n                    return bid.points;\n                }));\n                setHighestBid(newHighestBid);\n            } else {\n                setHighestBid(0);\n            }\n            if(nextPhase !== GamePhase.BIDDING) {\n                console.log(`we're done with bidding phase. next phase is ${nextPhase}`);\n                const winningBid = getWinningBid(bids);\n                // eslint-disable-next-line\n                props.onNextPhase(winningBid);\n            }\n        }\n\n        function onNewBid(data: any) {\n            // have to filter because it's a broadcast\n            if(data.gameId === props.gameId) {\n                return updateBidHistory(data.bidHistory, data.lastBidder, data.nextPhase);\n            }\n        }\n\n        if(!isSubscribed) {\n            props.api.addMessageListener([MessageType.BROADCAST_BID], onNewBid);\n            setSubscribed(true);\n        }\n        if(!fetchedBiddingHistory) {\n            props.api.getBids(props.gameId, props.round).then((response: IBidsResponse) => {\n                if(response.bidHistory.length > 0) {\n                    const lastBidder = response.bidHistory[response.bidHistory.length - 1].player;\n                    updateBidHistory(response.bidHistory, lastBidder, response.nextPhase);\n                }\n                setFetchedBiddingHistory(true);\n            });\n        }\n    }, [isSubscribed, fetchedBiddingHistory, bids, props]);\n\n    function handleBidSubmit (e: React.SyntheticEvent, isPass: boolean) {\n        e.preventDefault();\n        let pts = bidPoints;\n\n        if (pts && pts <= highestBid && !isPass) {\n            setErrorText(`Your bid must be over ${highestBid}`);\n            return;\n        } else {\n            setErrorText(null);\n        }\n\n        if (isPass) {\n            // overwrite points saved from form\n            pts = 0;\n        }\n        // add that bid to the bidding history\n        setBids([...bids, {\n            player: props.name,\n            points: pts,\n        }]);\n        // send the bid to the server\n        props.api.postBid(props.gameId, props.round, props.name, pts);\n    }\n\n    function handleBidChange (e: React.ChangeEvent<HTMLInputElement>) {\n        const pts = e.target.value;\n        setBidPoints(Number.parseInt(pts));\n    }\n\n    return (<div className='bidding-view'>\n        <h3>Bidding</h3>\n\n        <div>\n            <span>Player bidding:&nbsp;</span>\n            <span>{ props.playerNames[biddingPlayer] }</span>\n            { biddingPlayer === props.playerIndex ? <span>&nbsp;(you)</span> :\n                null}\n        </div>\n\n        <BiddingHistoryView\n            bids={bids} />\n\n        <h3>Your Cards</h3>\n        <div className='player-cards-view'>\n            <PlayerView\n                index={props.playerIndex}\n                cards={props.playerCards}\n                phase={GamePhase.BIDDING}\n            />\n        </div>\n\n        { props.playerIndex === biddingPlayer ?\n            <div>\n                <h4>Your Bid</h4>\n                { errorText ? <div className='alert alert-danger' role='alert'>{ errorText}</div> : null }\n                <form className='bidding-form' onSubmit={(e) => {return handleBidSubmit(e, false)}}>\n                    <label htmlFor='bid'>Bid</label>\n                    <input type='number' min={100} max={400} name='bid'\n                        placeholder='enter your bid here'\n                        className='form-control'\n                        onChange={(e) => {return handleBidChange(e)} }/>\n                    <button type='button' className='btn btn-danger'\n                        onClick={(e) => {return handleBidSubmit(e, true)}}>Pass</button>\n                    <button type='button' className='btn btn-primary'\n                        onClick={(e) => {return handleBidSubmit(e, false)}}\n                        disabled={(bidPoints <= highestBid) || passedPlayers.includes(props.name)}>Submit</button>\n                </form>\n            </div> : null}\n    </div>);\n}","import React, {useState, ChangeEvent} from 'react';\nimport { Bid, GamePhase } from './game-mechanics';\nimport { API } from './api';\nimport { Card, Hand } from './cards';\nimport { PlayerView } from './player-view';\n\ninterface IProps {\n    gameId: string;\n    // name of the current player\n    name: string;\n    playerIndex: number;\n\n    api: API;\n\n    winningBid: Bid;\n    treasure: Card[];\n    hand: Hand;\n\n    onSetFinalContract(points: number): any;\n}\n\n\nexport function RevealTreasureView(props: IProps): JSX.Element {\n    const [bidPoints, setBidPoints] = useState(props.winningBid.points);\n\n    function handleBidChange(e: ChangeEvent<HTMLInputElement>) {\n        setBidPoints(Number.parseInt(e.target.value));\n    }\n\n    function handleBidSubmit(e: React.FormEvent) {\n        e.preventDefault();\n        // eslint-disable-next-line\n        props.onSetFinalContract(bidPoints);\n    }\n\n    const cards = props.treasure.map((card: Card, i: number) => {\n        return <span key={`treasure-${i}`}>\n            {card.toString()}\n        </span>;\n    });\n\n    const winningBid = props.winningBid.player === props.name ?\n        <div>\n            <h3>Current Bid</h3>\n            <div>Your winning bid was {props.winningBid.points}</div>\n        </div> : <div>Waiting for {props.winningBid.player} to finalize contract...</div>;\n\n    let finalContractForm = null;\n    if (props.winningBid.player === props.name) {\n        finalContractForm = <div>\n            <h3>Final Contract</h3>\n            <form className='bidding-form' onSubmit={(e) => {return handleBidSubmit(e)}}>\n                <label htmlFor='bid'>Bid</label>\n                <input type='number' min={props.winningBid.points} max={400} name='bid'\n                    placeholder='enter your final contract here'\n                    className='form-control'\n                    onChange={(e) => {return handleBidChange(e)} }\n                    value={bidPoints} />\n                <button type='submit' className='btn btn-primary'\n                    disabled={(bidPoints < props.winningBid.points)}>Submit</button>\n            </form>\n        </div>;\n    }\n\n\n    return (<div className='reveal-treasure-view'>\n        {winningBid}\n\n        <h3>Treasure</h3>\n        <div>\n            { cards }\n        </div>\n        <h3>Your Cards</h3>\n        <PlayerView\n            index={props.playerIndex}\n            cards={props.hand}\n            phase={GamePhase.REVEAL_TREASURE} />\n\n        {finalContractForm}\n    </div>);\n}\n\nexport default RevealTreasureView;","import React, {useState} from 'react';\nimport { Hand, Card } from './cards';\nimport { Bid, GamePhase } from './game-mechanics';\nimport { PlayerView } from './player-view';\n\ninterface IProps {\n    gameId: string;\n    // name of the player\n    name: string;\n    playerIndex: number;\n    round: number;\n    hand: Hand;\n    treasure: Card[];\n    finalContract: Bid;\n\n    playerNames: string[];\n\n    onDistribute(distributeMap: {[key: string]: Card}, keptCards: Card[]): any;\n}\n\nexport function DistributeCardsView(props: IProps) {\n    const [distCard0, setDistCard0] = useState(-1);\n    const [distCard1, setDistCard1] = useState(-1);\n\n    if(props.name !== props.finalContract.player) {\n        return <div>\n            <div>Contract is finalized at { props.finalContract.points }</div>\n            <div>waiting for { props.finalContract.player } to distribute cards...</div>\n        </div>;\n    }\n\n    if (props.treasure.length === 0) {\n        return <div>Waiting for treasure cards...</div>;\n    }\n\n    // for this view, add the treasure to the current hand\n    const cardsCopy = props.hand.cards.slice();\n    for (const card of props.treasure) {\n        cardsCopy.push(card);\n    }\n    const bigHand = new Hand(cardsCopy);\n    // sort the cards from smallest value to largest value\n    // this is *not* a stable sort\n    bigHand.cards.sort((card1: Card, card2: Card) => {\n        return card1.value - card2.value;\n    });\n\n    const cardOptions = [];\n    for(let p = 0; p < 2; p++) {\n        // filter out those set in the other group\n        // map then filter to get the indexing right\n        cardOptions[p] = bigHand.cards.map((card: Card, i: number) => {\n            return <option value={i} key={i}>{ card.toString() }</option>;\n        })\n            .filter((item: any, i: number) => {\n                if (p === 0 && i === distCard1) {\n                    return false;\n                } else if (p === 1 && i === distCard0) {\n                    return false;\n                }\n                return true;\n            });\n        cardOptions[p].splice(0, 0,\n            <option value={-1} key={-1}>-- select one --</option>\n        );\n    }\n\n    const otherPlayers = props.playerNames.filter((name: string) => {\n        return name !== props.name;\n    });\n\n    function onDistCardChange(e: React.ChangeEvent<HTMLSelectElement>, distIndex: number) {\n        if (distIndex === 0) {\n            setDistCard0(Number.parseInt(e.target.value));\n        } else {\n            setDistCard1(Number.parseInt(e.target.value));\n        }\n    }\n\n    function onSubmit(e: React.FormEvent) {\n        e.preventDefault();\n        const distributeMap: {[key: string]: Card} = {};\n        distributeMap[otherPlayers[0]] = bigHand.cards[distCard0];\n        distributeMap[otherPlayers[1]] = bigHand.cards[distCard1];\n\n        // compute which cards the player has kept\n        const keptCards = bigHand.cards.filter((card: Card, i: number) => {\n            return i !== distCard0 && i !== distCard1;\n        });\n\n        // eslint-disable-next-line\n        props.onDistribute(distributeMap, keptCards);\n    }\n\n    return <div className='distribute-cards-view'>\n        <div>Must give away 2 cards</div>\n        <h3>Your Hand (includes treasure)</h3>\n        <PlayerView\n            index={props.playerIndex}\n            cards={bigHand}\n            phase={GamePhase.DISTRIBUTE_CARDS} />\n\n        <h3>Cards to Give Away</h3>\n        <form onSubmit={(e) => {return onSubmit(e)}}>\n            <fieldset>\n                <label htmlFor='distribute-card-0'>{ otherPlayers[0] }</label>\n                <select className='form-control' name='distribute-card-0' value={distCard0}\n                    onChange={(e) => {return onDistCardChange(e, 0)}}>\n                    { cardOptions[0] }\n                </select>\n            </fieldset>\n            <fieldset>\n                <label htmlFor='distribute-card-1'>{ otherPlayers[1] }</label>\n                <select className='form-control' name='distribute-card-1' value={distCard1}\n                    onChange={(e) => {return onDistCardChange(e, 1)}}>\n                    { cardOptions[1] }\n                </select>\n            </fieldset>\n            <button type='submit' className='btn btn-primary form-control'>Submit</button>\n        </form>\n    </div>;\n}\n\nexport default DistributeCardsView;\n","import React, {useState, useEffect} from 'react';\nimport API, { MessageType, IPlayCardMessage } from './api';\nimport { Bid, GamePhase, ITrickCard, isMarriagePlayed, getWinningCard, IPastTrick } from './game-mechanics';\nimport { PlayerView } from './player-view';\nimport { Hand, Card, Suit, cardToString } from './cards';\n\ninterface ICurrentTrickViewProps {\n    currentTrick: ITrickCard[];\n}\n\nexport function CurrentTrickView(props: ICurrentTrickViewProps) {\n    const currentTrickList = props.currentTrick.map((c: ITrickCard, i: number) => {\n        return <li key={`trick-card-${i}`}>{ c.card.toString() } - { c.player }</li>\n    });\n\n    return <div className=\"current-trick-container\">\n        <h3>Current Trick</h3>\n        { props.currentTrick.length ?\n            <ol>\n                {currentTrickList}\n            </ol>: <div>no cards in current trick</div>\n        }\n    </div>;\n}\n\ninterface IProps {\n    name: string;\n    playerIndex: number;\n\n    gameId: string;\n    round: number;\n\n    finalContract: Bid;\n    hand: Hand;\n    playerNames: string[];\n\n    api: API;\n}\n\nexport function PlayingView(props: IProps): JSX.Element {\n    const [numTricks, setNumTricks] = useState([] as number[]);\n    const [currentTrick, setCurrentTrick] = useState([] as ITrickCard[]);\n    const [marriage, setMarriage] = useState(null as Suit | null);\n    // player whose turn it is\n    const [turn, setTurn] = useState(props.finalContract.player);\n    // form state\n    const [selectedCard, setSelectedCard] = useState(-1);\n    // help us manage server message duplicates\n    const [receivedMessages, setReceivedMessages] = useState([] as string[])\n    /**\n     * The \"currentHand\" is a view of the hand in light of the trick history\n     * This is done to avoid updating the hands at all during this round\n     */\n    const [currentHand, setCurrentHand] = useState(props.hand);\n    const [hasPlayingPhaseInfo, setHasPlayingPhaseInfo] = useState(false);\n\n    async function onPlayCard(e: React.FormEvent) {\n        e.preventDefault();\n\n        if(!selectedCard) {\n            return;\n        }\n\n        // determine if playing a marriage card\n        const totalTricks = numTricks.reduce((a: number, b: number) => {\n            return a + b;\n        }, 0);\n        const card = currentHand.cards[selectedCard];\n        const isMarriage = isMarriagePlayed(card, currentHand, totalTricks, currentTrick.length === 0);\n\n        // submit the card for consideration to the server\n        await props.api.postPlayCard(props.gameId, props.round, props.name,\n            card, isMarriage);\n\n        // the playing of the card is processed in the listener\n        // here we just remove the card from the player's hand\n        const newHandCards = currentHand.cards.slice();\n        newHandCards.splice(selectedCard, 1);\n        await setCurrentHand(new Hand(newHandCards));\n    }\n\n    async function selectCard(e: React.ChangeEvent<HTMLSelectElement>) {\n        const i = Number.parseInt(e.target.value);\n        await setSelectedCard(i);\n    }\n\n    useEffect(() => {\n        async function addCardToTrick(msg: IPlayCardMessage) {\n            await setReceivedMessages([...receivedMessages, msg.id]);\n            if (msg.isMarriage) {\n                // update marriage if the last card played caused a marriage\n                await setMarriage(msg.card.suit);\n            }\n\n            const updatedTrick = [...currentTrick, {\n                card: new Card(msg.card.value, msg.card.suit),\n                player: msg.player,\n            }];\n\n            if (updatedTrick.length === 3) {\n                // figure out who won the trick\n                const winningTc = getWinningCard(updatedTrick, marriage);\n                // reset the current trick\n                await setCurrentTrick([]);\n                // update the # of tricks they won\n                const winnerIndex = props.playerNames.indexOf(winningTc.player);\n                const newNumTricks = numTricks.slice();\n                newNumTricks[winnerIndex] += 1;\n                await setNumTricks(newNumTricks);\n                // it is now their turn\n                await setTurn(winningTc.player);\n            } else {\n                await setCurrentTrick(updatedTrick);\n                const turnIndex = props.playerNames.indexOf(turn);\n                const nextTurnIndex = (turnIndex + 1) % 3;\n                await setTurn(props.playerNames[nextTurnIndex]);\n            }\n\n        }\n\n        async function getPlayingPhaseInfo() {\n            if(!hasPlayingPhaseInfo) {\n                // set this early to avoid duplicate requests because of race conditions\n                await setHasPlayingPhaseInfo(true);\n                const info = await props.api.getPlayingPhaseInfo(props.gameId, props.round);\n                await setCurrentTrick(info.currentTrick);\n                await setMarriage(info.marriage);\n                await setTurn(info.turn);\n\n                // set # tricks\n                const numTricksMap: {[key: string]: number} = {};\n                info.pastTricks.forEach((trick: IPastTrick) => {\n                    numTricksMap[trick.winner] += 1;\n                });\n                const numTricks: number[] = [];\n                props.playerNames.forEach((name: string, i: number) => {\n                    numTricks[i] = numTricksMap[name];\n                })\n                await setNumTricks(numTricks);\n\n                // work out what the current hand is, using past tricks\n                // these cards have been played\n                const playedCards = info.pastTricks.map((trick: IPastTrick) => {\n                    for(const {card, player} of trick.trick) {\n                        if (player === props.name) {\n                            return cardToString(card);\n                        }\n                    }\n                    throw new Error('card not found');\n                });\n                const unplayedCards = currentHand.cards.filter((card: Card) => {\n                    return !playedCards.includes(card.toString());\n                });\n                await setCurrentHand(new Hand(unplayedCards));\n            }\n        }\n\n        props.api.addMessageListener([MessageType.BROADCAST_PLAY_CARD], (msg: IPlayCardMessage) => {\n            if (msg.gameId === props.gameId && !receivedMessages.includes(msg.id)) {\n                addCardToTrick(msg);\n            }\n        });\n\n        // to start with, get a bunch of data on the playing phase from the server\n        getPlayingPhaseInfo();\n    });\n\n    const headerRow = props.playerNames.map((name: string, i: number) => {\n        return <th key={`trick-player-${i}`}>{name}</th>;\n    });\n    const bodyRow = props.playerNames.map((name: string, i: number) => {\n        const n = numTricks[i] || 0;\n        return <td key={`trick-num-${i}`}>{ n }</td>;\n    });\n    const cardOptions = props.hand.cards.map((card: Card, i: number) => {\n        return <option value={i} key={i}>{ card.toString() }</option>;\n    });\n    cardOptions.splice(0, 0, <option value={-1} key={-1}>-- select a card to play --</option>);\n\n    return <div className='playing-view'>\n        <h3>Final Contract</h3>\n        <div>{ props.finalContract.player } is trying to make  { props.finalContract.points } points</div>\n\n        <h3>Tricks</h3>\n        <table className='table table-striped table-sm'>\n            <thead>\n                <tr>{headerRow}</tr>\n            </thead>\n            <tbody>\n                <tr>{ bodyRow }</tr>\n            </tbody>\n        </table>\n\n        <CurrentTrickView\n            currentTrick={currentTrick} />\n\n        <h3>Your Cards</h3>\n        <PlayerView\n            index={props.playerIndex}\n            cards={currentHand}\n            phase={GamePhase.PLAYING} />\n\n        <h3>Play Card</h3>\n        { turn === props.name ?\n            <form onSubmit={(e) => {return onPlayCard(e)}}>\n                <label htmlFor='card'>Card</label>\n                <select name='card' className='form-control' required={true}\n                    onChange={(e) => {return selectCard(e)}}>{ cardOptions }</select>\n                <button type='submit' className='btn btn-primary form-control'>Play Card</button>\n            </form>:\n            <div>Waiting for {turn} to play a card...</div> }\n    </div>\n}","import React, {useState, useEffect, useCallback} from 'react';\nimport API, { MessageType } from './api';\nimport {Card, Hand} from './cards';\nimport {BiddingView} from './bidding-view';\nimport { GamePhase, Bid } from './game-mechanics';\nimport { RevealTreasureView } from './reveal-treasure-view';\nimport DistributeCardsView from './distribute-cards-view';\nimport { PlayingView } from './playing-view';\n\n\ninterface IRoundViewProps {\n    /**\n     * Name of the current player\n     */\n    name: string;\n\n    gameId: string;\n\n    /**\n     * Names of all the players\n     */\n    playerNames: string[];\n\n    /**\n     * Index of dealer in the playerNames array\n     */\n    dealer: number;\n\n    /**\n     * Index of this player\n     */\n    playerIndex: number;\n\n    api: API;\n\n    round: number;\n}\n\n/**\n * Displays the game for a single round\n */\nexport function RoundView(props: IRoundViewProps): JSX.Element {\n    const [phase, setPhase] = useState(GamePhase.NOT_DEALT);\n    const [hand, setHand] = useState(null as Hand | null);\n    const [hasRoundInfo, setHasRoundInfo] = useState(false);\n    // will be set to 3 cards when it's visible\n    const [treasure, setTreasure] = useState([] as Card[]);\n    const [winningBid, setWinningBid] = useState(null  as Bid | null);\n    const [finalContract, setFinalContract] = useState(null as Bid | null);\n\n    const getPlayerCards = useCallback(async function getPlayerCards() {\n        const playerHand = await props.api.getPlayerCards(props.gameId, props.round, props.name);\n        console.log('Got cards:');\n        console.log(playerHand);\n\n        const cards = playerHand.cards.map((playerCard: any) => {\n            return new Card(playerCard.value, playerCard.suit);\n        });\n\n        const hand = new Hand(cards);\n        setHand(hand);\n    }, [props.gameId, props.round, props.name, props.api]);\n\n    useEffect(() => {\n        async function getRoundInfo() {\n            const roundInfo = await props.api.getGameRoundInfo(props.gameId, props.round);\n            console.log(`got round info for round ${props.round}`);\n            console.log(roundInfo);\n            if (roundInfo && roundInfo.phase) {\n                setPhase(roundInfo.phase);\n                if(roundInfo.phase !== GamePhase.NOT_DEALT) {\n                    getPlayerCards();\n                }\n            }\n            if(roundInfo.finalContract) {\n                setFinalContract(roundInfo.finalContract);\n            }\n            setHasRoundInfo(true);\n        }\n\n        if(!hasRoundInfo) {\n            getRoundInfo();\n        }\n\n        props.api.addMessageListener([MessageType.BROADCAST_DEAL], (data: any) => {\n            // this is a broadcast message so have to filter\n\n            if(data.gameId === props.gameId && !hand) {\n                getPlayerCards();\n            }\n        });\n    }, [props.round, props.gameId, hand, props.api, props.name, hasRoundInfo, getPlayerCards]);\n\n    useEffect(() => {\n        // do this if the winning bid has not yet been fetched\n        async function getWinningBid() {\n            const roundInfo = await props.api.getGameRoundInfo(props.gameId, props.round);\n            await setWinningBid(roundInfo.winningBid);\n        }\n\n        async function getTreasure() {\n            const treasure = await props.api.getTreasure(props.gameId, props.round);\n            setTreasure(treasure);\n        }\n\n        if ((phase === GamePhase.REVEAL_TREASURE || phase === GamePhase.DISTRIBUTE_CARDS) && !winningBid) {\n            // get the winning bid from the server\n            getWinningBid();\n        }\n        if ((phase === GamePhase.REVEAL_TREASURE || phase === GamePhase.DISTRIBUTE_CARDS) && (!treasure || treasure.length === 0)) {\n            getTreasure();\n        }\n    }, [props.api, winningBid, phase, props.gameId, props.round, treasure]);\n\n    useEffect(() => {\n        props.api.addMessageListener([MessageType.BROADCAST_FINAL_CONTRACT], async (msg) => {\n            if (msg.gameId === props.gameId) {\n                await setPhase(GamePhase.DISTRIBUTE_CARDS);\n                await setFinalContract({\n                    points: msg.points,\n                    player: msg.player,\n                });\n            }\n        });\n    }, [props.api, props.gameId]);\n\n    useEffect(() => {\n        props.api.addMessageListener([MessageType.BROADCAST_DISTRIBUTE_CARDS], async (msg) => {\n            if (msg.gameId === props.gameId) {\n                await setPhase(GamePhase.PLAYING);\n                await getPlayerCards();\n            }\n        });\n    }, [props.api, props.gameId, getPlayerCards]);\n\n    async function handleDeal() {\n        await props.api.postDealCards(props.gameId, props.round, props.name);\n    }\n\n    async function handleSetFinalContract(points: number) {\n        await props.api.postFinalContract(props.gameId, props.round, props.name, points);\n    }\n\n    async function handleDistributeCards(distributionMap: {[key: string]: Card}, keptCards: Card[]) {\n        console.log('submitting cards for distribution:');\n        console.log(distributionMap);\n        console.log('Keeping cards:');\n        console.log(keptCards);\n        const r = await props.api.postDistributeCards(props.gameId, props.round, props.name, distributionMap, keptCards);\n        const j = await r.json()\n        console.log('server response:');\n        console.log(j);\n    }\n\n    async function handleBiddingComplete(winningBid: Bid | null) {\n        // request the treasure first to avoid duplicate requests\n        const treasure = await props.api.getTreasure(props.gameId, props.round);\n        await setPhase(GamePhase.REVEAL_TREASURE);\n        await setWinningBid(winningBid);\n        await setTreasure(treasure);\n    }\n\n    if(phase === GamePhase.NOT_DEALT) {\n        if(props.dealer === props.playerIndex) {\n            return (<div className='round-view'>\n                <button type='button' className='btn btn-lg btn-primary'\n                    onClick={() => {return handleDeal()}}>Deal</button>\n            </div>);\n        } else {\n            return <div className='round-view'>\n                <div>Waiting for {props.playerNames[props.dealer]} to deal the cards</div>\n            </div>;\n        }\n    } else if(phase === GamePhase.BIDDING) {\n        if(!hand) {\n            return <div className='round-view'>waiting for hand from server...</div>;\n        } else {\n            return <div className='round-view'>\n                <BiddingView\n                    name={props.name}\n                    gameId={props.gameId}\n                    round={props.round}\n                    playerNames={props.playerNames}\n                    dealer={props.dealer}\n                    playerIndex={props.playerIndex}\n                    api={props.api}\n                    playerCards={hand}\n                    onNextPhase={handleBiddingComplete} />\n            </div>\n        }\n    } else if(phase === GamePhase.REVEAL_TREASURE) {\n        if (!winningBid) {\n            // get the winning bid\n            return <div>Waiting for winning bid from server...</div>;\n        } else if (!hand) {\n            return <div>Waiting for hand from server...</div>\n        } else {\n            return <div className='round-view'>\n                <RevealTreasureView\n                    name={props.name}\n                    playerIndex={props.playerIndex}\n                    gameId={props.gameId}\n                    winningBid={winningBid}\n                    api={props.api}\n                    treasure={treasure}\n                    hand={hand}\n                    onSetFinalContract={handleSetFinalContract} />\n            </div>\n        }\n    } else if(phase === GamePhase.DISTRIBUTE_CARDS) {\n        if (!finalContract) {\n            // get the winning bid\n            return <div>Waiting for final contract from server...</div>;\n        } else if (!hand) {\n            return <div>Waiting for hand from server...</div>\n        } else {\n            return <div className='round-view'>\n                <DistributeCardsView\n                    name={props.name}\n                    gameId={props.gameId}\n                    playerIndex={props.playerIndex}\n                    round={props.round}\n                    hand={hand}\n                    treasure={treasure}\n                    finalContract={finalContract}\n                    playerNames={props.playerNames}\n                    onDistribute={handleDistributeCards} />\n            </div>;\n        }\n    } else if(phase === GamePhase.PLAYING) {\n        if (!finalContract) {\n            return <div>Waiting for final contract from server...</div>;\n        } else if (!hand) {\n            return <div>Waiting for hand from server...</div>;\n        } else {\n            return <div className='round-view'>\n                <PlayingView\n                    name={props.name}\n                    playerIndex={props.playerIndex}\n                    gameId={props.gameId}\n                    round={props.round}\n                    finalContract={finalContract}\n                    hand={hand}\n                    playerNames={props.playerNames}\n                    api={props.api} />\n            </div>;\n        }\n    } else {\n        throw new Error(`unknown phase: ${phase}`);\n    }\n}\n\nexport default RoundView;\n","/**\n * This view shows the *overall* scores of the players\n */\n\nimport React, { useState, FC } from 'react';\n\ninterface IScoreViewProps {\n    // map from user to score\n    scores: {[key: string]: number[]};\n    // order in which users should be displayed\n    playerNames: string[];\n    /**\n     * True if should initially be displayed as collapsed\n     */\n    isCollapsed?: boolean;\n\n    /**\n     * The current round\n     */\n    round: number;\n\n    /**\n     * The currently selected round\n     */\n    selectedRound?: number;\n}\n\n/**\n * Shows the scores for all players across all rounds of the game\n */\nconst ScoreView : FC<IScoreViewProps> = (props: IScoreViewProps) => {\n    const [isCollapsed, setCollapsed] = useState(props.isCollapsed ? true : false);\n\n    function toggleCollapsed(e: React.SyntheticEvent) {\n        e.preventDefault();\n        setCollapsed(!isCollapsed);\n    }\n\n    const headerRow = props.playerNames.map((name: string) => {\n        return <th key={`header-row-${name}`}>{ name }</th>;\n    });\n    const rounds: number[] = [];\n    for(let round = 0; round < props.round; round++) {\n        rounds.push(round);\n    }\n\n    const scoreRows = rounds.map((round: number) => {\n        const scoreRow = props.playerNames.map((name: string) => {\n            return <td key={`score-row-${name}-round-${round}`}>{ props.scores[name][round] || 0 }</td>;\n        });\n        const classes : string[] = [];\n        if (props.selectedRound === round) {\n            classes.push('table-warning');\n        }\n        return (<tr key={`score-row-${round}`} className={classes.join(' ')}>\n            {scoreRow}\n        </tr>);\n    });\n\n    return (<div className='score-view'>\n        <h2>\n            <a href=\"#scoring-table\" role=\"button\" data-toggle=\"collapse\" data-target=\"#scoring-table\"\n                aria-expanded={!isCollapsed} aria-controls=\"#scoring-table\"\n                onClick={(e) => {return toggleCollapsed(e)}}>\n                <span>Player Scores</span>\n                { isCollapsed ? <span>&nbsp;(collapsed)</span> : null }\n            </a>\n        </h2>\n\n        { isCollapsed ? null :\n            <table className='table table-striped table-sm' id=\"scoring-table\">\n                <thead>\n                    <tr>\n                        { headerRow }\n                    </tr>\n                </thead>\n                <tbody>\n                    { scoreRows }\n                </tbody>\n            </table> }\n    </div>)\n};\n\nexport {\n    ScoreView,\n};\nexport default ScoreView;","import React from \"react\";\nimport { API, MessageType } from './api';\nimport { HEARTBEAT_INTERVAL } from './constants';\nimport RoundView from \"./round-view\";\nimport { ScoreView } from './score-view';\n\n/**\n * A bid of 0 -> pass\n */\ntype Bid = {\n    points: number;\n    player: number;\n}\n\ninterface IBidProps {\n    bids: Bid[];\n}\n\nexport function BidView(props: IBidProps): JSX.Element {\n    if(props.bids.length === 0) {\n        return <div>no bids</div>;\n    }\n    const bids = props.bids.map((bid: Bid, i: number) => {\n        return (<div key={`bid-${i}`}>\n            Player {bid.player + 1} bid {bid.points === 0 ? \"pass\" : bid.points}\n        </div>);\n    });\n    return (<div>\n        {bids}\n    </div>);\n}\n\ninterface IGameViewProps {\n    api: API;\n\n    gameId: string;\n\n    /**\n     * name of the user\n     */\n    name: string;\n}\n\ninterface IGameViewState {\n    isGameOver: boolean;\n    gameSeeds: any;\n    round: number;\n    scores: {[key: string]: number[]};\n    playerNames: string[];\n    dealer: number;\n    playerIndex: number;\n}\n\n/**\n * This component displays the entire *game*\n * Not a single round of the game. The *game*\n */\nexport class GameView extends React.Component<IGameViewProps, IGameViewState> {\n    constructor(props: IGameViewProps) {\n        super(props);\n        this.state = {\n            isGameOver: false,\n            gameSeeds: {},\n            /**\n             * how many rounds have been played thus far\n             */\n            round: 0,\n            /**\n             * Map from name to score\n             */\n            scores: {},\n\n            /**\n             * In the correct order based on gameSeeds\n             */\n            playerNames: [],\n            /**\n             * Track the dealer\n             */\n            dealer: 0,\n            playerIndex: -1,\n        };\n\n        this.sendHeartbeat = this.sendHeartbeat.bind(this);\n        this.startHeartbeatTimer = this.startHeartbeatTimer.bind(this);\n        this.getPlayerNames = this.getPlayerNames.bind(this);\n    }\n\n    sendHeartbeat(): void {\n        this.props.api.sendMessage(MessageType.JOIN_GAME, {\n            gameId: this.props.gameId,\n            username: this.props.name,\n            isHeartbeat: true,\n        });\n        window.setTimeout(() => {\n            this.sendHeartbeat();\n        }, HEARTBEAT_INTERVAL);\n    }\n\n    startHeartbeatTimer(): void {\n        this.sendHeartbeat();\n    }\n\n    /**\n     * set player names based on seeds\n     * lower player goes first\n     */\n    getPlayerNames(gameSeeds: any): string[] {\n        const players = Object.keys(gameSeeds);\n        players.sort((user1: string, user2: string) => {\n            return this.state.gameSeeds[user1] - this.state.gameSeeds[user2];\n        });\n        return players;\n    }\n\n    componentDidMount(): void {\n        this.props.api.addMessageListener([MessageType.GAME_SEEDS], (data: any) => {\n            console.log(`Got game seeds from server for game ${data.gameId}:`);\n            console.log(data);\n            if(data.gameId === this.props.gameId) {\n                const seeds: any = {};\n                let scores: any = {};\n                // make sure that the seeds are in the right format\n                for(const [user, seed] of Object.entries(data.seeds)) {\n                    if(typeof seed === 'number') {\n                        seeds[user] = seed;\n                    } else {\n                        seeds[user] = Number.parseFloat(seed as string);\n                    }\n                }\n                // get score from server if included in the same message\n                if(data.scores) {\n                    scores = data.scores;\n                } else {\n                    // otherwise all scores are zeros\n                    for(const user of Object.keys(seeds)) {\n                        scores[user] = [0];\n                    }\n                }\n                // get round from server if included in the same message\n                let round = 0;\n                if(data.round) {\n                    round = data.round;\n                }\n                // get dealer from server if included in the same message\n                let dealer = 0;\n                if(data.dealer) {\n                    dealer = data.dealer;\n                }\n                const playerNames = this.getPlayerNames(seeds);\n                this.setState({\n                    gameSeeds: seeds,\n                    scores: scores,\n                    playerNames: playerNames,\n                    dealer: dealer,\n                    playerIndex: playerNames.indexOf(this.props.name),\n                    round: round,\n                });\n            }\n        });\n\n        if(Object.keys(this.state.gameSeeds).length === 0) {\n            // just in case\n            this.props.api.sendMessage(MessageType.GAME_SEEDS, {\n                gameId: this.props.gameId,\n                username: this.props.name,\n            });\n        }\n\n        // send a regular heartbeat message\n        this.startHeartbeatTimer();\n    }\n\n    render(): JSX.Element {\n        return (<div className='game-view'>\n            <ScoreView scores={this.state.scores}\n                playerNames={this.state.playerNames}\n                round={this.state.round} />\n            { this.state.playerNames ?\n                <RoundView\n                    gameId={this.props.gameId}\n                    round={this.state.round}\n                    name={this.props.name}\n                    playerNames={this.state.playerNames}\n                    dealer={this.state.dealer}\n                    playerIndex={this.state.playerIndex}\n                    api={this.props.api} /> :\n                <div>Waiting for player names from server...</div> }\n        </div>);\n    }\n}","import React from 'react';\n\ninterface IGameLobbyProps {\n    waitingUsers: string[];\n    name: string;\n    gameId: string | null;\n}\n\nexport function GameLobby(props: IGameLobbyProps): JSX.Element {\n\n    const users = [...props.waitingUsers, props.name].map((username: string, i: number) => {\n        if(username === props.name) {\n            return <li key={`lobby-user-${i}`}>{ username } (you)</li>\n        } else {\n            return <li key={`lobby-user-${i}`}>{ username }</li>\n        }\n    });\n\n    return <div className='game-lobby'>\n        <h3>Game ID: { props.gameId }</h3>\n        <p>Waiting for other players to join...</p>\n\n        <h2>Users</h2>\n        <ul className='waiting-users'>\n            { users }\n        </ul>\n    </div>;\n}\n\nexport default GameLobby;","export function readCookies(): any {\n    const pairs = document.cookie.split('; ');\n    const cookies : any = {};\n    pairs.forEach((pair: string) => {\n        if(pair.length > 0) {\n            const [k, v] = pair.split('=');\n            cookies[k] = v;\n        }\n    });\n    return cookies;\n}\n\nexport function readNameCookie(): string | null {\n    const cookies = readCookies();\n    return cookies.name || null;\n}\n\nexport function setNameCookie(name: string): void {\n    document.cookie = `name=${name}`;\n}","import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {GameView} from './game-view'\nimport {GameLobby} from './lobby';\nimport {readNameCookie} from './name-cookie';\nimport {API, MessageType, IGameInfo} from './api';\n\n\n\nfunction readGameId(): string | null {\n    const u = new URL(window.location.href);\n    return u.searchParams.get('gameid') || null;\n}\n\n/**\n * This component is the parent component of the game view (server only)\n * Shows all things related to the game\n */\nfunction App(): JSX.Element {\n    /**\n\t * True iff there are 3 players who have joined this game\n     * OR if this is a computer-only game\n\t */\n    const [hasStarted, setHasStarted] = useState(false);\n    const [gameId, setGameId] = useState(null as string | null);\n\n    const api = new API();\n\n    /**\n\t * Lounge variables\n\t */\n    const [name, setName] = useState('' as string);\n    const [waitingUsers, setWaitingUsers] = useState([] as string[]);\n\n    function onDisconnect() {\n        api.sendMessage(MessageType.LEAVE_GAME, {\n            username: name,\n            gameId: gameId,\n        })\n    }\n\n    useEffect(() => {\n        function onGameUsers(j: any) {\n            console.log(`Received message of type ${j.msgType} for game ${j.gameId}`);\n            console.log(j);\n            if(j.gameId === gameId) {\n                // remove myself\n                const waitingUsers = j.users.filter((user: string) => {\n                    return user !== name;\n                });\n                console.log(\"got waiting users from server:\");\n                console.log(waitingUsers);\n                setWaitingUsers(waitingUsers);\n\n                // so there are 3 including yourself\n                if(waitingUsers.length === 2) {\n                    setHasStarted(true);\n                }\n            }\n        }\n\n        async function joinGame (gameId: string, username: string) {\n            console.debug(`joining game ${gameId}...`);\n            const r = await api.joinGame(gameId, username);\n            if (r.ok) {\n                const j = await r.json();\n                console.debug('Game details:');\n                console.debug(j);\n            } else {\n                console.error('Failed to join game')\n            }\n        }\n\n        // read the gameId\n        const gameId = readGameId()\n        if(gameId) {\n            setGameId(gameId);\n        } else {\n            window.location.href = '/lounge';\n            return;\n        }\n\n        // read the name\n        const name = readNameCookie();\n        if(name) {\n            setName(name);\n        } else {\n            // name not set. go back to where it can be set\n            window.location.href = '/lounge';\n            return;\n        }\n\n        console.debug(`getting game info for game ${gameId}...`);\n        api.getGameInfo(name, gameId)\n            .then((gameInfo: IGameInfo) => {\n                console.debug('game info:');\n                console.debug(gameInfo);\n            });\n\n        api.socket.onopen = (e: Event) => {\n            console.debug('Connected to API websocket');\n            api.addMessageListener([MessageType.GAME_USERS], onGameUsers);\n            joinGame(gameId, name);\n        };\n    }, []);\n\n    if(hasStarted) {\n        if(!gameId || !name) {\n            // gameId and name must be set at this point\n            window.location.href = '/lounge';\n        }\n        return (\n            <div className='App'>\n                <header>\n                    <div className='game-id'>Game ID: { gameId }</div>\n                </header>\n                <main className=\"container app-main-container\">\n                    <GameView\n                        api={api}\n                        gameId={gameId as string}\n                        name={name as string} />\n                </main>\n            </div>\n        );\n    } else {\n        return (<main className=\"container app-main-container\">\n            <GameLobby\n                name={name}\n                gameId={gameId}\n                waitingUsers={waitingUsers} />\n        </main>);\n    }\n}\n\nexport default App;\n","import React, {useState, useEffect, FC} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './lounge.css'\nimport {readNameCookie, setNameCookie} from '../name-cookie';\nimport { MessageType, API, ICreateGameResponse } from '../api';\n\ninterface INameProps {\n    onNameSet(name: string): void;\n    errorMsg?: string;\n}\n\nfunction LoungeNameForm(props: INameProps) {\n    const [name, setName] = useState(null as string | null);\n\n    useEffect(() => {\n        const name = readNameCookie();\n        if(name) {\n            setName(name);\n            props.onNameSet(name);\n        }\n    }, [props]);\n\n    function handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setName(e.target.value);\n    }\n\n    function onNameSubmit(e: React.SyntheticEvent) {\n        e.preventDefault();\n        if(name) {\n            setNameCookie(name);\n            props.onNameSet(name);\n        }\n    }\n\n    let errorAlert = null;\n    if (props.errorMsg) {\n        errorAlert = (\n            <div className=\"alert alert-danger\">\n                <strong>error!</strong>&nbsp;{props.errorMsg}\n            </div>);\n    }\n\n    return (<div>\n        <h1>Welcome to the Tysyacha Lounge</h1>\n\n        {errorAlert}\n\n        <p>Please enter your name to continue</p>\n        <form className='name-form' onSubmit={(e) => onNameSubmit(e)}>\n            <label htmlFor='name'>Name</label>\n            <input type='text' className='form-control' placeholder='name' required={true}\n                onChange={(e) => handleNameChange(e) }/>\n            <button type='submit' className='btn btn-primary form-control'>Continue</button>\n        </form>\n    </div>);\n}\n\ninterface ICreateGameProps {\n    username: string;\n    gameId: string | null;\n    api: API;\n    onGameCreated: (gameId: string) => any;\n}\n\nconst CreateGameView : FC<ICreateGameProps> = (props: ICreateGameProps) => {\n    useEffect(() => {\n        if(!props.gameId) {\n            props.api.createGame(props.username).then((createGameData: ICreateGameResponse) => {\n                props.onGameCreated(createGameData.gameId);\n            });\n        }\n    }, [props]);\n\n    if(props.gameId) {\n        return <div className='create-game-view'>\n            <p>New game created! Share this code with your friends to play with them.</p>\n\n            <form>\n                <input type='text' className='form-control'\n                    value={props.gameId} readOnly={true} />\n                <a className='btn btn-lg btn-primary form-control' href={`/game?gameid=${props.gameId}`}>Go To Game</a>\n            </form>\n        </div>\n    } else {\n        return <div className='create-game-view'>\n            creating new game...\n        </div>;\n    }\n};\n\ninterface IJoinGameViewProps {\n    name: string;\n    api: API;\n}\n\nconst JoinGameView : FC<IJoinGameViewProps> = (props: IJoinGameViewProps) => {\n    const [gameId, setGameId] = useState('' as string);\n\n    function handleSubmit(e: React.FormEvent) {\n        e.preventDefault();\n\n        // leave the lounge\n        props.api.leaveLounge(props.name);\n\n        window.location.href = `/game?gameid=${gameId}`;\n    }\n\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setGameId(e.target.value);\n    }\n\n    return <div className='join-game-view'>\n        <p>When your friend creates a game they will send you a short code that you can enter below to join their game</p>\n        <form onSubmit={(e) => handleSubmit(e)}>\n            <label htmlFor='game_id'>Game ID</label>\n            <input type='text' className='form-control' required={true}\n                placeholder='paste your game ID here'\n                onChange={(e) => handleChange(e)}\n                name='game_id' />\n            <button type='submit' className='btn btn-lg btn-primary form-control'>Join Game</button>\n        </form>\n    </div>\n};\n\ninterface ILoungeState {\n    name: string | null;\n    loungeUsers: string[];\n    showGameCreation: boolean;\n    showGameJoin: boolean;\n    newGameId: string | null;\n    isSocketError: boolean;\n}\n\ninterface ILoungeProps {}\n\n/**\n * This is the component rendered when user first connects to the server\n * Handles username registration and game creation\n */\nclass Lounge extends React.Component<ILoungeProps, ILoungeState> {\n    private api: API;\n\n    constructor(props: ILoungeProps) {\n        super(props);\n\n        this.state = {\n            name: null,\n            loungeUsers: [],\n            showGameCreation: false,\n            showGameJoin: false,\n            newGameId: null,\n            isSocketError: false,\n        };\n\n        this.api = new API();\n\n        this.handleNameSet = this.handleNameSet.bind(this);\n        this.onWebSocketMessage = this.onWebSocketMessage.bind(this);\n        this.showCreateGame = this.showCreateGame.bind(this);\n        this.handleGameCreated = this.handleGameCreated.bind(this);\n        this.createAiGame = this.createAiGame.bind(this);\n    }\n\n    componentDidMount() {\n        document.title = 'Tysyacha Lounge';\n        this.api.socket.onmessage = this.onWebSocketMessage;\n        this.api.socket.onerror = (event: Event) => {\n            console.error('Observed error in API websocket:');\n            console.error(event);\n            this.setState({\n                isSocketError: true,\n            });\n        };\n        this.api.socket.onopen = (event: Event) => {\n            console.log('API websocket opened successfully');\n            // once connected, request users\n            if(this.state.name) {\n                // this is async\n                this.api.joinLounge(this.state.name, false);\n            }\n\n            // send a heartbeat message every minute\n            window.setTimeout(() => {\n                if(this.state.name) {\n                    // this is async\n                    this.api.joinLounge(this.state.name, true);\n                }\n            }, 60 * 1000);\n        };\n    }\n\n    handleGameCreated(gameId: string) {\n        if(!this.state.name) {\n            throw new Error('name must be set in this method');\n        }\n        this.setState({\n            newGameId: gameId,\n        });\n    }\n\n    onWebSocketMessage(event: MessageEvent) {\n        this.setState({\n            isSocketError: false,\n        });\n        console.log('Received message over websocket:');\n        if(event.data) {\n            const j = JSON.parse(event.data);\n            console.log(j);\n            switch(j.msgType) {\n                case MessageType.LOUNGE_USERS:\n                    this.setState({\n                        loungeUsers: j.users\n                    });\n                    break;\n                case MessageType.GAME_USERS:\n                    // ignore this message type\n                    break;\n                default:\n                    console.error(`Got unknown msg type: ${j.msgType}`);\n                    break;\n            }\n        }\n    }\n\n    showCreateGame(show: boolean) {\n        // leave the lounge\n        if(this.state.name) {\n            this.api.leaveLounge(this.state.name);\n        }\n\n        this.setState({\n            showGameCreation: show\n        });\n    }\n\n    showJoinGame(show: boolean) {\n        this.setState({\n            showGameJoin: show\n        });\n    }\n\n    handleNameSet(newName: string): void {\n        this.setState({\n            name: newName\n        });\n    }\n\n    createAiGame(): void {\n        if(!this.state.name) {\n            throw new Error('must have name to use this method');\n        }\n        this.api.createGame(this.state.name, {\n            isComputerOnly: true,\n        }).then((createGameData: ICreateGameResponse) => {\n            if(!this.state.name) {\n                throw new Error('must have name to use this method');\n            }\n            this.api.leaveLounge(this.state.name);\n            window.location.href = `/game?gameid=${createGameData.gameId}`;\n        });\n    }\n\n    render(): JSX.Element {\n        if(this.state.showGameCreation && this.state.name) {\n            return (<main className='container'>\n                <CreateGameView\n                    api={this.api}\n                    gameId={this.state.newGameId}\n                    username={this.state.name}\n                    onGameCreated={this.handleGameCreated} />\n            </main>);\n        } else if(this.state.showGameJoin && this.state.name) {\n            return (<main className='container'>\n                <JoinGameView name={this.state.name} api={this.api} />\n            </main>);\n        } else if(this.state.name) {\n            const peopleInLounge = this.state.loungeUsers.filter((user: string) => {\n                return user !== this.state.name;\n            }).map((user: string, i: number) => {\n                return <div key={`lounge-user-${i}`}>{ user }</div>;\n            });\n\n            return (<main className='container'>\n                <h1>Welcome to the Tysyacha Lounge</h1>\n                <div>Username: {this.state.name}</div>\n\n                <div className='btn-container'>\n                    <button type='button' className='btn btn-lg btn-primary'\n                        onClick={() => this.showCreateGame(true)}>Play vs Friends</button>\n                    <button type='button' className='btn btn-lg btn-info'\n                        onClick={() => this.createAiGame()}>Play vs Computer</button>\n                    <button type='button' className='btn btn-lg btn-secondary'\n                        onClick={() => this.showJoinGame(true)}>Join Existing Game</button>\n                </div>\n\n                <h2>Other People in Lounge</h2>\n                { peopleInLounge.length ?\n                    peopleInLounge :\n                    <div>lounge is currently empty</div>}\n            </main>);\n        } else {\n            return (<main className='container'>\n                <LoungeNameForm onNameSet={this.handleNameSet} />\n            </main>);\n        }\n    }\n\n\n}\n\nexport default Lounge;","import React, { FC } from \"react\";\nimport { CardValue, Suit, valueToString } from \"../cards\";\n\ninterface ICardViewProps {\n    suit: Suit;\n    value: CardValue;\n\n    /**\n     * Additional class names to add to this card\n     */\n    classNames?: string[];\n\n    /**\n     * If an on-click handler is specified, the card-active class is added\n     */\n    onClick?: (e: React.SyntheticEvent) => any;\n\n    /**\n     * Whether to show the back of the card instead of the front\n     * False by default\n     */\n    showBack?: boolean;\n\n    /**\n     * If true, this card has been selected\n     */\n    isSelected?: boolean;\n}\n\nexport const CardView : FC<ICardViewProps> = (props: ICardViewProps) => {\n\n    function getSuitColor(suit: Suit): string {\n        switch(suit) {\n            case Suit.CLUBS:\n            case Suit.SPADES:\n                return \"black\";\n            case Suit.DIAMONDS:\n            case Suit.HEARTS:\n                return \"red\";\n        }\n    }\n\n    const suitColor = getSuitColor(props.suit);\n    const classes = [\"playing-card\", \"card-\" + suitColor];\n    if(props.onClick) {\n        classes.push(\"card-active\");\n    }\n    if(props.classNames) {\n        classes.push(...props.classNames);\n    }\n    if (props.isSelected) {\n        classes.push(\"card-selected\");\n    }\n    if(props.showBack) {\n        classes.push(\"card-back\");\n    }\n\n    if (props.showBack) {\n        // return an empty div so user cannot highlight to see the suit/value\n        return <div className={ classes.join(\" \")}></div>\n    }\n\n    return (<div className={ classes.join(\" \") }\n        onClick={(e) => {return props.onClick ? props.onClick(e) : null} }>\n        <div className=\"card-top-right-corner\">\n            <span className=\"value\">{ valueToString(props.value) }</span>\n            <span className=\"suit\">{ props.suit }</span>\n        </div>\n        <div className=\"card-body\">\n        </div>\n        <div className=\"card-bottom-left-corner\">\n            <span className=\"value\">{ valueToString(props.value) }</span>\n            <span className=\"suit\">{ props.suit }</span>\n        </div>\n    </div>);\n}\n","import React, { FC } from \"react\";\nimport { Card, getSuits, Hand, Suit } from \"../cards\";\nimport { ITrickCard, GamePhase } from \"../game-mechanics\";\nimport { CardView } from \"./card-view\";\n\ninterface IPlayerViewProps {\n    /**\n     * name and index of this player\n     */\n    name: string;\n    playerIndex: number;\n\n    /**\n     * cards for this player\n     */\n    hand: Hand;\n\n    phase: GamePhase;\n\n    /**\n     * true iff this is the dealing player\n     */\n    isDealer: boolean;\n\n    /**\n     * used in playing phase\n     */\n    tricksTaken: ITrickCard[][];\n    numTricksTaken: number;\n    isContractPlayer: boolean;\n\n    /**\n     * true iff it is this player's turn\n     */\n    isActivePlayer: boolean;\n\n    /**\n     * True iff we should show this player's cards\n     */\n    showCards: boolean;\n\n    /**\n     * Indexes of the selected cards relative to `hand.cards`\n     */\n    selectedCards?: number[];\n\n    /**\n     * What to do if the user clicks a card\n     */\n    onCardSelect?: (playerIndex: number, cardIndex: number) => void;\n}\n\n/**\n * Display the cards as sorted by suit\n */\nexport const PlayerView : FC<IPlayerViewProps> = (props: IPlayerViewProps) => {\n\n    function onSelectCard(cardIndex: number): void {\n        if(props.isActivePlayer && props.onCardSelect) {\n            props.onCardSelect(props.playerIndex, cardIndex);\n        }\n    }\n\n    const cardViews = [] as JSX.Element[];\n    getSuits().forEach((suit: Suit) => {\n        props.hand.cardsBySuit[suit].forEach((card: Card) => {\n            const i = props.hand.cards.indexOf(card);\n            let onClick = undefined;\n            if(props.isActivePlayer && props.onCardSelect) {\n                onClick = (e: React.SyntheticEvent) => {return onSelectCard(i)};\n            }\n            const elem = <CardView suit={card.suit}  key={`player-card-${i}`}\n                value={card.value}\n                showBack={!props.showCards}\n                onClick={onClick}\n                isSelected={props.selectedCards && props.selectedCards.includes(i)} />;\n            cardViews.push(elem);\n        });\n    });\n\n    const addClass = props.isActivePlayer ? \"active-player\" : \"\";\n\n    return (<div className={ \"player \" + addClass }>\n        <div className=\"player-name\">\n            { props.name }\n            { props.isDealer ? \" (Dealer)\" : \"\" }\n            { props.isContractPlayer ? \" (Contract)\" : \"\" }\n            { props.phase !== GamePhase.BIDDING && props.phase !== GamePhase.REVEAL_TREASURE ?\n                <span>&nbsp;({ props.numTricksTaken } tricks taken)</span> :\n                null }\n        </div>\n        <div className=\"player-hand\">\n            { cardViews }\n        </div>\n    </div>);\n}\n","import React, { FC } from \"react\";\n\ninterface ITableViewProps {\n    playerNames: string[];\n    /**\n     * Index into playerNames\n     */\n    localPlayerIndex: number;\n\n    /**\n     * Index into playerNames\n     */\n    activePlayerIndex: number;\n}\n\n/**\n * Show a version of a card table with the players' positions at it\n */\nexport const TableView : FC<ITableViewProps> = (props: ITableViewProps) => {\n    const playerOrder = props.playerNames.map((name: string, i: number) => {\n        const classes = ['player-name'];\n        if (i === props.localPlayerIndex) {\n            classes.push('local-player');\n        }\n        if (i === props.activePlayerIndex) {\n            classes.push('active-player');\n        }\n        return <div className={classes.join(' ')} key={`player-${i}`}>\n            <span>{name}</span>\n            {props.localPlayerIndex !== i ?\n                <span>&nbsp;(AI)</span> :\n                null\n            }\n            {props.localPlayerIndex === i ?\n                <span>&nbsp;(you)</span> :\n                null}\n        </div>\n    });\n\n    return <div className='table-view'>\n        { playerOrder }\n    </div>\n};\n","/**\n * Generate a random number in the half-open interval [a, b)\n * Both a and b are assumed to be integers\n */\nexport function randInt(a: number, b: number): number {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n","/**\n * This is a temporary measure until we train a strong AI\n * For now the rules are relatively procedural\n */\n\nimport { Bid, canPlayCard, getWinningBid, ITrickCard, MIN_BID_POINTS, UNSAFE_getWinningCard } from \"../game-mechanics\";\nimport { Hand, Card, CardValue, Suit, getMarriageValue, getCardValues } from \"../cards\";\nimport { randInt } from \"../utils\";\n\n/**\n * Return true iff this hand has at least 1 ace\n */\nfunction _hasAce(hand: Hand): boolean {\n    for(let card of hand.cards) {\n        if (card.value === CardValue.ACE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction _getBestMarriageSuit(hand: Hand): Suit | null {\n    let bestSuit = null as Suit | null;\n    let bestV = 0;\n    for (let suit of hand.marriages) {\n        let v = getMarriageValue(suit)\n        if (v > bestV) {\n            bestV = v;\n            bestSuit = suit;\n        }\n    }\n    return bestSuit;\n}\n\nfunction _findCardValue(hand: Hand, cardValue: CardValue): number {\n    for(let i = 0; i < hand.cards.length; i++) {\n        let card = hand.cards[i];\n        if (card.value === cardValue) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/**\n * Make an estimation for how many points we can take with this hand\n * Return value *guaranteed* to be a multiple of 5.\n */\nfunction _evaluateHand(hand: Hand): number {\n    // TODO algo here is very primitive\n\n    if (hand.cards.length !== 7 && hand.cards.length !== 8) {\n        throw new Error(`[AI] Expected hand to have 7 or 8 cards in evaluation, found ${hand.cards.length}`);\n    }\n\n    let expectedPoints = 0;\n\n    // right now we assume we can't declare a marriage without an ace\n    const hasAce = _hasAce(hand);\n    const bestMarriageSuit = _getBestMarriageSuit(hand);\n    if (hasAce && bestMarriageSuit) {\n        expectedPoints += getMarriageValue(bestMarriageSuit);\n    }\n\n    // calculate how many points\n    for (let suit of Object.keys(hand.cardsBySuit)) {\n        const cardVals = getCardValues();\n\n        for (let i = 0; i < hand.cardsBySuit[suit].length; i++) {\n            // right now we only calculate our own points\n            let card = hand.cardsBySuit[suit][i];\n            if (card.value === cardVals[i]) {\n                expectedPoints += card.value;\n            }\n        }\n    }\n\n    if (expectedPoints % 5 <= 2) {\n        // 0, 1, 2 -> 0\n        return expectedPoints - (expectedPoints % 5);\n    } else {\n        // 3, 4 -> 5\n        return expectedPoints - (expectedPoints % 5) + 5;\n    }\n}\n\n/**\n * Return a bid given this player's hand and the bidding history\n * @param biddingHistory An array with each element representing both a bid and a player, in temporal order (last element is most recent)\n * @param hand The player's hand\n * @param playerName The name of this AI player\n * @returns A bid, representing this AI. Guaranteed to be valid.\n */\nfunction getBid(biddingHistory: Bid[], hand: Hand, playerName: string): Bid {\n    // for now the AI doesn't bluff\n\n    const winningBid = getWinningBid(biddingHistory);\n    const PASS : Bid = {\n        player: playerName,\n        points: 0,\n    };\n\n    const expectedPoints = _evaluateHand(hand);\n    console.debug(`${playerName} AI evaluated hand at ${expectedPoints} points`);\n\n    if ((winningBid && expectedPoints > winningBid.points) || (!winningBid && expectedPoints >= MIN_BID_POINTS)) {\n        return {\n            points: expectedPoints,\n            player: playerName,\n        };\n    } else {\n        return PASS;\n    }\n}\n\n/**\n * Very basic implementation of `getCard` - return a random card from the list of cards that can be played\n */\nfunction _playRandomCard(hand: Hand, currentTrick: ITrickCard[], trumpSuit: Suit | null) : number {\n    const possibleCards = hand.cards.filter((card: Card) => {\n        return canPlayCard(hand, currentTrick, card, trumpSuit);\n    });\n\n    if (possibleCards.length === 0) {\n        throw new Error(\"somehow cannot play any card in my hand\");\n    }\n\n    const i = randInt(0, possibleCards.length);\n    const card = possibleCards[i];\n    const j = hand.cards.indexOf(card);\n    if (j === -1) {\n        throw new Error('bug in playRandomCard');\n    }\n    return j;\n}\n\n/**\n * Return what card to play as the *first* card in a trick\n */\nfunction _playLeadingCard(hand: Hand, tricksTaken: {[key: string]: ITrickCard[][]}, trumpSuit: Suit | null, playerName: string): number {\n    const hasTakenTrick = tricksTaken[playerName].length > 0;\n    if (hasTakenTrick && hand.marriages.length > 0) {\n        // play our marriage\n        const bestMarriageSuit = _getBestMarriageSuit(hand);\n        if (!bestMarriageSuit) {\n            throw new Error('best marriage suit cannot be null if hand has marriages');\n        }\n        // always play the queen\n        return hand.findCard({\n            value: CardValue.QUEEN,\n            suit: bestMarriageSuit,\n        });\n    } else {\n        const hasAce = _hasAce(hand);\n        if (hasAce) {\n            // play the ace\n            return _findCardValue(hand, CardValue.ACE);\n        } else {\n            return _playRandomCard(hand, [], trumpSuit);\n        }\n    }\n}\n\n/**\n * Return what card to play as any card other than the first card in a trick\n */\nfunction _playFollowingCard(hand: Hand, currentTrick: ITrickCard[], tricksTaken: {[key: string]: ITrickCard[][]}, trumpSuit: Suit | null, playerName: string): number {\n    const leadingSuit = currentTrick[0].card.suit;\n    const winningCard = UNSAFE_getWinningCard(currentTrick, trumpSuit).card;\n\n    if (hand.cardsBySuit[leadingSuit].length > 0) {\n        // we have this suit\n\n        // since cardsBySuit ordered by value, this is the highest card\n        // not empty in this block\n        const ourBestCard = hand.cardsBySuit[leadingSuit][0];\n        let cbsIndex = 0;\n\n        if (winningCard.suit !== leadingSuit || ourBestCard.value < winningCard.value) {\n            // we are going to lose this trick. put down our lowest card.\n            cbsIndex = hand.cardsBySuit[leadingSuit].length - 1;\n        } else {\n            // we are winning this trick. put down our best card.\n            cbsIndex = 0;\n        }\n        const ourCard = hand.cardsBySuit[leadingSuit][cbsIndex];\n        const i =  hand.cards.indexOf(ourCard);\n        if (i < 0) {\n            throw new Error('AI error in leading suit logic');\n        }\n        return i;\n    } else if (trumpSuit && hand.cardsBySuit[trumpSuit].length > 0) {\n        // we don't have the leading suit but we have a trump\n        // we *do not* go into this block if the leading card was a trump\n\n        let cbsIndex = 0;\n        if (winningCard.suit === leadingSuit || winningCard.suit !== trumpSuit) {\n            // no one else has placed a trump card\n            // play our lowest trump\n            cbsIndex = hand.cardsBySuit[trumpSuit].length - 1;\n        } else {\n            // someone else has already placed a trump card\n            const ourBestCard = hand.cardsBySuit[trumpSuit][0];\n            if (ourBestCard.value > winningCard.value) {\n                // play our highest trump to beat it\n                cbsIndex = 0;\n            } else {\n                // our highest trump cannot beat it, so play our lowest trump\n                cbsIndex = hand.cardsBySuit[trumpSuit].length - 1;\n            }\n        }\n        const ourCard = hand.cardsBySuit[trumpSuit][cbsIndex];\n        const i = hand.cards.indexOf(ourCard);\n        if (i < 0) {\n            throw new Error('AI error in trump suit logic');\n        }\n        return i;\n    } else {\n        // we don't have the leading suit or a trump\n        // we will throw away our lowest remaining card\n        let lowestV = 1000;\n        let lowestCard = hand.cards[0];\n        for (let card of hand.cards) {\n            if (card.value < lowestV) {\n                lowestCard = card;\n                lowestV = card.value;\n            }\n        }\n        const i = hand.cards.indexOf(lowestCard);\n        if (i < 0) {\n            throw new Error('AI error in fall-through suit logic');\n        }\n        return i;\n    }\n}\n\n/**\n * Return the card this player will play in the current trick\n * @param hand The hand of this player\n * @param currentTrick A list of cards currently played in the current trick\n * @param tricksTaken A map from player names to an array of tricks that have already been taken.\n * Each player name is guaranteed to exist in this map (but array may be of length 0).\n * AI should probably remember this itself but it's a machine so that's not very hard.\n * @param trumpSuit Null if no current trump. Otherwise the current trump suit.\n * @returns The card index to player relative to `playerHand.cards`\n */\nfunction playCard(hand: Hand, currentTrick: ITrickCard[], tricksTaken: {[key: string]: ITrickCard[][]}, trumpSuit: Suit | null, playerName: string): number {\n    if (hand.cards.length === 0) {\n        throw new Error(\"player hand cannot be empty\");\n    }\n\n    // right now it's not very sophisticated\n    // if this is not our trick, sacrifice the lowest-value card in that suit\n    if (currentTrick.length === 0) {\n        const cardIndex = _playLeadingCard(hand, tricksTaken, trumpSuit, playerName);\n        if (cardIndex === -1) {\n            throw new Error(`[AI] bug in playLeadingCard for AI ${playerName} - returned -1`);\n        }\n        return cardIndex;\n    } else {\n        const cardIndex = _playFollowingCard(hand, currentTrick, tricksTaken, trumpSuit, playerName);\n        if (cardIndex === -1) {\n            throw new Error(`[AI] bug in playFollowingCard for AI ${playerName} - returned -1`);\n        }\n        return cardIndex;\n    }\n}\n\n/**\n * This AI holds the contract\n * Re-evaluate what we want to bid in the face of the newly revealed treasure cards\n * The number returned is *guaranteed* to be >= `currentContract`\n * @param hand Holds 7 cards, so does not include the treasure cards\n * @param treasureCards The revealed treasure cards\n */\nfunction reevalContract(hand: Hand, treasureCards: Card[], currentContract: number, playerNames: string[], playerIndex: number): number {\n    const playerName = playerNames[playerIndex];\n    if (!hand) {\n        throw new Error(`[AI] hand is undefined in reevalContract for player ${playerName}`);\n    }\n\n    // TODO for now don't gamble\n\n    const bigHandCards = [...hand.cards, ...treasureCards];\n    const bigHand = new Hand(bigHandCards);\n\n    // figure out how the cards are going to be distributed\n    const assignments = distributeCards(bigHand, playerNames, playerIndex);\n\n    // now create a hand without the cards in the assignments\n    const assignedCards = Object.values(assignments);\n    const newCards = [...bigHand.cards];\n    for (let i = 0; i < assignedCards.length; i++) {\n        const card = assignedCards[i];\n        const j = newCards.indexOf(card)\n        newCards.splice(j, 1);\n    }\n    const newHand = new Hand(newCards);\n\n    // how much can we make with that hand?\n    const newContract = _evaluateHand(newHand);\n\n    if (newContract > currentContract) {\n        return newContract;\n    } else {\n        return currentContract;\n    }\n}\n\n/**\n * Totally random card distribution, nice and simple\n */\nfunction distributeCardsRandomly(hand: Hand, playerNames: string[], playerIndex: number) {\n const assignment = {} as {[key: string]: Card};\n\n    const otherPlayerNames = playerNames.filter((name: string, i: number) => {\n        return i !== playerIndex;\n    });\n\n    // TODO assigns random cards to each of the two other players\n    for (let i = 0; i < otherPlayerNames.length; i++) {\n        let name = otherPlayerNames[i];\n        let cardIndex = randInt(0, hand.cards.length);\n        assignment[name] = hand.cards[cardIndex];\n    }\n\n    return assignment;\n}\n\n/**\n * @param hand The hand contains the treasure cards\n * @param playerNames Array of player names\n * @param playerIndex The index of this AI in the array of player names\n * @returns A map from player names to the cards they will hold\n * It is guaranteed that each player name (that is not the AI) will have a not-null card assigned to them\n */\nfunction distributeCards(hand: Hand, playerNames: string[], playerIndex: number): {[key: string]: Card} {\n    const playerName = playerNames[playerIndex];\n    const otherPlayerNames = playerNames.filter((name: string, i: number) => {\n        return i !== playerIndex;\n    });\n\n    if (otherPlayerNames.length !== 2) {\n        throw new Error('there must be exactly 2 other players');\n    }\n\n    // TODO this is a very primitive method\n    // since there are not that many possible cards to distribute, we just go over all possible cards that we might give away\n    // then evaluate the hand afterwards\n    // we can use the insight that we will never give away an ace (when we have fewer than 2 marriages) to speed up the calculation\n    // NOTE: there are some rare instances when we may want to give away an ace\n    // for example: {Hearts: [A, 10, K, Q], Diamonds: [A, 10, K, Q], Spades: [A, 9]}\n    // in this case we would want to give away the Ace of Spades\n    // however in 99% of cases we would not want to go down that road\n\n    const bestAssignment = {} as { [key: string]: Card };\n    let bestAssignmentValue = -1;\n\n    for (let i = 0; i < hand.cards.length; i++) {\n        for (let j = i + 1; j < hand.cards.length; j++) {\n            const cardA = hand.cards[i];\n            const cardB = hand.cards[j];\n            const newCards = [...hand.cards];\n            // important: splice j before i since i is greater\n            newCards.splice(j, 1);\n            newCards.splice(i, 1);\n            const newHand = new Hand(newCards);\n            const numMarriages = newHand.marriages.length;\n\n            if (numMarriages < 2 && (cardA.value === CardValue.ACE || cardB.value === CardValue.ACE)) {\n                continue;\n            }\n\n            let v = _evaluateHand(newHand);\n            if (v > bestAssignmentValue) {\n                bestAssignment[otherPlayerNames[0]] = cardA;\n                bestAssignment[otherPlayerNames[1]] = cardB;\n                bestAssignmentValue = v;\n            }\n        }\n    }\n\n    console.debug(`[AI] Best assignment gives ${playerName} an estimated ${bestAssignmentValue} points`);\n\n    return bestAssignment;\n}\n\nexport default {\n    getBid,\n    playCard: playCard,\n    reevalContract,\n    distributeCards,\n};","import React, { FC, useState } from \"react\";\nimport { Card, Hand } from \"../cards\";\nimport { PlayerView } from \"../local-components/player-view\";\nimport { GamePhase } from \"../game-mechanics\";\nimport { TableView } from \"./table-view\";\nimport AI from \"./ai\";\n\n\ninterface IDistributeCardsView {\n    // game props\n\n    playerNames: string[];\n    /**\n     * Index of the local (human) player\n     */\n    localPlayerIndex: number;\n    dealerIndex: number;\n\n    // round props\n\n    /**\n     * The player hands have been changed so that the contract player holds the treasure cards\n     */\n    playerHands: {[key: string]: Hand};\n    contractPoints: number;\n    contractPlayerIndex: number;\n\n    onDistribute: (selectedCards: {[key: string]: Card}) => any;\n}\n\n/**\n * NOTE: only show this when the *human player* is distributing the contract cards\n */\nconst DistributeCardsViewHuman: FC<IDistributeCardsView> = (props: IDistributeCardsView) => {\n    if (props.localPlayerIndex !== props.contractPlayerIndex) {\n        throw new Error('Only use this view when the human player is distributing the cards');\n    }\n\n    const contractPlayerName = props.playerNames[props.contractPlayerIndex]\n    const contractPlayerHand = props.playerHands[contractPlayerName];\n\n    // index into playerNames - who we're giving the selected card to\n    let [targetPlayer, setTargetPlayer] = useState(-1);\n    // index into contractPlayerHand\n    let [selectedCard, selectCard] = useState(-1);\n    /**\n     * The key is the person's name\n     * The value is an index into contractPlayerHand\n     */\n    let [cardDist, setCardDist] = useState({} as {[key: string]: number});\n\n\n    function handleSelectCard(playerIndex: number, cardIndex: number) {\n        console.log(cardIndex);\n        selectCard(cardIndex);\n    }\n\n    function handleSelectTarget(e: React.SyntheticEvent<HTMLInputElement>) {\n        const playerIndex = Number.parseInt((e.target as HTMLInputElement).value);\n        setTargetPlayer(playerIndex);\n    }\n\n    /**\n     * Assign the currently selected card to the currently selected player\n     */\n    function handleAssignCard() {\n        if (props.localPlayerIndex === targetPlayer) {\n            throw new Error('cannot assign cards to yourself');\n        }\n\n        const newCardDist = {} as {[key: string]: number};\n        Object.assign(newCardDist, cardDist);\n\n        const targetPlayerName = props.playerNames[targetPlayer];\n        newCardDist[targetPlayerName] = selectedCard;\n\n        // and unassign from the other player\n        let otherPlayerName = null as string | null;\n        for (let i = 0; i < props.playerNames.length; i++) {\n            if (i !== props.localPlayerIndex && i !== targetPlayer) {\n                otherPlayerName = props.playerNames[i];\n            }\n        }\n        if (otherPlayerName === null) {\n            throw new Error('failed to find other player\\'s name');\n        }\n        if (newCardDist[otherPlayerName] === newCardDist[targetPlayerName]) {\n            delete(newCardDist[otherPlayerName]);\n        }\n\n        setCardDist(newCardDist);\n    }\n\n    /**\n     * Finalize the card assignments\n     */\n    function handleFinalizeAssignments() {\n        // massage data into format expected by parent\n        const selectedCards = {} as {[key: string]: Card};\n        Object.entries(cardDist).forEach(([playerName, cardIndex]) => {\n            const card = contractPlayerHand.cards[cardIndex];\n            selectedCards[playerName] = card;\n        });\n        // and send it over\n        props.onDistribute(selectedCards);\n    }\n\n    const humanPlayerName = props.playerNames[props.localPlayerIndex];\n\n    const playerView = (<div>\n            <PlayerView\n                name={humanPlayerName}\n                playerIndex={props.localPlayerIndex}\n                hand={contractPlayerHand}\n                phase={GamePhase.BIDDING}\n                isDealer={props.localPlayerIndex === props.dealerIndex}\n                tricksTaken={[]}\n                numTricksTaken={0}\n                isContractPlayer={props.localPlayerIndex === props.contractPlayerIndex}\n                isActivePlayer={props.localPlayerIndex === props.contractPlayerIndex}\n                showCards={true}\n                onCardSelect={handleSelectCard} />\n        </div>);\n\n    const topInstructions = (<p>\n        You won the contract! You hold a contract for {props.contractPoints} points.\n        You must now select one card each to distribute to each of your two opponents.</p>);\n\n    let bottomInstructions = null;\n    if (selectedCard === -1) {\n        bottomInstructions = (<p>Select a card to give away</p>);\n    } else {\n        bottomInstructions = (<p>You have selected { contractPlayerHand.cards[selectedCard].toString() }</p>)\n    }\n\n    let elems = [] as JSX.Element[];\n    props.playerNames.forEach((name: string, index: number) => {\n        if (index !== props.localPlayerIndex) {\n            const elem = <div className=\"form-check\" key={`check-${index}`}>\n                <input className=\"form-check-input\" type=\"radio\" name=\"targetPlayer\" value={index}\n                    onChange={handleSelectTarget} />\n                <label htmlFor=\"targetPlayer\" className=\"form-check-label\">{ name }</label>\n            </div>;\n            elems.push(elem);\n        }\n    });\n    const targetPlayers = <div className=\"target-players\">\n        <p>Select the target player</p>\n        { elems }\n    </div>;\n\n    let assignmentTable = null;\n    if (Object.keys(cardDist).length > 0) {\n        let rows = [] as JSX.Element[];\n        props.playerNames.forEach((name: string, index: number) => {\n            if (index !== props.localPlayerIndex) {\n                const elem = <tr key={`row-${index}`}>\n                    <td>{ name }</td>\n                    <td>{ name in cardDist ? contractPlayerHand.cards[cardDist[name]].toString() : \"unassigned\" }</td>\n                </tr>;\n                rows.push(elem);\n            }\n        });\n\n        assignmentTable = (<div className=\"assignment-table-container\">\n            <h2>Assignments</h2>\n            <table className=\"table table-striped\">\n                <tbody>{rows}</tbody>\n            </table>\n            <button type=\"button\" className=\"btn btn-success btn-lg\"\n                disabled={Object.keys(cardDist).length !== 2}\n                onClick={handleFinalizeAssignments}>Finalize Card Assignments</button>\n        </div>);\n    }\n\n    return (<div className=\"container distribute-cards-view\">\n        <div className=\"dealt-table\">\n\n            { topInstructions }\n\n            <div className=\"player-hand-container\">\n                <h2>Your Hand</h2>\n                {playerView}\n            </div>\n\n            { bottomInstructions }\n\n            { targetPlayers }\n\n            { targetPlayer !== -1 && selectedCard !== -1 ?\n                <div>\n                    <p>Give the { contractPlayerHand.cards[selectedCard].toString() } to {props.playerNames[targetPlayer]}?</p>\n                    <button type=\"button\" className=\"btn btn-success\" onClick={handleAssignCard}>OK</button>\n                </div>\n            : null}\n\n            { assignmentTable }\n        </div>\n    </div>);\n};\n\n/**\n * Show this view if someone other than the current human player is distributing cards\n */\nconst DistributeCardsViewOther: FC<IDistributeCardsView> = (props: IDistributeCardsView) => {\n    const contractPlayerName = props.playerNames[props.contractPlayerIndex];\n    const humanPlayerName = props.playerNames[props.localPlayerIndex];\n\n    /**\n     * True iff the AI has thought and selected which cards to distribute to both players\n     */\n    let [isDistributed, setDistributed] = useState(false);\n    /**\n     * Map from a player's name to the card they will get\n     */\n    let [assignment, setAssignment] = useState({} as {[key: string]: Card})\n\n    /**\n     * Have the AI think about how it wants to distribute cards\n     */\n    function handleAIDistribute () {\n        const newAssignment = AI.distributeCards(props.playerHands[contractPlayerName], props.playerNames, props.contractPlayerIndex);\n        setAssignment(newAssignment);\n        setDistributed(true);\n    }\n\n    /**\n     * The player has viewed the card they received from the AI\n     * Kick it back to the caller\n     */\n    function handleContinue () {\n        props.onDistribute(assignment);\n    }\n\n    let playerHand = props.playerHands[humanPlayerName];\n    if (isDistributed) {\n        // create a new array\n        const playerCards = [...playerHand.cards];\n        const newCard = assignment[humanPlayerName];\n        playerCards.push(newCard);\n        // finally, change the playerHand object\n        playerHand = new Hand(playerCards);\n    }\n\n    return (<div className=\"container distribute-cards-view distribute-cards-view-other\">\n        <TableView\n            playerNames={props.playerNames}\n            localPlayerIndex={props.localPlayerIndex}\n            activePlayerIndex={props.contractPlayerIndex} />\n\n        <p className=\"instructions\">Now the contract player ({contractPlayerName}) will distribute one card to each of the other players (including you).</p>\n\n        { isDistributed ? null :\n            <button type=\"button\" className=\"btn btn-lg btn-info\"\n                onClick={handleAIDistribute}>Continue</button>\n        }\n\n        {\n            isDistributed ?\n            <div className=\"post-distribute-text\">\n                <p>You have just received the card {assignment[humanPlayerName].toString()} from {contractPlayerName}.</p>\n                <button type=\"button\" className=\"btn btn-success btn-lg\"\n                    onClick={handleContinue}>Continue</button>\n            </div>:\n            null\n        }\n\n        <div className=\"player-hand-container\">\n            <h2>Your Hand</h2>\n            <PlayerView\n                name={humanPlayerName}\n                playerIndex={props.localPlayerIndex}\n                // reflects the state of the hand before and after card distribution\n                hand={playerHand}\n                phase={GamePhase.DISTRIBUTE_CARDS}\n                isDealer={props.localPlayerIndex === props.dealerIndex}\n                tricksTaken={[]}\n                numTricksTaken={0}\n                isContractPlayer={false}\n                isActivePlayer={false}\n                showCards={true} />\n        </div>\n    </div>);\n};\n\nconst DistributeCardsView: FC<IDistributeCardsView> = (props: IDistributeCardsView) => {\n    if (props.localPlayerIndex === props.contractPlayerIndex) {\n        return <DistributeCardsViewHuman\n            playerNames={props.playerNames}\n            localPlayerIndex={props.localPlayerIndex}\n            dealerIndex={props.dealerIndex}\n            playerHands={props.playerHands}\n            contractPoints={props.contractPoints}\n            contractPlayerIndex={props.contractPlayerIndex}\n            onDistribute={props.onDistribute} />\n    } else {\n        return <DistributeCardsViewOther\n            playerNames={props.playerNames}\n            localPlayerIndex={props.localPlayerIndex}\n            dealerIndex={props.dealerIndex}\n            playerHands={props.playerHands}\n            contractPoints={props.contractPoints}\n            contractPlayerIndex={props.contractPlayerIndex}\n            onDistribute={props.onDistribute} />\n    }\n};\n\nexport {\n    DistributeCardsView,\n};","/**\n * This view shows the scoring for the given round\n */\n\nimport React, { FC } from \"react\";\nimport { Bid, computeRoundScores, ITrickCard } from \"../game-mechanics\";\nimport { Suit } from \"../cards\";\nimport { CardView } from \"./card-view\";\n\ninterface IScoringViewProps {\n    contract: Bid;\n    // this is perhaps redundant information\n    contractPlayerIndex: number;\n\n    playerNames: string[];\n    tricksTaken: {[key: string]: ITrickCard[][]};\n    declaredMarriages: {[key: string]: Suit[]};\n\n    onFinish?: (scores: {[key: string]: number}) => any;\n}\n\nexport const RoundScoringView : FC<IScoringViewProps> = (props: IScoringViewProps) => {\n    if(!props.declaredMarriages) {\n        throw new Error('declared marriages is null');\n    }\n    // calculate final points\n    const scores = computeRoundScores(props.playerNames, props.tricksTaken, props.declaredMarriages, props.contract);\n    const finalPoints = scores.final;\n    const rawPoints = scores.raw;\n    // did the contract player succeed\n    const contractPlayer = props.contract.player;\n    const isContractMade = finalPoints[contractPlayer] > 0;\n\n    // show the tricks\n    const playerTricks = props.playerNames.map((name: string, playerIndex: number) => {\n        const tricksTaken = props.tricksTaken[name];\n        const tricks = tricksTaken.map((trick: ITrickCard[], trickIndex: number) => {\n            const cards = trick.map((tc: ITrickCard, cardIndex: number) => {\n                return <CardView key={`player-${playerIndex}-tricks-taken-${trickIndex}-card-${cardIndex}`}\n                    classNames={[`trick-card-${cardIndex}`]}\n                    suit={tc.card.suit}\n                    value={tc.card.value} />;\n            });\n            return <div className=\"trick-taken\" key={`player-${playerIndex}-tricks-taken-${trickIndex}`}>\n                {cards}\n            </div>\n        });\n        const numMarriages = name in props.declaredMarriages ? props.declaredMarriages[name].length : 0;\n        const marriages = numMarriages > 0 ? props.declaredMarriages[name].join(\" \") : \"\";\n        return <div className=\"player-tricks-taken-container\" key={`player-${playerIndex}-tricks-taken-container`}>\n            <h4>{name}</h4>\n            { tricks.length > 0 ?\n                <div>\n                    <div>{tricks.length} tricks taken - {\n                        name === contractPlayer ?\n                        // display the raw total for the contract player\n                        `${rawPoints[name]} points (contract was ${props.contract.points} points)`:\n                        `${finalPoints[name]} points`\n                    }</div>\n                    <div>{numMarriages} marriages declared\n                        { numMarriages > 0 ? \": \" + marriages : null }</div>\n                    <div className=\"player-tricks-taken\">\n                        {tricks}\n                    </div>\n                </div> :\n                <div>no tricks taken - 0 points</div> }\n        </div>;\n    });\n\n    return (<div className=\"table container\">\n        <div className=\"game-status\">\n            <h3>Status</h3>\n            <div>{props.contract.player} holds contract for {props.contract.points} points</div>\n            <div>{ isContractMade ? `${contractPlayer} met the contract` :\n                `${contractPlayer} failed to meet the contract` }</div>\n        </div>\n        <div className=\"player-tricks\">\n            <h3>Taken Tricks</h3>\n            {playerTricks}\n        </div>\n        { props.onFinish ?\n            <button type=\"button\" className=\"btn btn-primary btn-lg\"\n                onClick={(e) => {return props.onFinish ? props.onFinish(finalPoints) : null}}>Start Next Round</button> :\n            null }\n    </div>);\n};\n\nexport default RoundScoringView;","import React, {FC} from \"react\";\nimport {Bid} from \"../game-mechanics\";\n\ninterface IProps {\n    playerNames: string[];\n    /**\n     * Index into playerNames\n     */\n    startingBidPlayer: number;\n\n    bidHistory: Bid[];\n};\n\n/**\n * This is a sub-view of BiddingView\n * Shows the bids by all the players\n */\nconst BidHistoryView : FC<IProps> = (props: IProps) => {\n    function bidTableCell(bid: Bid, index: number): JSX.Element {\n        return <td key={`bid-${index}`}>\n            {bid.points > 0 ? bid.points : \"pass\"}\n        </td>;\n    }\n\n    const tableHeader = [\n        <th key={'blank'}>round</th>\n    ] as JSX.Element[];\n    for (let i = 0; i < 3; i++) {\n        const name = props.playerNames[(props.startingBidPlayer + i) % 3];\n        tableHeader.push(\n            <th key={`name-${i}`}>{ name }</th>\n        );\n    }\n\n    const rows = [] as JSX.Element[];\n    // this is the number for the *next* row\n    let roundNum = 1;\n    // these are the cells that have not yet been added to a row\n    let elems = [] as JSX.Element[];\n\n    for(let i = 0; i < props.bidHistory.length; i++) {\n        if (elems.length === 3) {\n            let row = <tr key={`round-${roundNum}`}>\n                <td>{roundNum}</td>\n                { elems }\n            </tr>;\n            rows.push(row);\n            roundNum++;\n            elems = [];\n        }\n        let bid = props.bidHistory[i];\n        elems.push(bidTableCell(bid, i));\n    }\n    // add any remaining\n    if (elems.length > 0) {\n        // if there are not exactly a multiple of 3 then will out the rest of the table cells with blanks\n        let i = 0;\n        while (elems.length < 3) {\n            elems.push(<td key={`blank-${i}`}></td>);\n            i++;\n        }\n        let row = <tr key={`round-${roundNum}`}>\n            <td>{roundNum}</td>\n            { elems }\n        </tr>;\n        rows.push(row);\n    }\n\n    return <div className=\"bid-history\">\n        <h2>Bidding History</h2>\n        {props.bidHistory.length === 0 ?\n            <p>no bids yet</p> :\n            <table className=\"table table-striped table-sm\">\n                <thead>\n                    <tr>{tableHeader}</tr>\n                </thead>\n                <tbody>{rows}</tbody>\n            </table>\n        }\n    </div>;\n};\n\nexport {\n    BidHistoryView,\n};","import React, { FC, useState, useEffect } from \"react\";\nimport { Hand } from \"../cards\";\nimport { Bid, GamePhase, getWinningBid, isBiddingComplete, MIN_BID_POINTS } from \"../game-mechanics\";\nimport AI from \"./ai\";\nimport { PlayerView } from \"../local-components/player-view\";\nimport { BidHistoryView } from \"./bid-history-view\";\nimport { TableView } from \"./table-view\";\n\ninterface IBiddingViewProps {\n    /**\n     * Index into playerNames\n     * This is the player who is currently looking at this view\n     */\n    localPlayerIndex: number;\n\n    playerNames: string[];\n\n    /**\n     * Index into playerNames\n     * This is the player who dealt\n     */\n    dealerIndex: number;\n\n    /**\n     * Map from player names to their hands\n     */\n    playerHands: {[key: string]: Hand};\n\n    /**\n     * Call this when the bidding phase is done\n     * Winning bid is null when everyone passes\n     */\n    onNextPhase(winningBid: Bid | null): any;\n}\n\n/**\n * Local representation of bidding view\n * For now, this assigns a *fake* bid to the pla\n */\nexport const BiddingView : FC<IBiddingViewProps> = (props: IBiddingViewProps) => {\n    /**\n     * Index into playerNames\n     */\n    const startingBidPlayer = (props.dealerIndex + 1) % 3;\n    /**\n     * Index into playerNames\n     */\n    let [biddingPlayerIndex, setBiddingPlayerIndex] = useState(startingBidPlayer);\n    /**\n     * List of bids by all players starting with the startingBidPlayer\n     */\n    let [bidHistory, setBidHistory] = useState([] as Bid[]);\n    /**\n     * Points entered into the points form\n     */\n    let [points, setPoints] = useState(0);\n    /**\n     * Error message to display in the points form\n     */\n    let [pointsErrorMsg, setPointsErrorMsg] = useState(\"\");\n    /**\n     * This is a derived state (from bidHistory) that is helpful in tracking whether bidding is over\n     * It is also helpful in determining who can submit a bid\n     * The numbers are indexes into playerNames\n     */\n    let [passedPlayers, setPassedPlayers] = useState([] as number[]);\n\n    /**\n     * When a new bid is added to the bid history, we need to compute whether the bidding is over\n     */\n    useEffect(() => {\n        const isBiddingOver = isBiddingComplete(bidHistory);\n        if (isBiddingOver) {\n            let winningBid = getWinningBid(bidHistory);\n            props.onNextPhase(winningBid);\n            // reset everything\n            setPassedPlayers([]);\n            setPointsErrorMsg(\"\");\n            setPoints(0);\n            setBidHistory([]);\n        }\n    });\n\n    /**\n     * This is an internal helper function\n     */\n    function addBid(newBid: Bid, playerIndex: number) {\n        setBidHistory([...bidHistory, newBid]);\n        setBiddingPlayerIndex((biddingPlayerIndex + 1) % 3);\n        if (newBid.points === 0 && !passedPlayers.includes(playerIndex)) {\n            setPassedPlayers([...passedPlayers, playerIndex]);\n        }\n    }\n\n    function handleGetAIBid() {\n        if (biddingPlayerIndex === props.localPlayerIndex) {\n            throw new Error('method can only be called for AI players');\n        }\n        const playerName = props.playerNames[biddingPlayerIndex];\n        let newBid : Bid | null = null;\n        if (passedPlayers.includes(biddingPlayerIndex)) {\n            // this AI has already passed\n            newBid = {\n                points: 0,\n                player: playerName,\n            };\n        } else {\n            newBid = AI.getBid(bidHistory, props.playerHands[playerName], playerName);\n        }\n        addBid(newBid, biddingPlayerIndex);\n    }\n\n    /**\n     * Human player submits a passing bid\n     */\n    function handlePass() {\n        const playerName = props.playerNames[biddingPlayerIndex];\n        addBid({\n            points: 0,\n            player: playerName,\n        }, props.localPlayerIndex);\n    }\n\n    /**\n     * Human player changes the points in the input element\n     */\n    function handleChangePoints(e: React.SyntheticEvent<HTMLInputElement>) {\n        const points = Number.parseInt((e.target as any).value);\n\n        if (points < 0) {\n            setPointsErrorMsg(\"points cannot be negative\");\n            return;\n        } else if (points === 0) {\n            setPointsErrorMsg(\"cannot bid 0\");\n        } else if (points % 5 !== 0) {\n            setPointsErrorMsg(\"points can only be moved in increments of 5\");\n            return;\n        } else if (points < MIN_BID_POINTS) {\n            setPointsErrorMsg(\"this bid is beneath the points minimum\");\n            return;\n        } else {\n            setPointsErrorMsg(\"\");\n            setPoints(points);\n        }\n    }\n\n    /**\n     * Human player submits a non-pass bid\n     */\n    function handleSubmitBid() {\n        if (passedPlayers.includes(props.localPlayerIndex)) {\n            setPointsErrorMsg(\"you cannot submit a bid - you have already passed\");\n        }\n        const winningBid = getWinningBid(bidHistory);\n        if (winningBid && winningBid.points >= points) {\n            setPointsErrorMsg(\"your bid is lower than the current highest bid\");\n            return;\n        } else {\n            const playerName = props.playerNames[biddingPlayerIndex];\n            addBid({\n                points: points,\n                player: playerName,\n            }, props.localPlayerIndex);\n        }\n    }\n\n    const name = props.playerNames[props.localPlayerIndex];\n    const hand = props.playerHands[name];\n    const playerView =\n        (<div>\n            <PlayerView\n                name={name}\n                playerIndex={props.localPlayerIndex}\n                hand={hand}\n                phase={GamePhase.BIDDING}\n                isDealer={props.localPlayerIndex === props.dealerIndex}\n                tricksTaken={[]}\n                numTricksTaken={0}\n                isContractPlayer={false}\n                isActivePlayer={props.localPlayerIndex === biddingPlayerIndex}\n                showCards={true} />\n            <div>{ hand.getPoints() } points in hand</div>\n            <div>Marriages: { hand.marriages.length > 0 ? hand.marriages.join(\" \") : \"none\" }</div>\n        </div>);\n\n    return <div className=\"bidding-view\">\n        <TableView\n            playerNames={props.playerNames}\n            localPlayerIndex={props.localPlayerIndex}\n            activePlayerIndex={biddingPlayerIndex} />\n\n        <BidHistoryView\n            playerNames={props.playerNames}\n            startingBidPlayer={startingBidPlayer}\n            bidHistory={bidHistory} />\n\n        <div className=\"round-info\">\n            <p>\n                It is { props.playerNames[biddingPlayerIndex]}'s turn to bid.\n            </p>\n        </div>\n\n        <div className=\"player-action-container\">\n            { biddingPlayerIndex === props.localPlayerIndex ?\n                <form className=\"bidding-form\">\n                    <label>Points</label>\n                    <input type=\"number\" name=\"points\" min={0} max={400} step={5}\n                        className=\"form-control\"\n                        onChange={handleChangePoints} />\n                    { pointsErrorMsg ? <p className=\"error-msg\">{ pointsErrorMsg }</p> : null }\n                    <div className=\"btn-group\">\n                        <button type=\"button\" className=\"btn btn-lg btn-success\"\n                            onClick={handleSubmitBid}\n                            disabled={points === 0 || pointsErrorMsg !== \"\" || passedPlayers.includes(props.localPlayerIndex) }>Submit Bid</button>\n                        <button type=\"button\" className=\"btn btn-lg btn-danger\"\n                            onClick={handlePass}>Pass</button>\n                    </div>\n                </form>:\n\n                <button type=\"button\" className=\"btn btn-primary btn-lg\"\n                    onClick={handleGetAIBid}>AI Bid</button>\n            }\n        </div>\n\n        <div className=\"player-hand-container\">\n            <h2>Your Hand</h2>\n            {playerView}\n        </div>\n    </div>;\n}","import React, { FC, useState } from \"react\";\nimport { Card, Hand } from \"../cards\";\nimport { CardView } from \"../local-components/card-view\";\nimport { PlayerView } from \"../local-components/player-view\";\nimport { GamePhase } from \"../game-mechanics\";\nimport AI from \"./ai\";\n\ninterface IRevealTreasureViewProps {\n    playerNames: string[];\n    /**\n     * Index of the local (human) player\n     */\n    localPlayerIndex: number;\n\n    playerHands: {[key: string]: Hand};\n    dealerIndex: number;\n    contractPoints: number;\n    contractPlayerIndex: number;\n\n    treasure: Card[];\n    onFinalizeContract: (contractPoints: number) => any;\n}\n\n/**\n * The treasure has just been revealed!\n * The contract player may now increase their contract\n *\n * We show the treasure to everyone\n * But be careful to only show the human player's cards to them\n */\nconst RevealTreasureView : FC<IRevealTreasureViewProps> = (props: IRevealTreasureViewProps) => {\n    const contractPlayerName = props.playerNames[props.contractPlayerIndex];\n\n    /**\n     * New contract points\n     */\n    let [points, setPoints] = useState(0);\n    let [errorMsg, setErrorMsg] = useState(\"\");\n    /**\n     * We only use this variable if the AI holds the contract\n     * True iff the AI has thought about their action (filled `points` variable)\n     */\n    let [haveAITurn, setAITurn] = useState(false);\n\n    function handleChangeContract(e: React.SyntheticEvent<HTMLFormElement>) {\n        e.preventDefault();\n        if (points <= props.contractPoints) {\n            setErrorMsg(\"this is not more than your current contract\");\n            return;\n        } else if (points % 5 !== 0) {\n            setErrorMsg(\"contract points must be a multiple of 5\");\n            return;\n        }\n        props.onFinalizeContract(points);\n        return false;\n    }\n\n    function handleKeepCurrentContract() {\n        props.onFinalizeContract(props.contractPoints);\n    }\n\n    /**\n     * Change the contract points\n     */\n    function handleChangePoints(e: React.SyntheticEvent<HTMLInputElement>) {\n        const v = Number.parseInt((e.target as HTMLInputElement).value);\n        setPoints(v);\n    }\n\n    /**\n     * Let the AI think\n     */\n    function handleAITurn() {\n        const name = props.playerNames[props.contractPlayerIndex];\n        const newPoints = AI.reevalContract(\n            props.playerHands[name],\n            props.treasure,\n            props.contractPoints,\n            props.playerNames,\n            props.contractPlayerIndex\n        );\n        if (newPoints < props.contractPoints) {\n            throw new Error('AI returned a lower contract than the one it started with');\n        }\n        setPoints(newPoints);\n        setAITurn(true);\n    }\n\n    /**\n     * Once the AI has decided on a contract amount, submit that amount back to caller\n     */\n    function handleSubmitAIPoints() {\n        if (!haveAITurn) {\n            throw new Error('AI must think first');\n        }\n        props.onFinalizeContract(points);\n    }\n\n\n    const treasureCards = props.treasure.map((card: Card, i: number) => {\n        let targetPlayer = null;\n        return (<div key={`treasure-card-container-${i}`}>\n            <CardView key={`treasure-card-${i}`}\n                suit={card.suit}\n                value={card.value} />\n            { targetPlayer ?\n                <div className=\"target-player\">sending to {targetPlayer}</div>\n                : null}\n        </div>);\n    });\n\n    const humanPlayerName = props.playerNames[props.localPlayerIndex];\n\n    // show the *human player*'s cards, not that of the contract player\n    const playerView = (<div>\n            <PlayerView\n                name={humanPlayerName}\n                playerIndex={props.localPlayerIndex}\n                hand={props.playerHands[humanPlayerName]}\n                phase={GamePhase.BIDDING}\n                isDealer={props.localPlayerIndex === props.dealerIndex}\n                tricksTaken={[]}\n                numTricksTaken={0}\n                isContractPlayer={props.localPlayerIndex === props.contractPlayerIndex}\n                isActivePlayer={props.localPlayerIndex === props.contractPlayerIndex}\n                showCards={true} />\n        </div>);\n\n    let instructions = null;\n\n    if (props.localPlayerIndex === props.contractPlayerIndex) {\n        instructions = (<p>Congratulations! You won the contract for { props.contractPoints } points.\n            I hope you like the treasure.\n            You may now increase your contract if you wish.</p>);\n    } else {\n        instructions = (<p>\n            Unfortunately you did not win the bidding.&nbsp;\n            { contractPlayerName } won the bidding instead and currently holds a contract for { props.contractPoints} points.\n            In any case, each player sees the previously hidden treasure cards.&nbsp;\n            { contractPlayerName } may now choose to increase the contract or keep it the same.\n        </p>);\n    }\n\n    return (<div className=\"container reveal-treasure-view\">\n        <div className=\"dealt-table\">\n            <div>\n                <h3>Treasure</h3>\n                <div className=\"treasure-container\">{treasureCards}</div>\n            </div>\n            <div className=\"player-hand-container\">\n                <h2>Your Hand</h2>\n                {playerView}\n            </div>\n\n            {instructions}\n\n            { props.localPlayerIndex === props.contractPlayerIndex ?\n                <form onSubmit={handleChangeContract}>\n                    <input type=\"number\" className=\"form-control\" name=\"points\"\n                        min={props.contractPoints} max={400} step={5}\n                        placeholder=\"please enter your new contract points\"\n                        onChange={handleChangePoints} />\n                    { errorMsg ? <div className=\"error-msg\">{ errorMsg }</div> : null }\n                    <div className=\"btn-group\">\n                        <button type=\"submit\" className=\"btn btn-success btn-lg\"\n                            disabled={points < props.contractPoints}>Increase Contract</button>\n                        <button type=\"submit\" className=\"btn btn-danger btn-lg\"\n                            onClick={handleKeepCurrentContract}>Keep Current Contract</button>\n                    </div>\n                </form>:\n                <div>\n                    { haveAITurn ? null :\n                        <button type=\"button\" className=\"btn btn-info btn-lg\"\n                            onClick={handleAITurn}>Evaluate AI Turn</button>\n                    }\n\n                    { haveAITurn ?\n                        <div>{\n                            points === props.contractPoints ?\n                            `${contractPlayerName} has decided to keep the contract unchanged.` :\n                            `${contractPlayerName} has decided to increase the contract to ${points} points.`\n                        }\n                        </div> : null\n                    }\n\n                    { haveAITurn ?\n                        <button type=\"button\" className=\"btn btn-success btn-lg\"\n                            onClick={handleSubmitAIPoints}>Continue</button> :\n                        null\n                    }\n                </div>\n            }\n        </div>\n    </div>);\n};\n\nexport {\n    RevealTreasureView,\n};","import React, { FC, useState } from \"react\";\nimport { Hand, Suit, CardValue } from \"../cards\";\nimport { PlayerView } from \"../local-components/player-view\";\nimport { GamePhase, ITrickCard, getWinningCard, doesPlayedCardDeclareMarriage } from \"../game-mechanics\";\nimport { CardView } from \"../local-components/card-view\";\nimport AI from \"./ai\";\nimport { TableView } from \"./table-view\";\n\ninterface IProps {\n    // properties of the game\n    playerNames: string[];\n    localPlayerIndex: number;\n    dealerIndex: number;\n\n    // properties of the round\n    contractPlayerIndex: number;\n    contractPoints: number;\n    playerHands: {[key: string]: Hand};\n    currentTrick: ITrickCard[];\n    activePlayerIndex: number;\n    trumpSuit: Suit | null;\n    /**\n     * Number of tricks that have already been taken in total by all players\n     */\n    numPastTricks: number;\n\n    /**\n     * Map from player name to a list of tricks taken\n     */\n    tricksTaken: {[key: string]: ITrickCard[][]};\n\n    /**\n     * Callback for when a card is played\n     */\n    onPlayCard(trickCard: ITrickCard): void;\n    /**\n      * Once a trick is complete, it is shown to the player\n      * This button dismisses the trick\n      */\n    onDimissTrick(): void;\n};\n\nconst TrickTakingView: FC<IProps> = (props: IProps) => {\n    let [isInstructionsShown, setInstructionsShown] = useState(true);\n\n    /**\n     * This is an index into the local player's hand.cards\n     */\n    let [selectedCard, selectCard] = useState(-1);\n\n    /**\n     * Select a card by clicking on it\n     */\n    function handleSelectCard(playerIndex: number, cardIndex: number) {\n        if (cardIndex === selectedCard) {\n            selectCard(-1);\n        } else {\n            selectCard(cardIndex);\n        }\n    }\n\n    /**\n     * Play the currently selected card by the currently active player\n     */\n    function handlePlayCard() {\n        if (selectedCard === -1) {\n            throw new Error('no selected card');\n        }\n\n        const activePlayerName = props.playerNames[props.activePlayerIndex];\n        const activePlayerHand = props.playerHands[activePlayerName];\n        const trickCard = {\n            player: activePlayerName,\n            card: activePlayerHand.cards[selectedCard],\n            isMarriage: doesPlayedCardDeclareMarriage(activePlayerHand, selectedCard, props.currentTrick, props.numPastTricks),\n        } as ITrickCard;\n\n        props.onPlayCard(trickCard);\n\n        // de-select this card\n        selectCard(-1);\n    }\n\n    function handleAITurn() {\n        const activePlayerName = props.playerNames[props.activePlayerIndex];\n        const activePlayerHand = props.playerHands[activePlayerName];\n        const cardIndex = AI.playCard(activePlayerHand, props.currentTrick, props.tricksTaken, props.trumpSuit, activePlayerName);\n        if (cardIndex < 0 || cardIndex >= activePlayerHand.cards.length) {\n            throw new Error(`AI ${activePlayerName} returned cardIndex ${cardIndex} which is invalid`);\n        }\n        const trickCard = {\n            player: activePlayerName,\n            card: activePlayerHand.cards[cardIndex],\n            isMarriage: doesPlayedCardDeclareMarriage(activePlayerHand, cardIndex, props.currentTrick, props.numPastTricks),\n        }\n\n        props.onPlayCard(trickCard);\n    }\n\n    const localPlayerName = props.playerNames[props.localPlayerIndex];\n\n    let instructions = null;\n    if (props.localPlayerIndex === props.contractPlayerIndex) {\n        instructions = (<p className=\"instructions\">\n            You are now fulfilling the contract for { props.contractPoints } points.\n            Since this is your contract, you get to go first.\n            Remember, you can't declare a marriage on the first turn.\n        </p>);\n\n    }\n\n    const currentTrickCards = props.currentTrick.map((card: ITrickCard, i: number) => {\n        return <CardView key={`card-${i}`} suit={card.card.suit} value={card.card.value} />\n    });\n\n    let turnInstructions = null;\n    if (props.localPlayerIndex === props.activePlayerIndex && props.currentTrick.length < 3) {\n        turnInstructions = 'It is your turn. Play a card.';\n    } else if (props.currentTrick.length < 3) {\n        turnInstructions = `It is ${props.playerNames[props.activePlayerIndex]}'s turn.`;\n    } else if (props.currentTrick.length === 3) {\n        const w = getWinningCard(props.currentTrick, props.trumpSuit);\n        turnInstructions = `${w.player} has won the trick.`;\n    }\n    if (props.trumpSuit) {\n        turnInstructions += ` The current trump is ${props.trumpSuit}.`;\n    } else {\n        turnInstructions += ` There is currently no trump suit.`;\n    }\n\n    // these are the instructions when a card is selected\n    let bottomInstructions = null;\n    if (selectedCard !== -1) {\n        const card = props.playerHands[localPlayerName].cards[selectedCard];\n        if ((card.value === CardValue.KING || card.value === CardValue.QUEEN) && props.currentTrick.length === 0) {\n            // check if there is possibly a marriage\n            const hand = props.playerHands[localPlayerName];\n            if(hand.marriages.includes(card.suit)) {\n                if (props.numPastTricks > 0) {\n                    bottomInstructions = <div className=\"alert alert-info\">\n                        Playing this card will automatically declare the { card.suit } marriage\n                    </div>;\n                } else {\n                    bottomInstructions = <div className=\"alert alert-warning\">\n                        <strong>Warning!&nbsp;</strong>You must first take a trick before declaring the { card.suit } marriage\n                    </div>;\n                }\n            }\n        }\n    }\n\n    return (<div className=\"trick-taking-view\">\n\n        <TableView\n            playerNames={props.playerNames}\n            localPlayerIndex={props.localPlayerIndex}\n            activePlayerIndex={props.activePlayerIndex} />\n\n        { isInstructionsShown ? instructions : null }\n\n        <div className=\"current-trick-wrapper\">\n            { props.currentTrick.length > 0 ? <h2>Current Trick</h2> : null }\n            { props.currentTrick.length > 0 && props.currentTrick[0].isMarriage ?\n                <p>{ props.currentTrick[0].player } declared a { props.currentTrick[0].card.suit } marriage</p> :\n                null\n            }\n            <div className=\"current-trick-container\">\n                { currentTrickCards }\n            </div>\n        </div>\n\n        <div className=\"player-hand-container\">\n            <div className=\"turn-container\">\n                <h5>{ turnInstructions }</h5>\n            </div>\n            <PlayerView\n                name={localPlayerName}\n                playerIndex={props.localPlayerIndex}\n                hand={props.playerHands[localPlayerName]}\n                phase={GamePhase.PLAYING}\n                isDealer={props.dealerIndex === props.localPlayerIndex}\n                isContractPlayer={props.contractPlayerIndex === props.localPlayerIndex}\n                isActivePlayer={props.activePlayerIndex === props.localPlayerIndex}\n                showCards={true}\n                numTricksTaken={props.tricksTaken[localPlayerName].length}\n                tricksTaken={props.tricksTaken[localPlayerName]}\n                selectedCards={selectedCard === -1 ? [] : [selectedCard]}\n                onCardSelect={handleSelectCard} />\n\n            { bottomInstructions }\n\n            <form>\n                {props.activePlayerIndex === props.localPlayerIndex && props.currentTrick.length < 3 ?\n                    <button type=\"button\" className=\"btn btn-success btn-lg play-card-btn\"\n                        disabled={selectedCard === -1}\n                        onClick={handlePlayCard}>Play Card</button>:\n                    null}\n                { props.activePlayerIndex !== props.localPlayerIndex && props.currentTrick.length < 3 ?\n                    <button type=\"button\" className=\"btn btn-info btn-lg\"\n                        onClick={handleAITurn}>AI Turn</button>:\n                    null}\n                { props.currentTrick.length === 3 ?\n                    <button type=\"button\" className=\"btn btn-success btn-lg\"\n                        onClick={props.onDimissTrick}>OK</button>:\n                    null}\n            </form>\n        </div>\n    </div>);\n};\n\nexport {\n    TrickTakingView,\n    doesPlayedCardDeclareMarriage,\n};","import React, { PureComponent } from \"react\";\nimport \"../card.css\";\nimport { Card, Deck, Hand, Suit } from \"../cards\";\nimport { DistributeCardsView } from \"./distribute-cards-view\";\nimport { Bid, GamePhase, getWinningCard, ITrickCard, doesPlayedCardDeclareMarriage, computeRoundScores } from \"../game-mechanics\";\nimport { RoundScoringView } from \"../local-components/round-scoring-view\";\nimport { BiddingView } from \"./bidding-view\";\nimport { RevealTreasureView } from \"./reveal-treasure-view\";\nimport { TrickTakingView } from \"./trick-taking-view\";\nimport { TableView } from \"./table-view\";\n\ninterface ITestRoundProps {\n    gameId: string;\n    roundNum: number;\n\n    /**\n     * Can optionally set a random seed to control the results (repro)\n     * Do not change this halfway through the round, that will result in undefined behaviour\n     */\n    randomSeed: number;\n\n    /**\n     * True iff we want to show all players' cards, not just the human player's\n     */\n    isAllCardsShown: boolean;\n    /**\n     * Which player is the local player (the one who is in control)\n     */\n    localPlayerIndex: number;\n    playerNames: string[];\n    dealerIndex: number;\n    /**\n     * The number of consecutive failed deals\n     */\n    numFailedDeals: number;\n    onRoundOver: (scores: {[key: string]: number}, isEarlyExit: boolean) => any;\n    /**\n     * Once the scores for the round are available, provide them to the parent view\n     */\n    onChangePhase(phase: GamePhase, roundScores?: {[key: string]: number}): void;\n}\n\ninterface ILocalRoundState {\n    phase: GamePhase;\n\n    // set after deal phase\n    playerHands: {[key: string]: Hand};\n    treasure: Card[];\n\n    // set after bidding phase\n    /**\n     * This is the player who owns the contract\n     */\n    contractPlayerIndex: number;\n    currentContract: Bid | null;\n\n    // playing phase\n    activePlayerIndex: number;\n    currentTrick: ITrickCard[];\n    trumpSuit: Suit | null;\n    tricksTaken: {[key: string]: ITrickCard[][]};\n    trickNumber: number;\n    /**\n     * This is used for scoring purposes\n     */\n    declaredMarriages: {[key: string]: Suit[]};\n}\n\ninterface ISavedRoundState {\n    phase: GamePhase;\n\n    // after deal phase (and REVEAL_TREASURE and DISTRIBUTE_CARDS)\n    // the playerHands are changed during the playing phase\n    playerHands: {[key: string]: Hand};\n    treasure: Card[];\n\n    // after bid phase\n    currentContract: Bid | null;\n    contractPlayerIndex: number;\n\n    // during playing phase\n    activePlayerIndex: number;\n}\n\n/**\n * This is the game.\n * DO NOT show this view if the game is over.\n */\nexport class LocalGameRoundView extends PureComponent<ITestRoundProps, ILocalRoundState> {\n    constructor(props: ITestRoundProps) {\n        super(props);\n\n        // init tricks taken\n        const tricksTaken = Object.fromEntries(this.props.playerNames.map((name: string) => {\n            return [name, []];\n        }));\n\n        this.state = {\n            // general info\n            phase: GamePhase.NOT_DEALT,\n\n            // dealing\n            playerHands: {},\n            treasure: [],\n\n            // bidding\n            currentContract: null,\n            contractPlayerIndex: 0,\n\n            // treasure distribution\n            // nothing here\n\n            // playing / trick-taking\n            /**\n             * Whose turn it is to play\n             */\n            activePlayerIndex: (this.props.dealerIndex + 1) % 3,\n            currentTrick: [],\n            trumpSuit: null,\n            tricksTaken: tricksTaken,\n            // this is used for logging and accounting\n            // obviously can be inferred in other ways\n            trickNumber: 0,\n            declaredMarriages: {},\n        };\n\n        // event handlers\n        this.dealCards = this.dealCards.bind(this);\n        this.handleCompleteBidding = this.handleCompleteBidding.bind(this);\n        this.handleFinalizeContract = this.handleFinalizeContract.bind(this);\n        this.handleDistributeCards = this.handleDistributeCards.bind(this);\n        this.handlePlayCard = this.handlePlayCard.bind(this);\n        this.handleNextRound = this.handleNextRound.bind(this);\n        this.handleDismissTrick = this.handleDismissTrick.bind(this);\n        this.resetRound = this.resetRound.bind(this);\n        // state operations\n        this.readSavedState = this.readSavedState.bind(this);\n        this.persistState = this.persistState.bind(this);\n    }\n\n    componentDidMount() {\n        this.readSavedState().then((state: ISavedRoundState | null) => {\n            if (!state) {\n                this.persistState();\n            } else {\n                this.setState({\n                    phase: state.phase,\n\n                    playerHands: state.playerHands,\n                    treasure: state.treasure,\n\n                    currentContract: state.currentContract,\n                    contractPlayerIndex: state.contractPlayerIndex,\n\n                    activePlayerIndex: state.activePlayerIndex,\n                });\n            }\n        });\n    }\n\n    /**\n     * Persist the current state\n     */\n    persistState() {\n        console.debug(`Persisting state for game ${this.props.gameId} and round ${this.props.roundNum}...`)\n        let sState = JSON.stringify({\n            phase: this.state.phase,\n            // after dealing (and card distribution)\n            playerHands: this.state.playerHands,\n            treasure: this.state.treasure,\n            // after bidding\n            currentContract: this.state.currentContract,\n            contractPlayerIndex: this.state.contractPlayerIndex,\n            // after card distribution\n            activePlayerIndex: this.state.activePlayerIndex,\n        } as ISavedRoundState);\n        window.localStorage.setItem(`game:${this.props.gameId}:round:${this.props.roundNum}`, sState);\n        console.debug('state has been persisted');\n    }\n\n    /**\n     * Read prior saved state for this round and return it\n     * Return null if we fail to find it\n     */\n    async readSavedState(): Promise<ISavedRoundState | null> {\n        console.debug(`Trying to load saved state from local storage for game ${this.props.gameId} and round ${this.props.roundNum}...`);\n        let sState = window.localStorage.getItem(`game:${this.props.gameId}:round:${this.props.roundNum}`);\n        if (sState) {\n            let state = JSON.parse(sState) as ISavedRoundState;\n            // parse the cards into card objects\n            const newHands = {} as {[key: string]: Hand};\n            Object.entries(state.playerHands).forEach(([player, hand]) => {\n                const cards = hand.cards.map((card: Card) => {\n                    return new Card(card.value, card.suit);\n                });\n                newHands[player] = new Hand(cards);\n            });\n            state.playerHands = newHands;\n\n            const newTreasure = state.treasure.map((card) => {\n                return new Card(card.value, card.suit);\n            });\n            state.treasure = newTreasure;\n\n            console.debug(state);\n            return state;\n        } else {\n            console.debug('not found');\n            return null;\n        }\n    }\n\n    /**\n     * Called by the contract holder\n     * Finalizes the contract\n     * Advances the phase to DISTRIBUTE_CARDS\n     */\n    handleFinalizeContract(contractPoints: number) {\n        console.assert(this.state.phase === GamePhase.REVEAL_TREASURE);\n        if (!this.state.currentContract) {\n            throw new Error('there must be an existing contract');\n        }\n        if (contractPoints < this.state.currentContract.points) {\n            throw new Error('cannot reduce contract point value');\n        }\n\n        const contractPlayerName = this.state.currentContract.player;\n\n        const newContract: Bid = {\n            player: contractPlayerName,\n            points: contractPoints,\n        };\n\n        // move the treasure into the contract player's hand\n        const oldCards = this.state.playerHands[contractPlayerName].cards;\n        const newCards = [...oldCards, ...this.state.treasure];\n        const newPlayerHands = Object.assign({}, this.state.playerHands);\n        newPlayerHands[contractPlayerName] = new Hand(newCards);\n\n        this.setState({\n            currentContract: newContract,\n            phase: GamePhase.DISTRIBUTE_CARDS,\n            playerHands: newPlayerHands,\n        }, () => {\n            this.persistState();\n        });\n    }\n\n    /**\n     * A given player plays the given card (on their turn)\n     * NOTE: no sanity checking here\n     */\n    handlePlayCard(trickCard: ITrickCard) {\n        const playerIndex = this.props.playerNames.indexOf(trickCard.player);\n        if (playerIndex !== this.state.activePlayerIndex) {\n            throw new Error('can only call this method to play a card by the active player');\n        }\n\n        if (this.state.currentTrick.length >= 3) {\n            throw new Error('cannot play additional cards after the current trick has 3 or more cards');\n        }\n\n        const cardIndex = this.state.playerHands[trickCard.player].findCard(trickCard.card);\n        if (cardIndex === -1) {\n            throw new Error(`cannot find card ${trickCard.card} in player ${trickCard.player}'s hand`);\n        }\n\n        const playerName = this.props.playerNames[playerIndex];\n        const card = this.state.playerHands[playerName].cards[cardIndex];\n        console.log(`[trick ${this.state.trickNumber}] ${playerName} -> card ${card}`);\n\n        const activePlayerHand = this.state.playerHands[playerName];\n        const isMarriage = doesPlayedCardDeclareMarriage(activePlayerHand, cardIndex, this.state.currentTrick, this.state.trickNumber);\n        if (!isMarriage && trickCard.isMarriage) {\n            throw new Error('player is telling us this is a marriage but we are not seeing it');\n        } else if (isMarriage && !trickCard.isMarriage) {\n            throw new Error('game mechanics are telling us this is a marriage the player is saying it is not');\n        } else if (isMarriage) {\n            console.debug(`${playerName} declared a marriage -> ${card.suit}`);\n        }\n\n        // add card to the current trick - after marriage check\n        const currentTrick = this.state.currentTrick.slice();\n        currentTrick.push(trickCard);\n\n        // remove card from player hand\n        const newCards = this.state.playerHands[playerName].cards.slice();\n        newCards.splice(newCards.indexOf(card), 1);\n        const playerHands = Object.assign({}, this.state.playerHands);\n        playerHands[playerName] = new Hand(newCards);\n\n        if (currentTrick.length === 3) {\n            const winner = getWinningCard(currentTrick, this.state.trumpSuit);\n            const winningPlayerIndex = this.props.playerNames.indexOf(winner.player);\n            // update current trick and player hands\n            // update who the next player is\n            // but *do not* move the current trick into past tricks\n            // also *do not* update the phase\n            this.setState({\n                currentTrick: currentTrick,\n                playerHands: playerHands,\n                activePlayerIndex: winningPlayerIndex,\n            });\n        } else {\n            const nextPlayer = (this.state.activePlayerIndex + 1) % 3;\n            let declaredMarriages = this.state.declaredMarriages;\n            if(isMarriage) {\n                declaredMarriages = Object.assign({}, this.state.declaredMarriages);\n                if(!(playerName in declaredMarriages)) {\n                    declaredMarriages[playerName] = [];\n                }\n                declaredMarriages[playerName].push(card.suit);\n            }\n            this.setState({\n                currentTrick: currentTrick,\n                activePlayerIndex: nextPlayer,\n                trumpSuit: isMarriage ? card.suit : this.state.trumpSuit,\n                declaredMarriages: declaredMarriages,\n                playerHands: playerHands,\n            });\n        }\n    }\n    /**\n     * Once a trick is complete, it is shown to the player\n     * This button dismisses the trick\n     * This function should be called by the human player\n     * Note that the player hands have already been updated\n     */\n    handleDismissTrick() {\n        const winner = getWinningCard(this.state.currentTrick, this.state.trumpSuit);\n        const winningPlayerIndex = this.props.playerNames.indexOf(winner.player);\n        // wrap up the trick\n        const pastTricks = {} as { [key: string]: ITrickCard[][] };\n        Object.assign(pastTricks, this.state.tricksTaken);\n        const winningPlayerName = this.props.playerNames[winningPlayerIndex];\n        pastTricks[winningPlayerName].push(this.state.currentTrick);\n        console.log(`[trick ${this.state.trickNumber}] ${winningPlayerName} won the trick. They play the next hand.`);\n        let isPlayingPhaseOver = false;\n\n        if (this.state.playerHands[winner.player].cards.length === 0) {\n            // we're done\n            isPlayingPhaseOver = true;\n        }\n\n        this.setState({\n            currentTrick: [],\n            activePlayerIndex: winningPlayerIndex,\n            tricksTaken: pastTricks,\n            phase: isPlayingPhaseOver ? GamePhase.SCORING : GamePhase.PLAYING,\n            trickNumber: this.state.trickNumber + 1,\n        }, () => {\n            if (isPlayingPhaseOver) {\n                if (!this.state.currentContract) {\n                    throw new Error('current contract may not be null here');\n                }\n\n                // get the new round scores\n                const roundScores = computeRoundScores(\n                    this.props.playerNames,\n                    this.state.tricksTaken,\n                    this.state.declaredMarriages,\n                    this.state.currentContract,\n                );\n\n                this.props.onChangePhase(GamePhase.SCORING, roundScores.final);\n            }\n        });\n    }\n\n    /**\n     * Handle the case where a player has dealt unsuccessfully 3 times in a row\n     */\n    handleBolt() {\n        // fill out the scores for each player\n        // dealer gets -120\n        let scores: { [key: string]: number } = {};\n        for (let i = 0; i < this.props.playerNames.length; i++) {\n            let playerName = this.props.playerNames[i];\n            if (i === this.props.dealerIndex) {\n                scores[playerName] = -120;\n            } else {\n                scores[playerName] = 0;\n            }\n        }\n        this.resetRound();\n        this.props.onRoundOver(scores, true);\n    }\n\n    dealCards() {\n        console.log(\"Dealing cards...\");\n        const deck = new Deck(this.props.randomSeed);\n\n        // deal out 3 cards for treasure\n        const treasure = [];\n        for(let i = 0; i < 3; i++) {\n            treasure.push(deck.pop());\n        }\n\n        // deal out the rest of the cards\n        const playerHands = {} as {[key: string]: Hand};\n        for(let i = 0; i < 3; i++) {\n            const name = this.props.playerNames[i];\n            const handCards = [];\n            for(let j = 0; j < 7; j++) {\n                handCards.push(deck.pop());\n            }\n            const hand = new Hand(handCards);\n            playerHands[name] = hand;\n        }\n\n        this.setState({\n            treasure: treasure,\n            phase: GamePhase.BIDDING,\n            playerHands: playerHands,\n        }, () => {\n            this.props.onChangePhase(GamePhase.BIDDING);\n            console.log(\"cards have been dealt\");\n            this.persistState();\n        });\n    }\n\n    /**\n     * Remove the selected cards from the contract player\n     * Move them (according to the assignments) to the target players\n     * This will advance the phase to PLAYING\n     * @param cardDistribution Map from player names to card objects\n     */\n    handleDistributeCards(cardDistribution: {[key: string]: Card}) {\n        console.assert(this.state.phase === GamePhase.DISTRIBUTE_CARDS);\n        console.assert(Object.keys(cardDistribution).length === 2);\n        console.assert(this.state.treasure.length === 3);\n\n        const contractPlayerName = this.props.playerNames[this.state.contractPlayerIndex];\n        // the \"big hand\" is composed out of the cards in that player's hand and the treasure cards\n        // this was previously created in the REVEAL_TREASURE phase\n        const playerBigHand = this.state.playerHands[contractPlayerName].cards;\n\n        const newPlayerHands = Object.assign({}, this.state.playerHands);\n\n        for(const [name, card] of Object.entries(cardDistribution)) {\n            if (name === contractPlayerName) {\n                throw new Error('cannot assign card to yourself');\n            }\n\n            const i = playerBigHand.indexOf(card);\n            if (i === -1) {\n                throw new Error('cannot find the card in the big hand');\n            }\n\n            if (name in newPlayerHands) {\n                // add the card to the new player\n                const cards = newPlayerHands[name].cards.slice();\n                cards.push(card);\n                newPlayerHands[name] = new Hand(cards);\n\n                // remove the card from the big hand\n                playerBigHand.splice(i, 1);\n            } else {\n                throw new Error(`name ${name} must be in playerHands`);\n            }\n        }\n\n        // we have now distributed the cards\n        // but our original person's hand is not quite right\n        // just need to set it to the big hand\n        newPlayerHands[contractPlayerName] = new Hand(playerBigHand);\n\n        this.setState({\n            playerHands: newPlayerHands,\n            phase: GamePhase.PLAYING,\n            // the person with the contract goes first\n            activePlayerIndex: this.state.contractPlayerIndex,\n        }, () => {\n            this.persistState();\n        });\n    }\n\n    resetRound(): void {\n        const tricksTaken = Object.fromEntries(this.props.playerNames.map((name: string) => {\n            return [name, []];\n        }));\n\n        this.setState({\n            // general info / phase\n            phase: GamePhase.NOT_DEALT,\n\n            // dealing\n            treasure: [],\n            playerHands: {},\n\n            // bidding\n            currentContract: null,\n            contractPlayerIndex: -1,\n\n            // treasure distribution\n\n            // playing\n            activePlayerIndex: -1,\n            currentTrick: [],\n            trumpSuit: null,\n            tricksTaken: tricksTaken,\n            trickNumber: 0,\n            declaredMarriages: {},\n        }, () => {\n            this.persistState();\n        });\n    }\n\n    /**\n     * Called at the end of the bidding phase\n     * @param winningBid Null if everyone passes\n     */\n    handleCompleteBidding(winningBid: Bid | null): void {\n        console.log('bidding is complete');\n        if(winningBid) {\n            const i = this.props.playerNames.indexOf(winningBid.player);\n            this.setState({\n                currentContract: winningBid,\n                contractPlayerIndex: i,\n                phase: GamePhase.REVEAL_TREASURE,\n            }, () => {\n                this.props.onChangePhase(GamePhase.REVEAL_TREASURE);\n                this.persistState();\n            });\n        } else {\n            this.props.onRoundOver({}, true);\n            this.resetRound();\n        }\n    }\n\n    handleNextRound(scores: {[key: string]: number}): void {\n        this.props.onRoundOver(scores, false);\n        this.resetRound();\n    }\n\n    render(): JSX.Element {\n        switch(this.state.phase) {\n            case GamePhase.NOT_DEALT: {\n                return <div className=\"dealing-view\">\n                    <TableView\n                        playerNames={this.props.playerNames}\n                        localPlayerIndex={this.props.localPlayerIndex}\n                        activePlayerIndex={this.props.dealerIndex} />\n                    <div className=\"instructions\">\n                        {\n                            this.props.numFailedDeals > 0 ?\n                            <span>The last deal failed - 3 passes in a row.&nbsp;</span> :\n                            null\n                        }\n                        { this.props.playerNames[this.props.dealerIndex] } is dealing.\n                    </div>\n                    <div className=\"action-container\">\n                        <button type=\"button\" className=\"btn btn-success btn-lg\"\n                            onClick={this.dealCards}>Deal</button>\n                    </div>\n                </div>;\n            }\n            case GamePhase.BIDDING: {\n                return <BiddingView\n                    playerNames={this.props.playerNames}\n                    dealerIndex={this.props.dealerIndex}\n                    playerHands={this.state.playerHands}\n                    onNextPhase={this.handleCompleteBidding}\n                    localPlayerIndex={this.props.localPlayerIndex} />\n            }\n            case GamePhase.REVEAL_TREASURE: {\n                if (!this.state.currentContract) {\n                    throw new Error('Current contract is not set in REVEAL_TREASURE phase');\n                }\n                return <RevealTreasureView\n                    // game props\n                    localPlayerIndex={this.props.localPlayerIndex}\n                    playerNames={this.props.playerNames}\n                    dealerIndex={this.props.dealerIndex}\n                    // round props\n                    playerHands={this.state.playerHands}\n                    contractPlayerIndex={this.state.contractPlayerIndex}\n                    contractPoints={this.state.currentContract.points}\n                    treasure={this.state.treasure}\n                    onFinalizeContract={this.handleFinalizeContract} />;\n            }\n            case GamePhase.DISTRIBUTE_CARDS: {\n                if (!this.state.currentContract) {\n                    throw new Error('Current contract is not set in DISTRIBUTE_CARDS phase');\n                }\n\n                return <DistributeCardsView\n                    // game props\n                    localPlayerIndex={this.props.localPlayerIndex}\n                    playerNames={this.props.playerNames}\n                    dealerIndex={this.props.dealerIndex}\n                    // round props\n                    playerHands={this.state.playerHands}\n                    contractPlayerIndex={this.state.contractPlayerIndex}\n                    contractPoints={this.state.currentContract.points}\n                    onDistribute={this.handleDistributeCards} />;\n            }\n            case GamePhase.PLAYING: {\n            // playing\n                if(!this.state.currentContract) {\n                    throw new Error(\"there must be a contract in this pahse\");\n                }\n\n                return <TrickTakingView\n                    // properties of the game\n                    playerNames={this.props.playerNames}\n                    localPlayerIndex={this.props.localPlayerIndex}\n                    dealerIndex={this.props.dealerIndex}\n\n                    // properties of the round\n                    contractPlayerIndex={this.state.contractPlayerIndex}\n                    contractPoints={this.state.currentContract.points}\n                    playerHands={this.state.playerHands}\n                    currentTrick={this.state.currentTrick}\n                    activePlayerIndex={this.state.activePlayerIndex}\n                    tricksTaken={this.state.tricksTaken}\n                    trumpSuit={this.state.trumpSuit}\n                    numPastTricks={this.state.trickNumber}\n\n                    // callbacks\n                    onPlayCard={this.handlePlayCard}\n                    onDimissTrick={this.handleDismissTrick}\n                />\n            }\n            case GamePhase.SCORING: {\n                if(!this.state.currentContract) {\n                    throw new Error(\"there must be a contract in this pahse\");\n                }\n                return <RoundScoringView\n                    contract={this.state.currentContract}\n                    contractPlayerIndex={this.state.contractPlayerIndex}\n                    tricksTaken={this.state.tricksTaken}\n                    declaredMarriages={this.state.declaredMarriages}\n                    playerNames={this.props.playerNames}\n                    onFinish={this.handleNextRound} />\n            }\n            default:\n                return <div>no view for phase {this.state.phase}</div>;\n        }\n    }\n}","/**\n * This view shows the *overall* scores of the players\n */\n\nimport React, { FC } from 'react';\nimport { getIsGameOver } from '../game-mechanics';\n\ninterface IScoreViewProps {\n    // map from user to score\n    scores: {[key: string]: number[]};\n\n    // order in which users should be displayed\n    playerNames: string[];\n\n    /**\n     * The current round\n     */\n    currentRound: number;\n\n    /**\n     * Handler for when modal is dismissed\n     */\n    onDismiss(): void;\n}\n\n/**\n * Shows the scores for all players across all rounds of the game\n */\nconst ScoreView : FC<IScoreViewProps> = (props: IScoreViewProps) => {\n    // note that we don't usually have scores for the current round\n    const isGameOver = getIsGameOver(props.scores, props.currentRound - 1);\n\n    const headerPlayerNames = props.playerNames.map((name: string) => {\n        return <th key={`header-row-${name}`}>{ name }</th>;\n    });\n    const rounds: number[] = [];\n    for(let round = 0; round < props.currentRound; round++) {\n        rounds.push(round);\n    }\n\n    const scoreRows = rounds.map((round: number) => {\n        const scoreRow = props.playerNames.map((name: string) => {\n            return <td key={`score-row-${name}-round-${round}`}>{ props.scores[name][round] || 0 }</td>;\n        });\n        const classes : string[] = [];\n        if (props.currentRound - 1 === round) {\n            // special case - game is over\n            if (isGameOver) {\n                classes.push('table-success')\n            } else {\n                // select the round before the current round\n                classes.push('table-primary');\n            }\n        }\n        return (<tr key={`score-row-${round}`} className={classes.join(' ')}>\n            <td>{ round || 'start' }</td>\n            {scoreRow}\n        </tr>);\n    });\n\n    const style = {\n        display: 'block',\n    };\n\n    return (<div className=\"score-view-modal modal fade show\" id=\"score-view-modal\" aria-modal=\"true\"\n        tabIndex={-1} style={style}>\n        <div className=\"modal-dialog modal-dialog-centered\">\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\">Player Scores</h5>\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\"\n                        aria-label=\"Close\" onClick={ (e) => props.onDismiss() }>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <table className=\"table table-sm\" id=\"scoring-table\">\n                        <thead>\n                            <tr>\n                                <th>Round</th>\n                                {headerPlayerNames}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {scoreRows}\n                        </tbody>\n                    </table>\n                </div>\n                <div className=\"modal-footer\">\n                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\"\n                        onClick={ (e) => props.onDismiss() }>Close</button>\n                </div>\n            </div>\n        </div>\n\n        {/* <h2>\n            <span>Player Scores</span>\n        </h2>\n            */}\n    </div>)\n};\n\nexport {\n    ScoreView,\n};\nexport default ScoreView;","import React, { FC } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface IProps {\n    /**\n     * If specified and not null, it means we're playing a game\n     */\n    gameId?: string | null;\n\n    /**\n     * Optionally provide a handler for what to do on a new hash\n     * Overrides the default handler (which just sets the nav hash and refreshes the page)\n     */\n    setNavHash?: (newHash: string) => void;\n};\n\nconst Navbar: FC<IProps> = (props: IProps) => {\n    const navHash = window.location.hash;\n\n    function defaultChangeNavHash(newHash: string) {\n        console.debug('Using default hash handler in navbar');\n        const url = new URL(window.location.href);\n        url.hash = newHash;\n        console.debug(`Hash is now ${newHash}`);\n        window.location.href = url.toString();\n        window.location.reload();\n    }\n\n    function handleClick(e: React.SyntheticEvent<HTMLAnchorElement>) {\n        e.preventDefault();\n\n        const url = new URL((e.target as HTMLAnchorElement).href);\n        const hash = url.hash;\n        if (props.setNavHash) {\n            props.setNavHash(hash);\n        } else {\n            defaultChangeNavHash(hash);\n        }\n    }\n\n    return (<nav className=\"navbar navbar-expand-md navbar-light bg-light\" id=\"tysyacha-navbar\">\n        <a className=\"navbar-brand\" href=\"#landing\" onClick={handleClick}>Tysyacha</a>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        {/* <span className=\"navbar-text\">Local Game {props.gameId} vs AI</span> */}\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n                {/* if there is no game ID specified, cannot navigate to the game */}\n                { props.gameId ?\n                    <li className=\"nav-item\">\n                        <a className={ navHash === '#local-ai-game' ? \"nav-link active\" : \"nav-link\" } href=\"#local-ai-game\" onClick={handleClick}>Game</a>\n                    </li> :\n                    null }\n                {/* if there is no game ID specified, cannot show the score card - what game are we showing? */}\n                <li className=\"nav-item\">\n                    <a className={ navHash === '#rules' ? \"nav-link active\" : \"nav-link\" } href=\"#rules\" onClick={handleClick}>Rules</a>\n                </li>\n            </ul>\n        </div>\n    </nav>);\n};\n\nexport {\n    Navbar,\n};","import React, { FC } from \"react\";\n\ninterface IProps {};\n\nconst LoadingView: FC<IProps> = (props: IProps) => {\n    return <div></div>;\n};\n\nexport {\n    LoadingView,\n};","import React, { PureComponent } from \"react\";\nimport { LocalGameRoundView } from \"./local-game-round-view\";\nimport { ScoreView } from \"./score-view-modal\";\nimport \"./local-game.css\";\nimport { GamePhase, updateScores } from \"../game-mechanics\";\nimport { Navbar } from \"./navbar\";\nimport { LoadingView } from \"./loading-view\";\nimport { randInt } from \"../utils\";\n\n/**\n * This function generates the player names given the human player's name\n * Mostly generates AI player names\n */\nfunction getPlayerNames(playerName: string): string[] {\n    if (!playerName) {\n        throw new Error('player name cannot be empty');\n    }\n\n    // save the name to localStorage\n    window.localStorage.setItem(\"playerName\", playerName);\n\n    let i = AI_PLAYER_NAMES.indexOf(playerName);\n    // this is a list of possible AI names to choose from\n    // we make a copy because we don't want to modify the constant\n    const possibleNames = [...AI_PLAYER_NAMES];\n    if (i >= 0) {\n        possibleNames.splice(i, 1);\n    }\n\n    // this is the actual list of players\n    // our local player is always at index 0\n    // this doesn't really change the game\n    const playerNames = [playerName];\n\n    while (playerNames.length < 3) {\n        i = randInt(0, possibleNames.length);\n        let [name] = possibleNames.splice(i, 1);\n        playerNames.push(name);\n    }\n\n    return playerNames;\n}\n\nfunction getInitialScores(playerNames: string[]): {[key: string]: number[]} {\n    // instantiate the scores\n    const scores = {} as {[key: string]: number[]};\n\n    playerNames.forEach((name: string) => {\n        scores[name] = [0];\n    });\n    return scores;\n}\n\ninterface ILocalGameProps {\n    /**\n     * Unique ID assigned to this game\n     */\n    gameId: string;\n    /**\n     * The name of the local (human) player\n     * NOTE: assume that this does not change for the entirety of the game\n     * This component may not work properly if you change the name of the player halfway through the game\n     */\n    playerName: string;\n\n    onNewRoute(newHash: string): void;\n}\n\n/**\n * We also save/load this entire struct directly\n */\ninterface ILocalGameState {\n    /**\n     * Whether the game is ready\n     * We don't want to render items multiple times\n     */\n    isGameReady: boolean;\n\n    /**\n     * True iff the game is over\n     */\n    isGameOver: boolean;\n\n    /**\n     * The name of every player including the AI\n     * These are generated after the human player name has been entered\n     */\n    playerNames: string[];\n\n    /**\n     * Index into playerNames\n     * This is the dealer for the current round\n     */\n    dealerIndex: number;\n\n    /**\n     * Map from player names to an array\n     * Each entry is the score of that player at the end of that round\n     * Obviously at the end of round 0 (start of the game) everyone starts with score 0\n     */\n    scores: {[key: string]: number[]};\n\n    /**\n     * The players who won this game.\n     * This is a derived property from scores but keep track of this anyway.\n     * Not relevant unless the `isGameOver` flag is set\n     */\n    winningPlayers: string[];\n\n    /**\n     * Current round number\n     * The first round is *1*\n     * However there are scores for round 0 so we can show zeros for all the players\n     */\n    round: number;\n\n    /**\n     * This is a cheat-code (and used for debugging)\n     * When set to true, all players' cards are shown\n     * When set to false, only the human player's cards are shown\n     */\n    isAllCardsShown: boolean;\n\n    /**\n     * This is the index of the local (human) player\n     */\n    localPlayerIndex: number;\n\n    /**\n     * The number of times that the current dealer has failed consecutively\n     */\n    numFailedDeals: number;\n\n    /**\n     * This is passed from the child component up here to the parent\n     */\n    phase: GamePhase;\n\n    /**\n     * Control randomness for reproducibility\n     */\n    randomSeed: number;\n\n    /**\n     * True iff we should show the score card\n     */\n    isScorecardShown: boolean;\n\n    /**\n     * True iff the intro dialog is shown\n     */\n    isIntroDialogShown: boolean;\n}\n\n/**\n * The AI player names to choose from\n * Users should not modify this array but should instead clone it\n */\nconst AI_PLAYER_NAMES = [\"Alisa\", \"Elena\", \"Gallina\", \"Misha\", \"Boris\"];\n\n/**\n * This is the top-level component for a local game against 2 AI opponents.\n */\nexport class LocalGameView extends PureComponent<ILocalGameProps, ILocalGameState> {\n    constructor(props: ILocalGameProps) {\n        super(props);\n\n        const playerNames = getPlayerNames(this.props.playerName);\n        const scores = getInitialScores(playerNames);\n\n        // guaranteed to not be -1\n        const localPlayerIndex = playerNames.indexOf(props.playerName);\n\n        this.state = {\n            isGameReady: false,\n            isGameOver: false,\n            playerNames: playerNames,\n            dealerIndex: 0,\n            scores: scores,\n            winningPlayers: [],\n            round: 1,\n            isAllCardsShown: false,\n            localPlayerIndex: localPlayerIndex,\n            numFailedDeals: 0,\n            phase: GamePhase.NOT_DEALT,\n\n            // by default show the intro dialog\n            isIntroDialogShown: true,\n            // by default scorecard is hidden\n            isScorecardShown: false,\n\n            // TODO\n            randomSeed: 1,\n        };\n\n        // because everything is terrible\n        this.onRoundOver = this.onRoundOver.bind(this);\n        this.saveGameState = this.saveGameState.bind(this);\n        this.loadGameState = this.loadGameState.bind(this);\n        this.getBoltScores = this.getBoltScores.bind(this);\n        this.handleChangePhase = this.handleChangePhase.bind(this);\n        this.handleChangeViewScorecard = this.handleChangeViewScorecard.bind(this);\n    }\n\n    saveGameState() {\n        // write the current game details to local storage\n        const sGameDetails = JSON.stringify(this.state);\n        window.localStorage.setItem(`game:${this.props.gameId}`, sGameDetails);\n        console.debug(`saved game state for game ${this.props.gameId}`);\n    }\n\n    /**\n     * Return true iff the game state was successfully loaded\n     * Return false if no game state was found to load\n     */\n    loadGameState(): boolean {\n        console.debug(`Trying to load saved game state from local storage for game ${this.props.gameId}...`);\n        // load game details from browser cache if there are any\n        let sGameDetails = window.localStorage.getItem(`game:${this.props.gameId}`);\n        if (sGameDetails) {\n            console.debug(`found game state for this game in localstorage:`);\n            const savedGameState = JSON.parse(sGameDetails) as ILocalGameState;\n            console.debug(savedGameState);\n            this.setState({\n                playerNames: [...savedGameState.playerNames],\n                localPlayerIndex: savedGameState.localPlayerIndex,\n                dealerIndex: savedGameState.dealerIndex,\n                round: savedGameState.round,\n                scores: savedGameState.scores,\n                numFailedDeals: savedGameState.numFailedDeals,\n                isIntroDialogShown: savedGameState.isIntroDialogShown || false,\n                isGameOver: savedGameState.isGameOver || false,\n                winningPlayers: savedGameState.winningPlayers || [],\n                // now that everything is loaded, the game is ready\n                isGameReady: true,\n            });\n            return true;\n        } else {\n            this.setState({\n                isGameReady: true,\n            });\n            return false;\n        }\n    }\n\n    componentDidMount() {\n        if (!this.loadGameState()) {\n            console.debug(`no previous game state found for game ${this.props.gameId}`);\n            this.saveGameState();\n        }\n    }\n\n    /**\n     * Handle the case where a player has dealt unsuccessfully 3 times in a row\n     */\n    getBoltScores(): {[key: string]: number} {\n        // fill out the scores for each player\n        // dealer gets -120\n        let scores: { [key: string]: number } = {};\n        for (let i = 0; i < this.state.playerNames.length; i++) {\n            let playerName = this.state.playerNames[i];\n            if (i === this.state.dealerIndex) {\n                scores[playerName] = -120;\n            } else {\n                scores[playerName] = 0;\n            }\n        }\n        return scores;\n    }\n\n    /**\n     * This method is called when the round is over (with scores from the round).\n     *\n     * @param roundScores map from player names to the scores they received in that round.\n     * These numbers may be negative.\n     * NOTE: The scores received here should be reflective of the result of the contract. That computation is up to the *caller*.\n     * NOTE: The scores however do not take into account the barrel, or other factors outside the considerations of a single round.\n     *\n     * @param isEarlyExit Whether something happened to prevent the full game from being played\n     */\n    onRoundOver(roundScores: {[key: string]: number}, isEarlyExit: boolean): void {\n        if (this.state.isGameOver) {\n            throw new Error('cannot call this method when the game is already over');\n        }\n\n        if (isEarlyExit && this.state.numFailedDeals < 2) {\n            console.log(`round ${this.state.round} ended early`);\n            this.setState({\n                numFailedDeals: this.state.numFailedDeals + 1,\n            }, () => {\n                console.log(`number of failed deals is now ${this.state.numFailedDeals}`);\n                this.saveGameState();\n            });\n        } else if (isEarlyExit && this.state.numFailedDeals === 2) {\n            console.log('3 failed deals! Bolt!');\n            roundScores = this.getBoltScores();\n        } else {\n            // current round must be at least 1\n            console.assert(this.state.round > 0);\n            console.debug(`Round ${this.state.round} is over.`);\n\n            const newScoreHistory = Object.assign({}, this.state.scores);\n\n            for(const name of Object.keys(roundScores)) {\n                // there should be scores from the previous round\n                // but if not, set them to zero\n                if (!newScoreHistory[name][this.state.round - 1]) {\n                    newScoreHistory[name][this.state.round - 1] = 0;\n                }\n            }\n\n            // latest round to count in scoreHistory is this.state.round - 1 (the scores from this round should be overwritten)\n            const newRoundScoresFinal = updateScores(newScoreHistory, roundScores, this.state.round - 1);\n\n            for (let player of this.state.playerNames) {\n                newScoreHistory[player][this.state.round] = newRoundScoresFinal[player];\n            }\n\n            // evaluate game-end conditions\n            const winningPlayers = [];\n            let isGameOver = false;\n            for (let player of this.state.playerNames) {\n                if (newScoreHistory[player][this.state.round] >= 1000) {\n                    console.debug(`Player ${player} has won the game`);\n                    winningPlayers.push(player);\n                    isGameOver = true;\n                }\n            }\n\n            this.setState({\n                scores: newScoreHistory,\n                round: this.state.round + 1,\n                // important to update the phase here\n                phase: GamePhase.NOT_DEALT,\n                dealerIndex: (this.state.dealerIndex + 1) % 3,\n                numFailedDeals: 0,\n                winningPlayers: winningPlayers,\n                isGameOver: isGameOver,\n            }, () => {\n                this.saveGameState();\n            });\n        }\n    }\n\n    /**\n     * Child component calls this method when the phase has changed\n     * We can use this to update the scores as soon as they become available (rather than at the end of the round)\n     */\n    handleChangePhase(newPhase: GamePhase, roundScores?: { [key: string]: number }) {\n        if (this.state.isGameOver) {\n            throw new Error('cannot call this method when the game is already over');\n        }\n\n        // stay the same in most cases\n        let newScoreHistory = this.state.scores;\n\n        if (newPhase === GamePhase.SCORING && roundScores) {\n            console.debug('Updating scores in scoring phase');\n\n            // we know it's not an early exit\n            console.assert(this.state.round > 0);\n\n            // set the scores for this round\n            newScoreHistory = Object.assign({}, this.state.scores);\n\n            for(const name of Object.keys(roundScores)) {\n                // there should be scores from the previous round\n                // but if not, set them to zero\n                if (!newScoreHistory[name][this.state.round - 1]) {\n                    newScoreHistory[name][this.state.round - 1] = 0;\n                }\n            }\n\n            const newRoundScoresFinal = updateScores(newScoreHistory, roundScores, this.state.round - 1);\n            for (let player of this.state.playerNames) {\n                newScoreHistory[player][this.state.round] = newRoundScoresFinal[player];\n            }\n        }\n\n        this.setState({\n            phase: newPhase,\n            // NOTE: do not update the round here\n            scores: newScoreHistory,\n        });\n    }\n\n    handleDismissIntroDialog() {\n        this.setState({\n            isIntroDialogShown: false,\n        }, () => {\n            this.saveGameState();\n        });\n    }\n\n    handleChangeViewScorecard(isVisible: boolean) {\n        this.setState({\n            isScorecardShown: isVisible,\n        });\n    }\n\n    render(): JSX.Element {\n        let mainView = null;\n\n        if (this.state.isGameReady && !this.state.isGameOver) {\n            mainView = <LocalGameRoundView\n                randomSeed={this.state.randomSeed}\n                gameId={this.props.gameId}\n                roundNum={this.state.round}\n                isAllCardsShown={this.state.isAllCardsShown}\n                playerNames={this.state.playerNames}\n                dealerIndex={this.state.dealerIndex}\n                onRoundOver={this.onRoundOver}\n                numFailedDeals={this.state.numFailedDeals}\n                localPlayerIndex={this.state.localPlayerIndex}\n                onChangePhase={this.handleChangePhase} />;\n        } else if (this.state.isGameOver) {\n            mainView = (<div>\n                <h3>Game Over!</h3>\n                <p>The game is over.</p>\n\n                <p>\n                    {this.state.winningPlayers.length === 1 ? `The winner is ${this.state.winningPlayers[0]}.` :\n                        `The winning players are ${this.state.winningPlayers.join(', ')}.`}\n                </p>\n            </div>);\n        } else {\n            mainView = <LoadingView />\n        }\n\n        return (<div className=\"wrapper\">\n            <header>\n                <Navbar gameId={this.props.gameId}\n                    setNavHash={this.props.onNewRoute} />\n            </header>\n            <main className=\"container\">\n                <div className=\"main-control-panel\">\n                    <button type=\"button\" className=\"btn btn-info btn-lg\"\n                        data-toggle=\"modal\"\n                        data-target=\"#score-view-modal\"\n                        onClick={ (e) => this.handleChangeViewScorecard(!this.state.isScorecardShown) }>\n                        { this.state.isScorecardShown ? 'Hide Scorecard' : 'View Scorecard' }\n                    </button>\n                </div>\n                { this.state.isScorecardShown ?\n                    <div>\n                        {/* in the scoring phase we can preview the scores for the *current* round rather than the previous round */}\n                        <ScoreView currentRound={this.state.phase === GamePhase.SCORING ? this.state.round + 1 : this.state.round}\n                            playerNames={this.state.playerNames}\n                            scores={this.state.scores}\n                            onDismiss={() => this.handleChangeViewScorecard(false)} />\n                        <div className=\"modal-backdrop fade show\"\n                            onClick={() => this.handleChangeViewScorecard(false)}></div>\n                    </div> :\n                    null}\n                { mainView }\n            </main>\n        </div>);\n    }\n}","import React from \"react\";\nimport { IGameInfo } from \"../api\";\nimport ScoreView from \"../score-view\";\n\ninterface IPlayerProps {\n    playerNames: string[];\n    /**\n     * Whether to initially render the component as collapsed or not\n     */\n    isCollapsed?: boolean;\n}\n\ninterface IPlayerState {\n    isCollapsed: boolean;\n}\n\nexport class AdminPlayerView extends React.PureComponent<IPlayerProps, IPlayerState> {\n    constructor(props: IPlayerProps) {\n        super(props);\n        const isCollapsed = typeof props.isCollapsed === \"undefined\" ? false : props.isCollapsed;\n        this.state = {\n            isCollapsed: isCollapsed,\n        };\n        this.toggleCollapse = this.toggleCollapse.bind(this);\n    }\n\n    toggleCollapse(e: React.SyntheticEvent) {\n        e.preventDefault();\n        this.setState({\n            isCollapsed: !this.state.isCollapsed,\n        });\n    }\n\n    render() {\n        const players = this.props.playerNames.map((player: string, i: number) => {\n            return <li key={`player=${i}`}>{ player }</li>\n        });\n        return (<div className=\"admin-player-container\">\n            <h2>\n                <a href=\"#player-container-collapse\" role=\"button\" data-toggle=\"collapse\" data-target=\"#player-container-collapse\"\n                    aria-expanded={ !this.state.isCollapsed } aria-controls=\"player-container-collapse\"\n                    onClick={(e) => this.toggleCollapse(e)}>\n                    <span>Players</span>\n                    { this.state.isCollapsed ? <span>&nbsp;(collapsed)</span> : null }\n                </a>\n            </h2>\n\n            { this.state.isCollapsed ?\n                null :\n                <div id=\"player-container-collapse\">\n                    {this.props.playerNames.length > 0 ?\n                        <ol>\n                            {players}\n                        </ol> :\n                        <div>no players registered</div>}\n                </div> }\n        </div>);\n    }\n}\n\ninterface IGameInfoProps {\n    gameInfo: IGameInfo;\n    /**\n     * Whether to initially render the component as collapsed or not\n     */\n    isCollapsed?: boolean;\n}\n\ninterface IGameInfoState {\n    isCollapsed: boolean;\n}\n\nexport class GameInfoView extends React.PureComponent<IGameInfoProps, IGameInfoState> {\n    constructor(props: IGameInfoProps) {\n        super(props);\n\n        const isCollapsed = typeof props.isCollapsed === \"undefined\" ? false : props.isCollapsed;\n        this.state = {\n            isCollapsed: isCollapsed,\n        };\n\n        this.toggleCollapse = this.toggleCollapse.bind(this);\n    }\n\n    toggleCollapse(e: React.SyntheticEvent) {\n        e.preventDefault();\n        this.setState({\n            isCollapsed: !(this.state.isCollapsed),\n        });\n    }\n\n    render() {\n        return (<div className=\"admin-game-info-container\">\n            <div id=\"game-info-header\">\n                <h2>\n                    <a href=\"#game-info-collapse\" role=\"button\" data-toggle=\"collapse\" data-target=\"#game-info-collapse\"\n                        aria-expanded={ this.state.isCollapsed } aria-controls=\"game-info-collapse\"\n                        onClick={(e) => this.toggleCollapse(e)}>\n                            <span>Game Info</span>\n                            { this.state.isCollapsed ? <span>&nbsp;(collapsed)</span> : null }\n                    </a>\n                </h2>\n            </div>\n\n            { this.state.isCollapsed ?\n                null :\n                <div id=\"game-info-collapse\" aria-labelledby=\"game-info-header\">\n                    <div>Round - {this.props.gameInfo.round} </div>\n                    <div>Game Creator - {this.props.gameInfo.creator} </div>\n                    <div>Has Started? - {this.props.gameInfo.hasStarted ? 'yes' : 'no'} </div>\n                </div> }\n        </div>);\n    }\n}\n\ninterface IProps {\n    gameId: string;\n    playerNames: string[];\n    gameInfo: IGameInfo;\n    rounds: number[];\n    onSelectRound: (round: number) => any;\n}\n\ninterface IState {}\n\nexport class GameView extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.handleSelectRound = this.handleSelectRound.bind(this);\n    }\n\n    handleSelectRound(e: React.SyntheticEvent, round: number) {\n        // e.preventDefault();\n        // this.props.onSelectRound(round);\n    }\n\n    render() {\n        const rounds = this.props.rounds.map((round: number) => {\n            const isActive = round === this.props.gameInfo.round;\n            const classes = ['game-round'];\n            if (isActive) {\n                classes.push('active');\n            }\n            return <li key={`round-${round}`}>\n                <a href={`/server?game=${this.props.gameId}&round=${round}`}\n                    className={ classes.join(' ') }\n                    onClick={(e) => this.handleSelectRound(e, round)}>\n                        <span>Round {round}</span>\n                        { isActive ? <span>&nbsp;(active)</span> : null }\n                </a>\n            </li>;\n        });\n\n        return (<div>\n            <h1 className=\"title\">Game { this.props.gameId }</h1>\n\n            {/* <AdminPlayerView\n                playerNames={this.props.playerNames} /> */}\n\n            <ScoreView\n                scores={this.props.gameInfo.scores}\n                playerNames={this.props.playerNames}\n                round={this.props.gameInfo.round} />\n\n            <GameInfoView\n                gameInfo={this.props.gameInfo} />\n\n            <div className=\"admin-rounds-container\">\n                { this.props.rounds.length > 0 ?\n                    <div>\n                        <h2>Rounds</h2>\n                        <ol>\n                            { rounds }\n                        </ol>\n                    </div>:\n                    <div>no rounds</div> }\n            </div>\n        </div>);\n    }\n}","import React from 'react';\nimport {IGameInfo} from '../api';\n\ninterface INoneProps {\n    /**\n     * map of game IDs to IGameInfo\n     */\n    games: {[key: string]: IGameInfo};\n\n    onSelectGame: (gameId: string) => any;\n}\n\ninterface INoneState {}\n\nexport class NoneSelectedView extends React.PureComponent<INoneProps, INoneState> {\n    constructor(props: INoneProps) {\n        super(props);\n\n        this.handleSelectGame = this.handleSelectGame.bind(this);\n    }\n\n    handleSelectGame(e: React.SyntheticEvent, gameId: string) {\n        // e.preventDefault();\n        // this.props.onSelectGame(gameId);\n    }\n\n    render() {\n        const gameLinks = Object.entries(this.props.games).map(([gameId, gameInfo]: [string, IGameInfo]) => {\n            const hasStarted = gameInfo.hasStarted;\n            return <li key={`game-link-${gameId}`}>\n                <a href={`/server?game=${gameId}`}\n                    onClick={(e) => this.handleSelectGame(e, gameId)}>\n                    <span>{ hasStarted ? gameId : `${gameId} (not started - waiting for players to join)`}</span>\n                </a>\n            </li>\n        });\n\n        return (<div className=\"games-container\">\n            <h1 className=\"title\">Tysyacha Server</h1>\n\n            <h2>Games</h2>\n\n            {gameLinks.length > 0 ?\n                <ol>\n                    {gameLinks}\n                </ol> :\n                <div>no games</div>}\n        </div>);\n    }\n}\n","import React from \"react\";\nimport { Card, Hand } from \"../cards\";\nimport {CardView} from \"../local-components/card-view\";\n\n\ninterface IProps {\n    contractPlayer: string;\n    contractPlayerCards: Hand;\n    treasureCards: Card[];\n    selectedCards: {[key: string]: Card};\n    playerNames: string[];\n    onSelect: (targetPlayer: string, card: Card) => any;\n    onDistribute: () => any;\n}\n\ninterface IState {\n    selectedPlayer: string | null;\n}\n\nexport class DistributeCardsView extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            selectedPlayer: null,\n        };\n        this.selectPlayer = this.selectPlayer.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n    }\n\n    selectPlayer(player: string) {\n        if (player === this.state.selectedPlayer) {\n            this.setState({\n                selectedPlayer: null,\n            });\n        } else {\n            this.setState({\n                selectedPlayer: player,\n            });\n        }\n    }\n\n    onSelect(card: Card) {\n        if(!this.state.selectedPlayer) {\n            return;\n        }\n        this.props.onSelect(this.state.selectedPlayer, card);\n    }\n\n    render() {\n        const cards = this.props.contractPlayerCards.cards.slice();\n        cards.push(...this.props.treasureCards);\n        const bigHand = new Hand(cards);\n\n        const cardElems = [] as JSX.Element[];\n        Object.entries(bigHand.cardsBySuit).forEach(([suit, cards]) => {\n            cards.forEach((card: Card, i: number) => {\n                const isSelected = Object.values(this.props.selectedCards).includes(card);\n                let targetPlayer = null;\n                if (isSelected) {\n                    // find the corresponding player name\n                    for (let [name, otherCard] of Object.entries(this.props.selectedCards)) {\n                        if (card === otherCard) {\n                            targetPlayer = name;\n                        }\n                    }\n                }\n                const elem = (<div key={`distribute-card-container-${suit}-${i}`}>\n                    <CardView key={`distribute-card-${i}`}\n                        suit={card.suit}\n                        value={card.value}\n                        classNames={isSelected ? [\"card-selected\"] : []}\n                        onClick={(e) => this.onSelect(card)} />\n                    {targetPlayer ?\n                        <div className=\"target-player\">sending to {targetPlayer}</div>\n                        : null}\n                </div>);\n                cardElems.push(elem);\n            });\n        })\n\n        const playerButtons = this.props.playerNames.filter((name: string) => {\n            return name !== this.props.contractPlayer;\n        }).map((name: string, i :number) => {\n            const classes = ['btn', 'btn-secondary'];\n            const isSelected = this.state.selectedPlayer === name\n            if (isSelected) {\n                classes.push('active');\n            }\n            return (<label key={`player-${i}`}\n                className={classes.join(\" \")}>\n                    <input type=\"radio\" name=\"options\" id={`options-${i}`} autoComplete=\"off\"\n                        checked={isSelected}\n                        onChange={(e) => this.selectPlayer(name) }/> {name}\n            </label>);\n        })\n\n        return (<form className=\"distribute-cards-form\">\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                { playerButtons }\n            </div>\n            <div className=\"player-hand\">\n                { cardElems }\n            </div>\n            <button type=\"button\" className=\"btn btn-primary\"\n                onClick={(e) => this.props.onDistribute()}>Distribute Cards</button>\n        </form>);\n    }\n}\n","import React, { ChangeEvent } from 'react';\nimport API, { IRoundInfo, IGameInfo, IPlayingPhaseInfo } from '../api';\nimport { GamePhase, ITrickCard, IPastTrick } from '../game-mechanics';\nimport { DistributeCardsView } from './distribute-cards-view';\nimport { Hand, Card, CardValue } from '../cards';\nimport { PlayerView } from '../local-components/player-view';\n\ninterface IProps {\n    gameId: string;\n    gameInfo: IGameInfo;\n    roundInfo: IRoundInfo;\n    playingPhaseInfo: IPlayingPhaseInfo | null;\n    playerCards: {[key: string]: Hand} | null;\n    treasure: Card[] | null;\n    playerNames: string[];\n}\n\ninterface IState {\n    api: API;\n\n    /**\n     * Multi-functions as bid during bid phase\n     * And final contract during REVEAL_TREASURE phase\n     */\n    bid: number;\n\n    /**\n     * Cards selected in the DISTRIBUTE_CARDS phase\n     */\n    selectedCards: {[key: string] : Card};\n}\n\nexport class ApiView extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            api: new API(),\n            bid: -1,\n            selectedCards: {},\n        };\n\n        this.onDealClick = this.onDealClick.bind(this);\n        this.onBidChange = this.onBidChange.bind(this);\n        this.onBidClick = this.onBidClick.bind(this);\n        this.onPassClick = this.onPassClick.bind(this);\n        this.onFinalizeContractClick = this.onFinalizeContractClick.bind(this);\n        this.toggleSelectCard = this.toggleSelectCard.bind(this);\n        this.onDistribute = this.onDistribute.bind(this);\n        this.onPlayCard = this.onPlayCard.bind(this);\n        this.onNextRound = this.onNextRound.bind(this);\n    }\n\n    async toggleSelectCard(targetPlayer: string, card: Card) {\n        const selectedCards = Object.assign({}, this.state.selectedCards);\n        selectedCards[targetPlayer] = card;\n        this.setState({\n            selectedCards,\n        });\n    }\n\n    async onDealClick() {\n        await this.state.api.postDealCards(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            this.props.roundInfo.dealer,\n        );\n        // easier to just reload\n        window.location.reload();\n    }\n\n    onBidChange(e: ChangeEvent<HTMLInputElement>) {\n        const bid = Number.parseInt((e.target as HTMLInputElement).value);\n        this.setState({\n            bid: bid,\n        });\n    }\n\n    async onPassClick(e: React.SyntheticEvent) {\n        e.preventDefault();\n        await this.state.api.postBid(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            this.props.roundInfo.biddingPlayer,\n            0\n        );\n        // easier to just reload\n        window.location.reload();\n    }\n\n    async onBidClick() {\n        await this.state.api.postBid(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            this.props.roundInfo.biddingPlayer,\n            this.state.bid,\n        );\n        // easier to just reload\n        window.location.reload();\n    }\n\n    async onFinalizeContractClick() {\n        if(!this.props.roundInfo.winningBid) {\n            throw new Error('Cannot finalize contract without having a winning bid');\n        }\n        await this.state.api.postFinalContract(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            this.props.roundInfo.winningBid.player,\n            this.state.bid,\n        );\n        // easier to just reload\n        window.location.reload();\n    }\n\n    async onDistribute() {\n        if(!this.props.roundInfo.finalContract) {\n            throw new Error('Cannot distribute cards without having a final contract');\n        }\n\n        if(!this.props.playerCards || !this.props.treasure) {\n            throw new Error('player cards or treasure not set');\n        }\n\n        // given selected cards, figure out what's kept and what's given away\n        if(Object.keys(this.state.selectedCards).length !== 2) {\n            throw new Error('Must select 2 players and 1 card per player');\n        }\n\n        const keptCards : Card[] = [];\n        const givingAwayCards = Object.values(this.state.selectedCards);\n        this.props.playerCards[this.props.roundInfo.finalContract.player].cards.forEach((card: Card) => {\n            if (!givingAwayCards.includes(card)) {\n                keptCards.push(card);\n            }\n        });\n        this.props.treasure.forEach((card: Card) => {\n            if (!givingAwayCards.includes(card)) {\n                keptCards.push(card);\n            }\n        });\n\n        if(keptCards.length !== 8) {\n            throw new Error('kept cards must be 8 cards in length');\n        }\n\n        await this.state.api.postDistributeCards(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            this.props.roundInfo.finalContract.player,\n            this.state.selectedCards,\n            keptCards,\n        );\n        // easier to just reload\n        window.location.reload();\n    }\n\n    async onPlayCard(playerIndex: number, cardIndex: number) {\n        if(!this.props.playerCards) {\n            throw new Error('player cards not set');\n        }\n\n        const player = this.props.playerNames[playerIndex];\n        const hand = this.props.playerCards[player];\n        const card = hand.cards[cardIndex];\n\n        // is this a marriage\n        let isMarriage = false;\n        if (hand.marriages.includes(card.suit) && (card.value === CardValue.KING || card.value === CardValue.QUEEN)) {\n            isMarriage = true;\n        }\n\n        await this.state.api.postPlayCard(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            player,\n            card,\n            isMarriage,\n        );\n        // easier to just reload\n        window.location.reload();\n    }\n\n    async onNextRound() {\n        await this.state.api.postEndRound(\n            this.props.gameId,\n            this.props.gameInfo.round,\n            this.props.gameInfo.creator\n        );\n\n        // easier to just load the game page again\n        window.location.href = `/server?game=${this.props.gameId}`;\n    }\n\n    render() {\n        let playerView = null;\n        if (this.props.roundInfo.phase === GamePhase.PLAYING && this.props.playingPhaseInfo && this.props.roundInfo.finalContract && this.props.playerCards) {\n            let player = this.props.playingPhaseInfo.turn;\n            let numTricksTaken = 0;\n            let tricksTaken: ITrickCard[][] = [];\n            this.props.playingPhaseInfo.pastTricks.map((trick: IPastTrick) => {\n                if(trick.winner === player) {\n                    numTricksTaken += 1;\n                    tricksTaken.push(trick.trick);\n                }\n            });\n\n            playerView = <PlayerView\n                name={this.props.playingPhaseInfo.turn}\n                playerIndex={this.props.playerNames.indexOf(player)}\n                hand={this.props.playerCards[player]}\n                phase={this.props.roundInfo.phase}\n                isDealer={this.props.roundInfo.dealer === player}\n                isContractPlayer={this.props.roundInfo.finalContract.player === player}\n                isActivePlayer={true}\n                numTricksTaken={numTricksTaken}\n                tricksTaken={tricksTaken}\n                onCardSelect={this.onPlayCard}\n                // TODO\n                showCards={false} />;\n        }\n\n        return (<div className=\"btn-container\">\n            { this.props.roundInfo.phase === GamePhase.NOT_DEALT ?\n                <button className=\"btn btn-success\"\n                    disabled={this.props.roundInfo.phase !== GamePhase.NOT_DEALT}\n                    onClick={this.onDealClick}>Deal - {this.props.roundInfo.dealer }</button>\n                : null }\n\n            { this.props.roundInfo.phase === GamePhase.BIDDING ?\n                <form className=\"bidding-form\">\n                    <h3>Bidding</h3>\n                    <label htmlFor=\"bid\">Bid for {this.props.roundInfo.biddingPlayer } </label>\n                    <input type=\"number\" name=\"bid\" className=\"form-control\"\n                        placeholder=\"enter bid\"\n                        min={100}\n                        max={500}\n                        disabled={ this.props.roundInfo.phase !== GamePhase.BIDDING }\n                        onChange={(e) => this.onBidChange(e) } />\n                    <button className=\"btn btn-info form-control\" type=\"button\"\n                        onClick={(e) => this.onPassClick(e)}>Send Pass - { this.props.roundInfo.biddingPlayer }</button>\n                    <button className=\"btn btn-success form-control\" type=\"button\"\n                        onClick={this.onBidClick}>Send Bid - { this.props.roundInfo.biddingPlayer }</button>\n                </form> : null }\n\n            { this.props.roundInfo.phase === GamePhase.REVEAL_TREASURE && this.props.roundInfo.winningBid ?\n                <form className=\"final-contract-form\">\n                    <h3>Final Contract</h3>\n                    <label htmlFor=\"bid\">Final Contract for {this.props.roundInfo.winningBid.player } </label>\n                    <input type=\"number\" name=\"bid\" className=\"form-control\"\n                        placeholder=\"enter final contract\"\n                        min={this.props.roundInfo.winningBid.points}\n                        max={500}\n                        onChange={(e) => this.onBidChange(e) } />\n                    <button className=\"btn btn-success form-control\" type=\"button\"\n                        onClick={this.onFinalizeContractClick}>Finalize Contract - {this.props.roundInfo.winningBid.player}</button>\n                </form>\n                : null}\n\n            {this.props.roundInfo.phase === GamePhase.DISTRIBUTE_CARDS && this.props.roundInfo.finalContract && this.props.playerCards && this.props.treasure ?\n                <DistributeCardsView\n                    contractPlayerCards={this.props.playerCards[this.props.roundInfo.finalContract.player]}\n                    treasureCards={this.props.treasure}\n                    selectedCards={this.state.selectedCards}\n                    playerNames={this.props.playerNames}\n                    contractPlayer={this.props.roundInfo.finalContract.player}\n                    onSelect={this.toggleSelectCard}\n                    onDistribute={this.onDistribute} />\n                : null}\n\n            { playerView }\n\n            {this.props.roundInfo.phase === GamePhase.SCORING ?\n                <form className=\"next-round-form\">\n                    <button type=\"button\" className=\"btn btn-primary\"\n                        onClick={(e) => this.onNextRound()}>Next Round</button>\n                </form> : null}\n        </div>);\n    }\n}","import React from \"react\";\nimport { ITrickCard, IPastTrick } from \"../game-mechanics\";\nimport {valueToString} from \"../cards\";\n\ninterface IState {}\n\ninterface IProps {\n    pastTricks: IPastTrick[];\n}\n\nexport class PastTricksView extends React.PureComponent<IProps, IState> {\n    render() {\n        const pastTricks = this.props.pastTricks.map((pastTrick: IPastTrick, i: number) => {\n            const pts = pastTrick.trick.map((card: ITrickCard) => {\n                return card.card.value;\n            }).reduce((a, b) => {\n                return a + b;\n            }, 0);\n            const cards = pastTrick.trick.map((card: ITrickCard, j: number) => {\n                return <span key={`trick-${i}-card-${j}`}>\n                    { j > 0 ?\n                        <span>,&nbsp;</span> : null}\n                    <span>{card.card.suit }</span>\n                    <span>{valueToString(card.card.value) }</span>\n                </span>;\n            });\n            return (<div className=\"past-trick\" key={`past-trick-${i}`}>\n                <div>\n                    <span>trick { i + 1 }:&nbsp;</span>\n                    <span>winner - {pastTrick.winner }&nbsp;</span>\n                    <span>({ pts} points)</span>\n                </div>\n                <div>\n                    { cards }\n                </div>\n            </div>);\n        });\n\n        return (<div>\n            <h2>Past Tricks</h2>\n            { pastTricks.length ? pastTricks :\n                <div>no past tricks</div> }\n        </div>);\n    }\n}","import React from 'react';\nimport {Card} from '../cards';\nimport { GamePhase } from '../game-mechanics';\nimport { IRoundInfo } from '../api';\n\ninterface IProps {\n    treasureCards: Card[];\n    roundInfo: IRoundInfo;\n    /**\n     * True to collapse initially\n     */\n    isCollapsed?: boolean;\n}\ninterface IState {\n    isCollapsed: boolean;\n}\n\nexport class AdminTreasureView extends React.PureComponent<IProps, IState> {\n    render() {\n        const treasureCards = this.props.treasureCards.map((card: Card, i: number) => {\n            return <span key={`treasure-${i}`}>\n                { card.toString() }\n            </span>\n        });\n\n        return (<div className=\"admin-treasure-container\">\n            <h3>\n                <span>Treasure</span>\n                {this.props.roundInfo.phase === GamePhase.BIDDING ?\n                    <span>&nbsp;(hidden from players)</span> :\n                    <span>&nbsp;(revealed to players)</span>}\n            </h3>\n            {treasureCards}\n        </div>);\n    }\n}","import React from \"react\";\nimport { Card, Hand } from \"../cards\";\nimport { PlayerView } from \"../local-components/player-view\";\nimport { GamePhase } from \"../game-mechanics\";\n\ninterface RevealTreasureViewProps {\n    playerNames: string[];\n    playerHands: {[key: string]: Hand};\n    dealerIndex: number;\n    contractPlayerIndex: number;\n\n    treasure: Card[];\n}\n\ninterface RevealTreasureViewState {}\n\nexport class RevealTreasureView extends React.PureComponent<RevealTreasureViewProps, RevealTreasureViewState> {\n    render() {\n        const name = this.props.playerNames[this.props.contractPlayerIndex];\n        const i = this.props.contractPlayerIndex;\n        const allCards = this.props.playerHands[name].cards.slice();\n        allCards.push(...this.props.treasure);\n        const bigHand = new Hand(allCards);\n        const playerHands = (\n            <PlayerView key={`player-${i}`}\n                    name={name}\n                    playerIndex={this.props.contractPlayerIndex}\n                    hand={bigHand}\n                    phase={GamePhase.REVEAL_TREASURE}\n                    isDealer={i === this.props.dealerIndex}\n                    isContractPlayer={true}\n                    isActivePlayer={true}\n                    tricksTaken={[]}\n                    numTricksTaken={0}\n                    showCards={false} />\n        );\n\n        return (<div className=\"table container\">\n            <div className=\"dealt-table\">\n                <div className=\"player-hands\">\n                    <h3>Large Hand</h3>\n                    {playerHands}\n                </div>\n            </div>\n        </div>);\n    }\n}","import React from \"react\";\nimport { IGameInfo, IPlayingPhaseInfo, IRoundInfo } from \"../api\";\nimport { BiddingHistoryView } from \"../bidding-view\";\nimport { Bid, GamePhase, gamePhaseToString, getWinningBid, groupTricksByPlayer, IDeal } from \"../game-mechanics\";\nimport { RoundScoringView } from \"../local-components/round-scoring-view\";\nimport { PlayerView } from \"../player-view\";\nimport { CurrentTrickView } from \"../playing-view\";\nimport ScoreView from \"../score-view\";\nimport { ApiView } from './api-view';\nimport { GameInfoView, AdminPlayerView } from \"./game-view\";\nimport { PastTricksView } from \"./past-tricks-view\";\nimport { AdminTreasureView } from \"./admin-treasure-view\";\nimport { RevealTreasureView } from \"./reveal-treasure-view\";\n\ninterface IProps {\n    roundInfo: IRoundInfo;\n    round: number;\n    playingPhaseInfo: IPlayingPhaseInfo | null;\n}\ninterface IState {\n    isCollapsed: boolean;\n}\n\nclass RoundInfoView extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isCollapsed: false,\n        };\n        this.toggleCollapse = this.toggleCollapse.bind(this);\n    }\n\n    toggleCollapse(e: React.SyntheticEvent) {\n        e.preventDefault();\n        this.setState({\n            isCollapsed: !this.state.isCollapsed,\n        });\n    }\n\n    render() {\n        return (<div className=\"round-info-container\">\n            <h2>\n                <a href=\"#round-info-collapse\" role=\"button\"\n                    onClick={(e) => this.toggleCollapse(e)}>\n                    <span>Round { this.props.round } Info</span>\n                    { this.state.isCollapsed ? <span>&nbsp; (collapsed)</span> : null }\n                </a>\n            </h2>\n\n            { this.state.isCollapsed ? null :\n                <div id=\"round-info-collapse\">\n                    <div>Phase - { gamePhaseToString(this.props.roundInfo.phase) }</div>\n                    <div>Dealer - { this.props.roundInfo.dealer }</div>\n                    { this.props.roundInfo.phase === GamePhase.BIDDING ?\n                        <div>Current Bidder - { this.props.roundInfo.biddingPlayer }</div>: null}\n                    { this.props.roundInfo.phase === GamePhase.REVEAL_TREASURE && this.props.roundInfo.winningBid ?\n                        <div>Winning Bid - {this.props.roundInfo.winningBid.points} ({this.props.roundInfo.winningBid.player})</div> :\n                        null}\n                    { this.props.roundInfo.phase >= GamePhase.DISTRIBUTE_CARDS && this.props.roundInfo.finalContract ?\n                        <div>Final Contract - {this.props.roundInfo.finalContract.points} ({this.props.roundInfo.finalContract.player})</div>:\n                        null}\n                    { this.props.roundInfo.phase === GamePhase.PLAYING && this.props.playingPhaseInfo ?\n                        <div>Current Turn - { this.props.playingPhaseInfo.turn }</div>\n                        : null}\n                    { this.props.roundInfo.phase === GamePhase.PLAYING && this.props.playingPhaseInfo ?\n                        <div>Current Trump - { this.props.playingPhaseInfo.marriage ? this.props.playingPhaseInfo.marriage : \"none\" }</div>\n                        : null}\n                </div> }\n        </div>);\n    }\n}\n\ninterface IRoundViewProps {\n    gameId: string;\n    playerNames: string[];\n    /**\n     * This has the current round for the game\n     */\n    gameInfo: IGameInfo;\n\n    /**\n     * The currently selected round\n     */\n    round: number;\n    roundInfo: IRoundInfo;\n    cards: IDeal | null;\n    bidHistory: Bid[];\n    playingPhaseInfo: IPlayingPhaseInfo | null;\n}\n\ninterface IRoundViewState {\n}\n\nexport class RoundView extends React.PureComponent<IRoundViewProps, IRoundViewState> {\n    constructor(props: IRoundViewProps) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.isActivePlayer = this.isActivePlayer.bind(this);\n    }\n\n    isActivePlayer(name: string): boolean {\n        switch (this.props.roundInfo.phase) {\n            case GamePhase.NOT_DEALT:\n                return false;\n            case GamePhase.BIDDING:\n                return name === this.props.roundInfo.biddingPlayer;\n            case GamePhase.REVEAL_TREASURE:\n                const winningBid = getWinningBid(this.props.bidHistory);\n                if (!winningBid) {\n                    throw new Error(\"bid history must always have a winner in the REVEAL_TREASURE phase\");\n                }\n                return winningBid.player === name;\n            case GamePhase.DISTRIBUTE_CARDS:\n                if (!this.props.roundInfo.finalContract) {\n                    throw new Error(\"final contract must always be set in DISTRIBUTE_CARDS phase\");\n                }\n                return this.props.roundInfo.finalContract.player === name;\n            case GamePhase.PLAYING:\n                if (!this.props.playingPhaseInfo) {\n                    // TODO\n                    // throw new Error(\"playing phase info must be available in the playing phase\");\n                    return false;\n                }\n                return this.props.playingPhaseInfo.turn === name;\n            default:\n                // TODO\n                return false;\n        }\n    }\n\n    render() {\n        let contractPlayerIndex = -1;\n        if(this.props.roundInfo && this.props.roundInfo.finalContract) {\n            contractPlayerIndex = this.props.playerNames.indexOf(this.props.roundInfo.finalContract.player);\n        }\n\n        let players = null;\n        if (this.props.roundInfo && this.props.roundInfo.phase > GamePhase.NOT_DEALT && this.props.cards && this.props.cards.playerCards) {\n            players = this.props.playerNames.map((name: string, i: number) => {\n                if(!this.props.cards) {\n                    // this should never happen\n                    throw new Error('cards not set');\n                }\n                const playerClass = this.isActivePlayer(name) ? \"active-player\" : \"\";\n\n                return (<div key={`player-${i}-container`}>\n                    <h5 className={ \"player-name \" + playerClass }>{name}</h5>\n                    <PlayerView key={`player-${i}`}\n                        index={i}\n                        cards={this.props.cards.playerCards[name]}\n                        phase={this.props.roundInfo.phase} />\n                </div>);\n            });\n        }\n\n        let roundScoringView = null;\n        if (this.props.roundInfo.phase === GamePhase.SCORING && this.props.roundInfo.finalContract && this.props.playingPhaseInfo && this.props.playingPhaseInfo) {\n            const tricksPerPlayer = groupTricksByPlayer(this.props.playerNames, this.props.playingPhaseInfo.pastTricks);\n            roundScoringView = <RoundScoringView\n                    contract={this.props.roundInfo.finalContract}\n                    contractPlayerIndex={contractPlayerIndex}\n                    playerNames={this.props.playerNames}\n                    tricksTaken={tricksPerPlayer}\n                    declaredMarriages={this.props.playingPhaseInfo.declaredMarriages} />;\n        }\n\n        const isActiveRound = this.props.round === this.props.gameInfo.round;\n\n        return (<div>\n            <h1 className=\"title\">\n                <span>Game { this.props.gameId } - Round { this.props.round }</span>\n            </h1>\n            { isActiveRound ? null :\n                <h3>\n                    <span className=\"badge badge-danger\">Round Over</span>\n                </h3>}\n\n            { this.props.gameInfo.hasStarted ?\n                <ScoreView\n                    round={this.props.gameInfo.round}\n                    selectedRound={this.props.round}\n                    scores={this.props.gameInfo.scores}\n                    playerNames={this.props.playerNames}\n                    isCollapsed={this.props.roundInfo.phase !== GamePhase.SCORING && this.props.roundInfo.phase !== GamePhase.NOT_DEALT} />:\n                <AdminPlayerView\n                    playerNames={this.props.playerNames}\n                    isCollapsed={false} /> }\n            <GameInfoView\n                gameInfo={this.props.gameInfo}\n                isCollapsed={true} />\n\n            <RoundInfoView\n                roundInfo={this.props.roundInfo}\n                round={this.props.round}\n                playingPhaseInfo={this.props.playingPhaseInfo}/>\n\n            { this.props.roundInfo.phase > GamePhase.NOT_DEALT ?\n                <BiddingHistoryView\n                    isCollapsed={this.props.roundInfo.phase === GamePhase.PLAYING || this.props.roundInfo.phase === GamePhase.SCORING}\n                    bids={this.props.bidHistory} /> : null }\n\n            {this.props.playingPhaseInfo && this.props.roundInfo.phase >= GamePhase.PLAYING && this.props.roundInfo.phase < GamePhase.SCORING ?\n                <PastTricksView\n                    pastTricks={this.props.playingPhaseInfo.pastTricks} /> :\n                null }\n\n            { this.props.playingPhaseInfo && this.props.roundInfo.phase >= GamePhase.PLAYING && this.props.roundInfo.phase < GamePhase.SCORING ?\n                <CurrentTrickView\n                    currentTrick={this.props.playingPhaseInfo.currentTrick} /> :\n                null }\n\n            { this.props.roundInfo.phase > GamePhase.NOT_DEALT && this.props.roundInfo.phase <= GamePhase.DISTRIBUTE_CARDS && this.props.cards ?\n                <AdminTreasureView\n                    treasureCards={this.props.cards.treasure}\n                    roundInfo={this.props.roundInfo} />\n                : null}\n\n            { this.props.roundInfo.phase  > GamePhase.NOT_DEALT && this.props.roundInfo.phase < GamePhase.SCORING ?\n                <div className=\"admin-player-cards-container\">\n                    <h3>Player Cards</h3>\n\n                    {players}\n                </div> : null}\n\n            { this.props.roundInfo.phase === GamePhase.REVEAL_TREASURE && this.props.cards && this.props.roundInfo.winningBid ?\n                <RevealTreasureView\n                    playerNames={this.props.playerNames}\n                    playerHands={this.props.cards.playerCards}\n                    treasure={this.props.cards.treasure}\n                    dealerIndex={this.props.playerNames.indexOf(this.props.roundInfo.dealer)}\n                    contractPlayerIndex={this.props.playerNames.indexOf(this.props.roundInfo.winningBid.player)}\n                     /> : null }\n\n            { roundScoringView }\n\n            { isActiveRound ?\n                <ApiView roundInfo={this.props.roundInfo}\n                    gameInfo={this.props.gameInfo}\n                    playingPhaseInfo={this.props.playingPhaseInfo}\n                    gameId={this.props.gameId}\n                    playerNames={this.props.playerNames}\n                    playerCards={this.props.cards ? this.props.cards.playerCards : null}\n                    treasure={this.props.cards ? this.props.cards.treasure : null}></ApiView>:\n                null }\n        </div>);\n    }\n}","import React from \"react\";\nimport { API, IGameInfo, IRoundInfo, IPlayingPhaseInfo } from \"../api\";\nimport { IDeal, Bid } from \"../game-mechanics\";\nimport { GameView } from \"./game-view\";\nimport { NoneSelectedView } from \"./none-selected-view\";\nimport { RoundView } from \"./round-view\";\n\ninterface IProps {}\n\ninterface IState {\n    /**\n     * Selected game\n     */\n    gameId: string | null;\n    /**\n     * Selected round\n     */\n    round: number;\n\n    /**\n     * Fetched from server\n     */\n    games: {[key: string]: IGameInfo};\n\n    api: API;\n\n    /**\n     * Fetched from the server\n     */\n    playerNames: string[];\n\n    /**\n     * Fetched from the server\n     */\n    rounds: number[];\n\n    gameInfo: IGameInfo | null;\n\n    errorMsg: string | null;\n\n    /**\n     * Fetched from the server\n     */\n    roundInfo: { [key: number]: IRoundInfo };\n    cardsPerRound: { [key: number]: IDeal };\n\n    /**\n     * Fetched from the server\n     */\n    bidHistory: Bid[];\n    /**\n     * Fetched from the server\n     */\n    playingPhaseInfo: IPlayingPhaseInfo | null;\n}\n\nexport class ServerView extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            // none selected\n            gameId: null,\n\n            // none selected\n            round: -1,\n\n            games: {},\n\n            api: new API(),\n\n            playerNames: [],\n            rounds: [],\n            gameInfo: null,\n            roundInfo: {},\n            cardsPerRound: {},\n            bidHistory: [],\n            playingPhaseInfo: null,\n\n            errorMsg: null,\n        }\n\n        this.loadGames = this.loadGames.bind(this);\n        this.loadGameInfo = this.loadGameInfo.bind(this);\n        this.loadRoundBids = this.loadRoundBids.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.onSelectGame = this.onSelectGame.bind(this);\n        this.onSelectRound = this.onSelectRound.bind(this);\n    }\n\n    async loadGameInfo(gameId: string) {\n        console.log(`Getting game info for game ${gameId}...`);\n        const r = await this.state.api.adminGetGameInfo(gameId);\n        console.log(r);\n        this.setState({\n            gameId,\n            playerNames: r.playerNames,\n            rounds: r.rounds,\n            gameInfo: r.gameInfo,\n            roundInfo: r.roundInfo,\n            cardsPerRound: r.cardsPerRound,\n        });\n    }\n\n    async loadRoundBids(gameId: string, round: number) {\n        const r = await this.state.api.getBids(gameId, round);\n        console.log(\"Loaded bid history:\");\n        console.log(r);\n        this.setState({\n            bidHistory: r.bidHistory,\n        });\n    }\n\n    async loadPlayingPhaseInfo(gameId: string, round: number) {\n        console.log(`Loading playing phase info for game ${gameId} and round ${round}`);\n        const r = await this.state.api.getPlayingPhaseInfo(gameId, round);\n        console.log(r);\n        this.setState({\n            playingPhaseInfo: r,\n        });\n    }\n\n    async onSelectGame(gameId: string) {\n        return this.loadGameInfo(gameId);\n    }\n\n    async onSelectRound(round: number) {\n        this.setState({\n            round: round,\n        });\n    }\n\n    async loadGames() {\n        this.state.api.adminGetGames().then((r) => {\n            this.setState({\n                games: r.games,\n            });\n        }).catch((err) => {\n            console.error(err);\n            this.setState({\n                errorMsg: err,\n            });\n        });\n    }\n\n    async loadData() {\n        console.log(\"loading all data...\");\n        this.loadGames();\n\n        // read information from the url\n        const url = new URL(window.location.href);\n        let gameId = this.state.gameId;\n        if (url.searchParams.has('game')) {\n            gameId = url.searchParams.get('game');\n        }\n        if (gameId) {\n            this.loadGameInfo(gameId);\n        }\n\n        let round = this.state.round;\n        if (url.searchParams.has('round')) {\n            round = Number.parseInt(url.searchParams.get('round') || '-1', 10);\n        }\n        if (gameId && round !== -1) {\n            this.loadRoundBids(gameId, round);\n            this.loadPlayingPhaseInfo(gameId, round);\n        }\n\n        this.setState({\n            gameId,\n            round,\n        });\n        window.setTimeout(this.loadData, 8000);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    render() {\n        let view = null as null | JSX.Element;\n        if (this.state.gameId) {\n            if(!this.state.gameInfo) {\n                view = <div>loading game info...</div>\n            } else if (this.state.round === -1) {\n                view = <GameView\n                    gameId={this.state.gameId}\n                    playerNames={this.state.playerNames}\n                    gameInfo={this.state.gameInfo}\n                    rounds={this.state.rounds}\n                    onSelectRound={this.onSelectRound} />;\n            } else {\n                view = <RoundView\n                    gameId={this.state.gameId}\n                    playerNames={this.state.playerNames}\n                    gameInfo={this.state.gameInfo}\n                    round={this.state.round}\n                    roundInfo={this.state.roundInfo[this.state.round]}\n                    cards={this.state.cardsPerRound[this.state.round]}\n                    bidHistory={this.state.bidHistory}\n                    playingPhaseInfo={this.state.playingPhaseInfo} />;\n            }\n        }  else {\n            view = <NoneSelectedView\n                games={this.state.games}\n                onSelectGame={this.onSelectGame} />\n        }\n\n        return <main className=\"container\">\n            {view}\n        </main>\n    }\n}","import React, { FC, useState } from \"react\";\n\ninterface IProps {\n    /**\n     * Name for the input radio element\n     */\n    radioName: string;\n\n    /**\n     * ID for the container\n     */\n    containerId: string;\n\n    /**\n     * Labels for each of the radio buttons (what we show)\n     */\n    humanLabels: string[];\n\n    /**\n     * Labels for each of the radio buttons (what we submit)\n     */\n    labels: string[];\n\n    /**\n     * Labels which should be disabled\n     */\n    disabledLabels?: string[];\n\n    /**\n     * The currently selected label\n     */\n    checkedLabel: string;\n\n    /**\n     * Handler\n     */\n    onChange(label: string): void;\n};\n\nexport const RadioButtonGroup: FC<IProps> = (props: IProps) => {\n    function handleChange(e: React.SyntheticEvent<HTMLInputElement>) {\n        const v = (e.target as HTMLInputElement).value;\n        props.onChange(v);\n    }\n\n    const buttons = props.labels.map((label: string, i: number) => {\n        let classes = \"btn btn-outline-success btn-lg\";\n        if (label === props.checkedLabel) {\n            classes += \" active\";\n        }\n        if (props.disabledLabels && props.disabledLabels.includes(label)) {\n            classes += \" disabled\";\n        }\n\n        return <label className={classes} key={label}>\n            <input type=\"radio\" name={props.radioName} value={label}\n                disabled={props.disabledLabels && props.disabledLabels.includes(label)}\n                checked={label === props.checkedLabel}\n                onChange={handleChange} /> {props.humanLabels[i]}\n        </label>\n    });\n\n    return (<div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\" id={props.containerId}>\n        { buttons }\n    </div>);\n}\n\nexport default RadioButtonGroup;","import React, { FC, useState } from \"react\";\nimport \"./landing-view.css\";\nimport { randInt } from \"../utils\";\nimport { Navbar } from \"../local-game/navbar\";\nimport RadioButtonGroup from \"../radio-button-group\";\n\n\n/**\n * Game IDs with this many characters will be generated\n * Short game IDs allow easy sharing or copy-pasting\n */\nconst GAME_ID_LENGTH = 6;\n\n/**\n * The game ID is a string containing numbers 0-9 and lowercase letters a-z\n * It will be of length GAME_ID_LENGTH\n * For a total entropy of 26 ^ GAME_ID_LENGTH\n * For example, with a GAME_ID_LENGTH of 6 we have a possible 308,915,776 games\n * This provides a nice balance between entropy (possible values) and length\n * We wouldn't want any duplicate game IDs (since they are not sequential)\n */\nfunction randomGameId(): string {\n    let gameId = \"\";\n    for (let i = 0; i < GAME_ID_LENGTH; i++) {\n        const j = randInt(87, 123);\n        if (j < 97) {\n            gameId += (j - 87).toString();\n        } else {\n            gameId += String.fromCharCode(j);\n        }\n    }\n    return gameId;\n}\n\n/**\n * Find games that are stored against in this browser\n * Do not return any games which have been completed\n * Return a map from game IDs to game details\n */\nfunction findExistingActiveGames(): { [key: string]: any } {\n    const pattern = /game:[a-z0-9]+$/;\n    const gameIds = Object.keys(window.localStorage).filter((key: string) => {\n        return key.match(pattern);\n    }).map((key: string) => {\n        return key.replace('game:', '');\n    });\n\n    console.debug(`Found ${gameIds.length} game IDs`);\n\n    const m = {} as {[key: string]: any};\n    gameIds.forEach((gameId: string) => {\n        m[gameId] = getGameDetails(gameId);\n    });\n\n    let numGameOver = 0;\n\n    for (let gameId of Object.keys(m)) {\n        if (m[gameId].isGameOver) {\n            delete(m[gameId]);\n            numGameOver++;\n        }\n    }\n\n    console.debug(`${numGameOver} of those are done`);\n\n    return m;\n}\n\n/**\n * Guaranteed to return *at least* `localPlayerIndex` and `playerNames`\n * Also guaranteed to have key `isGameOver`\n */\nfunction getGameDetails(gameId: string): any {\n    const sGameDetails = window.localStorage.getItem(`game:${gameId}`);\n    if (!sGameDetails) {\n        throw new Error(`game details for game ${gameId} not found`);\n    }\n    const gameDetails = JSON.parse(sGameDetails);\n    return gameDetails;\n}\n\n/**\n * Only these languages are supported\n * If any other language is passed via the query parameter, the page will refuse to render\n */\nconst SUPPORTED_LANGS = ['en'];\n\ninterface IExistingGamesViewProps {\n    games: {[key: string]: any};\n    joinGame(gameId: string): void;\n};\n\n/**\n * Select a currently active game to join (these games are vs the AI)\n */\nconst ActiveGamesView : FC <IExistingGamesViewProps> = (props: IExistingGamesViewProps) => {\n    const arr = Object.entries(props.games).map(([gameId, gameDetails]) => {\n        return <li key={gameId}>\n            <a href=\"#\" role=\"button\" onClick={() => props.joinGame(gameId) }>{ gameId } ({ gameDetails.round } rounds complete)</a>\n        </li>;\n    });\n    return <div className=\"existing-games-container\">\n        <p>Click which game you want to rejoin.</p>\n        <ul>\n            { arr }\n        </ul>\n    </div>;\n};\n\ninterface IVsHumanViewProps {\n    onJoinGame(gameId: string): void;\n    onNewGame(): void;\n};\n\nconst VsHumanView: FC<IVsHumanViewProps> = (props: IVsHumanViewProps) => {\n    /**\n     * Either 'host' or 'join'\n     */\n    let [gameType, setGameType] = useState('host');\n\n    return <div className=\"vs-human-view\">\n        <p>You can either host a new game or join your friends in their existing game.\n        </p>\n\n        <button type=\"button\" className=\"btn btn-primary btn-lg\">Host a New Game</button>\n\n        { gameType === 'join' ?\n            <p>\n                If you're joining your friends, ask them for their game ID.\n            </p> :\n            null }\n\n        <form>\n            <label htmlFor=\"game_id\">Game ID</label>\n            <input type=\"text\" name=\"game_id\" className=\"form-control\"\n                placeholder=\"game ID\"\n                required={true}/>\n            <button type=\"submit\" className=\"btn btn-primary btn-lg\">Join Game</button>\n        </form>\n\n    </div>;\n};\n\ninterface ILangSelectorViewProps {\n    onChangeLang(lang: string): void;\n}\n\n/**\n * TODO not implemeneted\n */\nconst LangSelectorView = (props: ILangSelectorViewProps) => {\n    return <div className=\"lang-select-container\">\n        <div className=\"lang-select-option\" role=\"button\" onClick={() => props.onChangeLang('ru')}>\n            <img className=\"lang-select-flag\" src=\"/img/Flag_of_Russia.svg.png\" height=\"40px\" alt=\"Russian flag\" />\n            <div className=\"lang-select-name\">Russian</div>\n        </div>\n        <div className=\"lang-select-option\" role=\"button\" onClick={() => props.onChangeLang('en')}>\n            <img className=\"lang-select-flag\" src=\"/img/Flag_of_UK.svg.png\" height=\"40px\" alt=\"UK flag\" />\n            <div className=\"lang-select-name\">English</div>\n        </div>\n    </div>\n};\n\ninterface ILandingViewProps {\n    onNewRoute(newHash: string): void;\n};\n\n/**\n * Land on this page when you go to the index\n * Language is handled through a URL query parameter\n */\nconst LandingView : FC <ILandingViewProps> = (props: ILandingViewProps) => {\n    // read the language from the query parameter\n    // by default, default to english\n    const url = new URL(window.location.href);\n    const urlLang = url.searchParams.get('lang');\n    if (urlLang && !SUPPORTED_LANGS.includes(urlLang)) {\n        throw new Error(`Language ${urlLang} is not yet supported`);\n    }\n    let [lang, setLang] = useState(urlLang ? urlLang : 'en');\n    const activeGames = findExistingActiveGames();\n    /**\n     * Whether to show the *list* of active games\n     */\n    let [showActiveGames, setShowActiveGames] = useState(false);\n    /**\n     * Whether to show the *alert* that active games may be joined\n     */\n    let [showActiveGamesAlert, setShowActiveGamesAlert] = useState(Object.keys(activeGames).length > 0);\n\n    let [playerName, setName] = useState('');\n    let [gameType, setGameType] = useState('ai');\n\n    function handleChangeName(e: React.SyntheticEvent<HTMLInputElement>) {\n        const name = (e.target as HTMLInputElement).value;\n        setName(name);\n    }\n\n    /**\n     * Callback to create a new game (vs AI)\n     * Name is set here\n     */\n    function handleNewAIGame() {\n        // generate a unique random game ID\n        const gameId = randomGameId();\n        // navigate to the right page\n        const url = new URL(window.location.href);\n        url.hash = '#local-ai-game';\n        url.searchParams.set('gameId', gameId.toString());\n        url.searchParams.set('playerName', playerName);\n        url.searchParams.set('lang', lang);\n        window.location.href = url.toString();\n    }\n\n    function handleChangeLang(langName: string) {\n        const url = new URL(window.location.href);\n        url.searchParams.set('lang', langName);\n        window.location.href = url.toString();\n    }\n\n    /**\n     * Callback for when we want to join an existing game vs AI\n     */\n    function handleJoinAIGame(gameId: string) {\n        const gameDetails = getGameDetails(gameId);\n        const url = new URL(window.location.href);\n        url.hash = '#local-ai-game';\n        url.searchParams.set('gameId', gameId);\n        // NOTE: we *must* set the player name to what is recorded in our local DB\n        const playerNames = gameDetails.playerNames as string[];\n        const localPlayerIndex = gameDetails.localPlayerIndex as number;\n        const playerName = playerNames[localPlayerIndex];\n        url.searchParams.set('playerName', playerName);\n\n        // set the language\n        url.searchParams.set('lang', lang);\n\n        window.location.href = url.toString();\n    }\n\n    function handleJoinHumanGame(gameId: string) {\n        const url = new URL(window.location.href);\n        url.hash = '#human-game';\n        url.searchParams.set('gameId', gameId);\n        url.searchParams.set('playerName', playerName);\n        url.searchParams.set('lang', lang);\n        window.location.href = url.toString();\n    }\n\n    /**\n     * Callback to create (host) a new game vs humans\n     */\n    function handleNewHumanGame() {\n         // generate a unique random game ID\n        const gameId = randomGameId();\n        // navigate to the right page\n        const url = new URL(window.location.href);\n        url.hash = '#human-game';\n        url.searchParams.set('gameId', gameId.toString());\n        url.searchParams.set('playerName', playerName);\n        url.searchParams.set('lang', lang);\n        window.location.href = url.toString();\n    }\n\n    let existingGamesAlert = null;\n    if (showActiveGamesAlert) {\n        existingGamesAlert = (<div className=\"join-existing-games-container alert alert-warning alert-dismissible fade show\" role=\"alert\">\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick={() => setShowActiveGamesAlert(false)}>\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n\n            <p>You have { Object.keys(activeGames).length } games in progress. Would you like to join one?</p>\n            <button type=\"button\" className=\"btn btn-warning btn-lg\" onClick={ () => setShowActiveGames(true) }>Continue Active Games</button>\n        </div>);\n    }\n\n    let mainView = (<div>\n        <p className=\"instructions\">\n            You can play the Russian card game Tysyacha here against other humans or sophisticated AI opponents.\n            Enter your name below to begin.\n        </p>\n        <form className=\"player-name-form\">\n            <label htmlFor=\"name\">Your Name</label>\n            <input type=\"text\" className=\"form-control\"\n                name=\"playerName\"\n                placeholder=\"enter your name to continue\"\n                required={true}\n                onChange={handleChangeName}\n            />\n\n            <RadioButtonGroup\n                radioName=\"game_type\"\n                containerId=\"game-type-btn-container\"\n                humanLabels={['vs AI', 'vs Human']}\n                labels={['ai', 'human']}\n                disabledLabels={['human']}\n                checkedLabel={gameType}\n                onChange={setGameType} />\n\n            { gameType === 'ai' ?\n                <button type=\"button\" className=\"btn btn-lg btn-primary form-control\"\n                    onClick={() => handleNewAIGame()}>Play Game vs AI</button> :\n                null }\n        </form>\n\n        {gameType === 'human' ?\n            <VsHumanView\n                onJoinGame={handleJoinHumanGame}\n                onNewGame={handleNewHumanGame} /> :\n            null}\n    </div>);\n\n    return (<div className=\"wrapper landing-view\">\n        <Navbar\n            setNavHash={props.onNewRoute} />\n        <div className=\"hero\">\n            <h1 className=\"title-text\">1000!</h1>\n        </div>\n        <main>\n            <h1>Welcome to the Tysyacha Web App</h1>\n\n            { showActiveGames ? null : existingGamesAlert }\n            { showActiveGames ?\n                <ActiveGamesView games={ activeGames }\n                    joinGame={handleJoinAIGame} /> : null\n            }\n\n            { mainView }\n        </main>\n\n        <footer>\n            Created by Daniel Kats in 2021\n        </footer>\n    </div>);\n};\n\nexport {\n    LandingView,\n};","import React, { FC } from 'react';\nimport { MIN_BID_POINTS } from '../game-mechanics';\nimport { getSuits, Suit, getMarriageValue, getCardValues, CardValue, valueToString } from '../cards';\nimport './rules-view.css';\n\ninterface IRulesViewProps {\n\n}\n\nexport const RulesView : FC<IRulesViewProps> = (props: IRulesViewProps) => {\n    const marriageTableRows = getSuits().map((suit: Suit) => {\n        return (<tr key={ suit.valueOf() }>\n            <td>{suit.toString()}</td>\n            <td>{getMarriageValue(suit)}</td>\n        </tr>);\n    });\n\n    const cardValueTableRows = getCardValues().map((value: CardValue) => {\n        return (<tr key={ value.valueOf() }>\n            <td>{ valueToString(value) }</td>\n            <td>{ value.valueOf() }</td>\n        </tr>)\n    });\n\n    return (<div className=\"rules-view\">\n        <h1>Rules</h1>\n        <section>\n            <h2>About</h2>\n            <p>Tysyacha is a card game of Russian origin played with 3 players.\n                The object of the game is to accumulate 1000 points before your opponents.\n            </p>\n            <p>\n                The game is played by bidding on a contract, to be comleted with hidden cards (called <em>treasure</em>).\n                It is most similar to card games such as Bridge (in the sense there is a contract) and Poker (in the sense it involves bluffing and relying on hidden cards).\n            </p>\n\n            {/* <p>\n                Despite the length of this document, the game is quite simple, suitable for both adults new to card games and children 10 years and older.\n                Bid for the treasure, declare marriages, win tricks, get points.\n            </p> */}\n        </section>\n        <section>\n            <h2>Flow</h2>\n            <p>\n                Each game consists of multiple rounds, as many as it takes for a player to reach 1000 points.\n                In each round, a different player deals. At the beginning of the game, a random player is assigned the dealer role, which then moves clockwise at the conclusion of each round.\n            </p>\n            <p>\n                Each round consists of two phases: bidding, followed by the playing phase, which involes taking <em>tricks</em>.\n                During bidding, the players complete for the right to take the hidden <em>treasure</em> cards.\n                However, the player who won the bidding now holds a <em>contract</em> for that point value.\n                If they do not fulfill their contract, they will be penalized.\n            </p>\n        </section>\n        <section>\n            <h2>Dealing</h2>\n            <p>Each player is dealt 7 cards from a deck of 24 cards (9 through Ace), and the remaining 3 cards are placed in the middle face-down.\n                These cards are called the <em>treasure</em>, and are awarded to whichever player wins the contract.\n            </p>\n        </section>\n        <section>\n            <h2>Bidding</h2>\n            <p>\n                Each player, starting with the player to the left of the dealer, may place a bid.\n                This bid is the total point value they promise to take in the playing phase, summed over all the cards they win in each trick.\n                The minimum bid is { MIN_BID_POINTS } points and the bidding must increase in multiples of 5.\n                At the end of the bidding phase, the player with the highest bid holds the contract for that point value.\n                Any player may pass at any time (declining to make a bid), however once they pass they may <strong>not</strong> re-enter the bidding (in contrast to Bridge).\n            </p>\n\n            <div className=\"alert alert-info\" role=\"alert\">\n                <strong>Note&nbsp;</strong>Any player can bid for any reason. They may bluff in order to force the bidding to go higher, or gamble on the treasure containing good cards.\n            </div>\n\n            <p>\n                The bidding ends when either (a) all three players pass, or (b) one player makes a bid and the other two players pass.\n                If all three players pass, the cards are re-dealt by the same dealer and the round is re-played.\n            </p>\n\n            <p>\n                If a player holds a contract at the end of the bidding phase, the three <em>treasure</em> cards are flipped face up for all players to view.\n                Then the contract player takes those cards into their hand.\n                They may at this point revise their contract up (never down), or choose to keep their existing contract.\n            </p>\n\n            <p>\n                Finally, the contract player gives one card of their choosing from their hand, face down, to each opponent.\n                This card may have been part of the treasure, or may be from their original hand.\n                These cards are kept secret; players may not share what cards they have or what they received.\n            </p>\n\n            <h3>Contract</h3>\n\n            <p>\n                The player who wins the bidding phase is the <em>contract player</em>.\n                The winning bid is called the <em>contract</em>.\n                If the contract player fulfills their contract at the end of the playing phase, they will get the number of points in their contract.\n                If the contract player fails to meet their contract, they will be deducted that number of points.\n                Therefore, holding a contract for a large number of points is both lucrative and perilous.\n            </p>\n\n            <p>\n                The other two players who do not hold the contract will receive as many points as they make during the playing phase (meaning they can never receive negative points).\n            </p>\n\n        </section>\n        <section>\n            <h2>Point Values and Marriages</h2>\n            <p>\n                The central mechanic of Tysyacha is the <em>marriage</em>.\n                A player has a <em>marriage</em> if they hold a King and Queen of the same suit.\n                That marriage can be declared during the playing phase, awarding that player a large number of points.\n                Declaring a marriage also makes that suit the <em>trump</em> suit.\n                The various marriage point values can be found in the table below.\n            </p>\n\n            <table className=\"table table-striped table-sm\">\n                <caption>Table 1: marriage value table</caption>\n                <thead>\n                    <tr>\n                        <th>Suit</th>\n                        <th>Points</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { marriageTableRows }\n                </tbody>\n            </table>\n\n            <p>\n                The precedence of the various cards is different in Tysyacha from most card games.\n                In the table below, the cards are listed in order of precedence (higher is more powerful) along with their point values.\n            </p>\n\n            <table className=\"table table-striped table-sm\">\n                <caption>Table 2: card value table</caption>\n                <thead>\n                    <tr>\n                        <th>Card</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { cardValueTableRows }\n                </tbody>\n            </table>\n        </section>\n\n        <section>\n            <h2>Playing Phase - Taking Tricks</h2>\n\n            <p>\n                Once the bidding phase is complete and the cards are distributed, each player should have 8 cards.\n                The contract player begins the playing phase.\n            </p>\n\n            <p>\n                A trick consists of a single card from each player, played in clockwise order.\n                The player with the \"winning\" card wins the trick and claims the points inside.\n            </p>\n\n            <h3>Starting a Trick</h3>\n            <p>\n                The first player in a trick may play any card from their hand.\n            </p>\n\n            <h3>Playing Subsequent Cards in a Trick</h3>\n            <p>\n                Subsequent players must play a card of the same suit as the first card in the trick (<em>leading suit</em>).\n                If they do not have that suit, they <strong>must</strong> play a card from the trump suit (unlike Bridge where it is optional).\n                If they do not have a card of the trump suit, or there is no trump, they may play any other card.\n            </p>\n\n            <h3>Who Wins the Trick?</h3>\n            <p>\n                If there is a trump suit, the highest trump card wins the trick (see table 2 for precedence).\n                If no trump has been played (or there is no trump suit), the highest card played in the suit of the first card (<em>leading suit</em>) wins the trick.\n                Therefore, all cards of suits other than the trump suit and leading suit may not win tricks.\n\n                The winner of the trick has won the right to go next (start the next trick).\n            </p>\n\n            <h3>Declaring Marriages</h3>\n            <p>\n                During playing, a player may declare a marriage on their turn, after they have won at least one trick.\n                To do so, a player plays a king or queen of the suit in which they hold the marriage and declare \"marriage\" publicly.\n                That suit now becomes the trump.\n            </p>\n\n            <div className=\"alert alert-info\" role=\"alert\">\n                <strong>Note&nbsp;</strong>The contract player may not declare a marriage on their first turn, since winning a trick is necessary first.\n            </div>\n\n            <p>More than one marriage may be declared per game, by any player. The trump changes immediately after the marriage declaration, voiding the previous trump suit.</p>\n\n            <div className=\"alert alert-warning\" role=\"alert\">\n                <strong>Warning&nbsp;</strong>Contract players should be careful when giving away queens and kings to other players at the end of bidding, as that may give those players a card they need for a marriage, possibly ruining your plans.\n            </div>\n\n            <p>While no marriages are declared, there is no trump suit. There is no trump suit at the beginning of play.</p>\n\n            <h3>End of the Playing Phase - Scoring</h3>\n            <p>\n                Once all 8 tricks have been taken, players count the number of points contained in each trick they have taken and sum them.\n                To this total, they add the point value of any marriages that they declared (see Table 1).\n                Point totals are rounded to the nearest multiple of 5 (e.g. 12 is rounded down to 10 but 73 is rounded up to 75).\n            </p>\n\n            <p>\n                If the contract player has fulfilled their contract (obtained the number of points of their contract or more), they receive the number of points in their contract.\n                They do not receive the excess points.\n                If the contract player failed to meet their contract, the full value of the contract is deducted from their point total, regardless of how close they came to fulfilling the contract (e.g. if a player bid 140 points and obtained 135 points, they receive -140 points).\n            </p>\n\n            <p>\n                All other players receive the points they have obtained, including all marriage points.\n            </p>\n\n            <p>\n                No points are awarded for marriages that have not been declared.\n            </p>\n        </section>\n\n        <section>\n            <h2>End of the Game</h2>\n\n            <p>Hands are played until one player accumulates 1000 points.</p>\n\n            <h3>Barrel</h3>\n\n            <p>No player may have between 880 and 1000 points. If any player accumulates between 880 and 1000 points, their score is rounded down to 880.\n                Any player who has 880 points is said to be <em>on the barrel</em>.\n                Once a player is on the barrel, they have 3 turns to get 120 points (or more) in a single turn and win the game.\n                Any time a player on the barrel gets less than 120 points, those points are rounded down to 0.\n                If the player on the barrel does not gain 120 points in 3 turns, they receive -120 points, and are thrown off the barrel.\n                If a player on the barrel ever goes below 880 points, they are similarly off the barrel (for example they lose a contract).\n            </p>\n\n            <p>\n                If a player on the barrel fails to meet a contract on their third turn on the barrel, they receive the greater negative of the failed contract or -120.\n                For example, if a player loses a contract for 80 points on their third turn on the barrel, they receive -120 points.\n                However if that same player loses a contract for 140 points, they receive -140 points.\n                If a player on the barrel completes a contract on their third turn on the barrel, but the value of the contract is less than 120 points,\n                they receive -120 points anyway and receive no points for the contract.\n            </p>\n            <p>\n                A player can win the game (accumulate 1000 points) even if they are not on the barrel.\n                For example, a player with 860 points may win the game by completing a contract for 140 or more points.\n            </p>\n\n            <p>\n                A player may win with more than 1000 points.\n            </p>\n        </section>\n\n        <section>\n            <h2>Misc.</h2>\n\n            <p>If, after 3 deals, a contract is not established (all players pass), the dealing player receives -120 points and the dealer role is rotated clockwise.</p>\n\n            <p>No player may bid more than 120 points unless they hold at least one marriage in their hand.</p>\n\n            <p>The total number of points in the deck (without marriages) is 120.</p>\n        </section>\n\n        <section>\n            <h2>Glossary</h2>\n\n            <ul>\n                <li>\n                    <strong className=\"glossary-term\">[On The] Barrel</strong> - a player who accumulates 880 points. They have 3 turns to get 1000 points or they receive -120 points.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Contract</strong> - the highest (winning) bid in the bidding phase. The contract player must achieve at least this number during the playing phase.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Contract Player</strong> - the player with the highest bid during the bidding phase.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Leading Suit</strong> - the suit of the first card in a trick. Players must play cards of the same suit if they can.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Marriage</strong> - a king and queen of the same suit. It may be declared during the playing phase to receive a large number of bonus points.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Treasure</strong> - the three face-down secret cards dealt at the beginning of the game.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Trick</strong> - one card from each player, played in clockwise order, during the playing phase.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Trump Card</strong> - any card in the current trump suit.\n                </li>\n                <li>\n                    <strong className=\"glossary-term\">Trump [Suit]</strong> - a suit more powerful than the other suits, which must be played if a player does not have a card of the leading suit. A trump suit is declared through a marriage.\n                </li>\n            </ul>\n        </section>\n    </div>);\n};\n\nexport default RulesView;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Lounge from \"./lounge/lounge\";\nimport { LocalGameView } from \"./local-game/local-game-view\";\nimport { ServerView } from \"./server/server-view\";\nimport { LandingView } from \"./landing/landing-view\";\nimport { Navbar } from './local-game/navbar';\nimport { RulesView } from './local-game/rules-view';\n// import { register } from \"./serviceWorkerRegister\";\n\nfunction handleNewRoute(newHash: string) {\n    if (newHash === '') {\n        newHash = '#landing';\n    }\n    const url = new URL(window.location.href);\n    url.hash = newHash;\n    // navigate to that URL\n    window.location.href = url.toString();\n    console.debug(`[index] hash is now ${newHash}`);\n    window.location.reload();\n}\n\nconsole.debug(`hash: ${window.location.hash}`);\n\nswitch (window.location.hash) {\n    case '':\n    case '#':\n    case '#landing':\n        document.title = 'Tysyacha';\n\n        ReactDOM.render(\n            <React.StrictMode>\n                <LandingView\n                    onNewRoute={ handleNewRoute }/>\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n        break;\n    case '#lounge':\n        ReactDOM.render(\n            <React.StrictMode>\n                <Lounge />\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n        break;\n    case '#rules': {\n        const url = new URL(window.location.href);\n        const gameId = url.searchParams.get('gameId') || null;\n\n        ReactDOM.render(\n            <React.StrictMode>\n                <div className=\"wrapper\">\n                    <header>\n                        <Navbar gameId={gameId}\n                            setNavHash={handleNewRoute} />\n                    </header>\n                    <main className=\"container\">\n                        <RulesView />\n                    </main>\n                </div>\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n        break;\n    }\n    case '#local-ai-game':\n    case '#scorecard':\n        // player name and game ID should be set in the GET string\n        const url = new URL(window.location.href);\n        const gameId = url.searchParams.get('gameId');\n        const playerName = url.searchParams.get('playerName');\n\n        if (!gameId || !playerName) {\n            window.location.href = '/';\n            break;\n        }\n\n        document.title = `Tysyacha | Game ${gameId}`;\n\n        ReactDOM.render(\n            <React.StrictMode>\n                <LocalGameView\n                    gameId={gameId}\n                    playerName={playerName}\n                    onNewRoute={handleNewRoute} />\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n        break;\n    case '#server':\n        ReactDOM.render(\n            <React.StrictMode>\n                <ServerView />\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n        break;\n    case '#game':\n        ReactDOM.render(\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>,\n            document.getElementById('root')\n        );\n        break;\n    default:\n        ReactDOM.render(\n            <p>Unknown hash - { window.location.hash }</p>,\n            document.getElementById('root')\n        );\n        break;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n// register();"],"sourceRoot":""}